{"version":3,"sources":["../../src/controllers/perimeterPointController.js"],"names":["require","Parser","logger","PerimeterPointController","ctx","data","request","body","info","error","msg","perimeter","name","status","add_perimeter","perimeterId","pps","i","len","pp","length","perimeterPoint","x","y","No","mapPosition","realPosition","push","result","add_list","id","params","delete_perimeterPoint","_id","edit_perimeterPoint","sort","query","sortObj","JSON","parse","sortP","getTotal","total","findAll","hosts","forEach","e","host","_doc","find_one"],"mappings":"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","file":"perimeterPointController.js","sourcesContent":["/**\r\n * Created by chen on 17-8-23.\r\n */\r\nconst {Parser}=require('../log/log');\r\nconst logger={};\r\nParser(logger,'PerimeterPointController.js');\r\nimport PerimeterPointService from \"../services/perimeterPointService\";\r\nimport PerimeterService from '../services/perimeterService';\r\nimport HostService from '../services/hostService';\r\n\r\nclass PerimeterPointController {\r\n    static async add_perimeterPoint(ctx){\r\n        const data = ctx.request.body;\r\n        logger.info(data);\r\n        if(!data) return ctx.error={ msg: '发送数据失败!' };\r\n        // const isExit = await PerimeterPointService.isExist({realPosition:data.realPosition});\r\n        // logger.info(isExit);\r\n        // if(isExit) return ctx.error={ msg: '该实际距离的周界点已存在!' };\r\n\r\n        let perimeter = {name:data.name,status:1};\r\n        let perimeterId = await PerimeterService.add_perimeter(perimeter);\r\n        if(perimeterId != null){\r\n            return ctx.error={ msg: '添加周界失败!' };\r\n        }\r\n        let pps = [];\r\n        for(let i = 0,len=data.pp.length; i < len; i++) {\r\n            let perimeterPoint = {};\r\n            perimeterPoint.name = data.name;\r\n            perimeterPoint.x = data.pp[i].x;\r\n            perimeterPoint.y = data.pp[i].y;\r\n            perimeterPoint.No = data.pp[i].No;\r\n            perimeterPoint.mapPosition = data.pp[i].mapPosition;\r\n            perimeterPoint.realPosition = data.pp[i].realPosition;\r\n            perimeterPoint.perimeterId = perimeterId;\r\n\r\n            pps.push(perimeterPoint);\r\n        }\r\n\r\n        const result = PerimeterPointService.add_list(pps);\r\n        let msg = '';\r\n        if(result) {\r\n            msg = '添加周界'+data.name+'成功';\r\n            return ctx.body = {msg:msg,data:data};\r\n        }else{\r\n            msg = '添加失败';\r\n            return ctx.error={msg: msg};\r\n        }\r\n\r\n\r\n    }\r\n\r\n    static async delete_perimeterPoint(ctx) {\r\n        const { id } = ctx.params;\r\n        logger.info(id);\r\n        const result = await PerimeterPointService.delete_perimeterPoint({id:id});\r\n        let msg = '';\r\n        if(result) {\r\n            msg = '删除周界点成功';\r\n            return ctx.body = {msg:msg,data:result};\r\n        }else{\r\n            msg = '删除周界点失败';\r\n            return ctx.error={msg: msg};\r\n        }\r\n\r\n\r\n    }\r\n\r\n    static async edit_perimeterPoint(ctx){\r\n        const data = ctx.request.body;\r\n        logger.info(data);\r\n        let _id = data._id;\r\n        delete data._id;\r\n        const result = await PerimeterPointService.edit_perimeterPoint({_id:_id},data);\r\n        if(result) ctx.body = {msg:'修改周界点成功',data:result};\r\n        return ctx.error={msg: '修改周界点失败!'};\r\n    }\r\n\r\n    static async find_perimeterPoint(ctx){\r\n        const { sort/*,range,filter */} = ctx.query;\r\n        let sortObj = JSON.parse(sort);\r\n        let sortP = {};\r\n        if(sortObj && sortObj.length >=2){\r\n            if('ASC' ===sortObj[1]){\r\n                sortP[sortObj[0]] = 1\r\n            }else{\r\n                sortP[sortObj[0]] = -1\r\n            }\r\n        }\r\n\r\n        const total = await PerimeterPointService.getTotal();\r\n\r\n        const result = await PerimeterPointService.findAll(sortP);\r\n        const hosts = await HostService.findAll();\r\n\r\n        result.forEach(function (e) {\r\n            hosts.forEach(function (host) {\r\n                if(e._doc.perimeterId === host._doc.id) e._doc.host = host._doc;\r\n                //return;\r\n            });\r\n        });\r\n        //const result = await PerimeterPointModel.find().exec();\r\n        if(result) return ctx.body = {msg:'查询周界点成功',data:result,total:total};\r\n        return ctx.error={msg: '没有找到周界点!'};\r\n    }\r\n    static async find_one(ctx){\r\n        const { id } = ctx.params;\r\n        const result = await PerimeterPointService.find_one(id);\r\n        const hosts = await HostService.findAll();\r\n\r\n        result.forEach(function (e) {\r\n            hosts.forEach(function (host) {\r\n                if(e._doc.perimeterId === host._doc.id) e._doc.host = host._doc;\r\n                //return;\r\n            });\r\n        });\r\n        if(result) ctx.body = {msg:'查询周界点',data:result};\r\n        return ctx.error = {msg: '没有找到周界点!'};\r\n    }\r\n\r\n}\r\n\r\nexport default PerimeterPointController;"]}