{"version":3,"sources":["../../src/controllers/userController.js"],"names":["require","Parser","logger","UserController","ctx","next","user","req","findOneAndRemove","_id","create","token","genHash","username","Date","now","result","status","body","success","data","find","users","length","_admin","save","request","name","email","password","render","message","error","findOne","isexit","AdminUserModel","redirect","info","err","JSON","stringify"],"mappings":"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","file":"userController.js","sourcesContent":["/**\r\n * Created by chen on 17-8-22.\r\n */\r\n// import mongoose from 'mongoose';\r\nimport md5 from 'md5';\r\nconst {Parser}=require('../log/log');\r\nconst logger={};\r\nParser(logger,'UserController.js');\r\nimport UserModel from '../models/user.model';\r\nimport TokenModel from '../models/accessToken';\r\n\r\nimport {getHash} from '../utils';\r\nimport admin from '../config/admin';\r\n\r\n\r\nclass UserController {\r\n    static async signToken (ctx, next) {\r\n        const { user } = ctx.req;\r\n        await TokenModel.findOneAndRemove({user: user._id});\r\n        const result = await TokenModel.create({\r\n            token: genHash(user.username + Date.now()),\r\n            user: user._id\r\n        });\r\n\r\n        ctx.status = 200;\r\n        ctx.body = {\r\n            success: true,\r\n            data: result\r\n        }\r\n    }\r\n\r\n    static async getUserByToken (ctx, next) {\r\n        ctx.status = 200;\r\n        ctx.body = {\r\n            success: true,\r\n            data: ctx.req.user\r\n        }\r\n    }\r\n\r\n    // 当数据库中user表示空的时候，创建超级管理员\r\n    static async seed (ctx, next) {\r\n        const users = await UserModel.find({});\r\n        if (users.length === 0) {\r\n            const _admin = new UserModel(admin);\r\n            /*const adminUser = */await _admin.save()\r\n        }\r\n    }\r\n\r\n\r\n    // 添加用户\r\n    static async create_user(ctx){\r\n        const { name, email, password } = ctx.request.body;\r\n        if(!name||!password) return ctx.render('error',{\r\n            message: '用户或密码不能为空!',\r\n            error: { status:400 }\r\n        });\r\n        const isexit = await UserModel.findOne({name,password: md5(password)});\r\n        if(isexit) return ctx.render('error',{\r\n            message: '该用户已存在!',\r\n            error: { status:400 }\r\n        });\r\n        /*const result = */await AdminUserModel.create({name,email,password: md5(password)});\r\n        ctx.redirect('/');\r\n    }\r\n\r\n    // 用户登录\r\n    static async signIn(ctx) {\r\n        const { name, password } = ctx.request.body;\r\n        try {\r\n            let user = await UserModel.findOne({username:name,password:md5(password)});\r\n            logger.info(user);\r\n            if(user){\r\n                return ctx.body={status:\"success\",data:user}\r\n            }\r\n        } catch (err){\r\n            logger.error(\"登录失败\");\r\n            return ctx.body={status:\"failed\",err:err}\r\n        }\r\n    }\r\n\r\n    // 用户退出\r\n    static async signOut(ctx) {\r\n        try {\r\n            let user = await UserModel.findOne({username:'chen',password:md5('chen')});\r\n            logger.info(user);\r\n            ctx.body = JSON.stringify({status:\"success\",data:user});\r\n        }catch(err) {\r\n            logger.error('err', err);\r\n            ctx.status = 500;  //状态 500\r\n            ctx.body =  JSON.stringify({status: 'failed'}) //返回错误状态\r\n        }\r\n        //return ;\r\n    }\r\n}\r\n\r\nexport default UserController;"]}