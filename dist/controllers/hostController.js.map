{"version":3,"sources":["../../src/controllers/hostController.js"],"names":["require","Parser","logger","HostsController","ctx","data","request","body","info","msg","isExist","port","isExit","add_host","result","error","id","params","delete_host","_id","edit_host","sort","query","sortObj","JSON","parse","sortP","length","findAll","GetPortsArrived","ports","portObj","map","item","name","range","filter","rangeObj","filterObj","obj","Array","isArray","$in","pageStart","pageEnd","getTotal","total","pagination","pageSize","find_host","find_one"],"mappings":";;;;;;;;;;;;AAMA;;;;AAEA;;;;;;;;;;AARA;;;eAGeA,QAAQ,YAAR,C;IAARC,M,YAAAA,M;;AACP,IAAMC,SAAO,EAAb;AACAD,OAAOC,MAAP,EAAc,oBAAd;AAEA;;IAGMC,e;;;;;;;;mGACoBC,G;;;;;;AACZC,oC,GAAOD,IAAIE,OAAJ,CAAYC,I;;AACzBL,uCAAOM,IAAP,CAAYH,IAAZ;;oCACIA,I;;;;;iEAAaD,IAAIG,IAAJ,GAAS,EAAEE,KAAK,SAAP,E;;;;uCACL,sBAAYC,OAAZ,CAAoB,EAACC,MAAKN,KAAKM,IAAX,EAApB,C;;;AAAfC,sC;;AACNV,uCAAOM,IAAP,CAAYI,MAAZ;;qCACGA,M;;;;;iEAAeR,IAAIG,IAAJ,GAAS,EAAEE,KAAK,QAAP,E;;;;uCAEN,sBAAYI,QAAZ,CAAqBR,IAArB,C;;;AAAfS,sC;AAEFL,mC,GAAM,E;;qCACPK,M;;;;;AACCL,sCAAM,SAAQJ,KAAKM,IAAb,GAAmB,IAAzB;iEACOP,IAAIG,IAAJ,GAAW,EAACE,KAAIA,GAAL,EAASJ,MAAKA,IAAd,E;;;AAElBI,sCAAM,MAAN;iEACOL,IAAIW,KAAJ,GAAU,EAACN,KAAKA,GAAN,E;;;;;;;;;;;;;;;;;;;qGAOAL,G;;;;;;AACbY,kC,GAAOZ,IAAIa,M,CAAXD,E;;AACRd,uCAAOM,IAAP,CAAYQ,EAAZ;;uCACqB,sBAAYE,WAAZ,CAAwB,EAACF,IAAGA,EAAJ,EAAxB,C;;;AAAfF,sC;AACFL,mC,GAAM,E;;qCACPK,M;;;;;AACCL,sCAAM,QAAN;kEACOL,IAAIG,IAAJ,GAAW,EAACE,KAAIA,GAAL,EAASJ,MAAKS,MAAd,E;;;AAElBL,sCAAM,QAAN;kEACOL,IAAIW,KAAJ,GAAU,EAACN,KAAKA,GAAN,E;;;;;;;;;;;;;;;;;;;qGAKFL,G;;;;;;;AACbC,oC,GAAOD,IAAIE,OAAJ,CAAYC,I;;AACzBL,uCAAOM,IAAP,CAAYH,IAAZ;AACIc,mC,GAAMd,KAAKc,G;;AACf,uCAAOd,KAAKc,GAAZ;;uCACqB,sBAAYC,SAAZ,CAAsB,EAACD,KAAIA,GAAL,EAAtB,EAAgCd,IAAhC,C;;;AAAfS,sC;;qCACHA,M;;;;;kEAAeV,IAAIG,IAAJ,GAAW,EAACE,KAAI,QAAL,EAAcJ,MAAKS,MAAnB,E;;;kEACtBV,IAAIW,KAAJ,GAAU,EAACN,KAAK,SAAN,E;;;;;;;;;;;;;;;;;;;qGAGSL,G;;;;;;AAClBiB,oC,GAAQjB,IAAIkB,K,CAAZD,I;AACJE,uC,GAAUC,KAAKC,KAAL,CAAWJ,IAAX,C;AACVK,qC,GAAQ,E;;AACZ,oCAAGH,WAAWA,QAAQI,MAAR,IAAiB,CAA/B,EAAiC;AAC7B,wCAAG,UAASJ,QAAQ,CAAR,CAAZ,EAAuB;AACnBG,8CAAMH,QAAQ,CAAR,CAAN,IAAoB,CAApB;AACH,qCAFD,MAEK;AACDG,8CAAMH,QAAQ,CAAR,CAAN,IAAoB,CAAC,CAArB;AACH;AACJ;;uCACkB,sBAAYK,OAAZ,CAAoBF,KAApB,C;;;AAAfZ,sC;;qCACDA,M;;;;;kEAAeV,IAAIG,IAAJ,GAAW,EAACE,KAAI,MAAL,EAAYJ,MAAKS,MAAjB,E;;;kEACtBV,IAAIG,IAAJ,GAAS,EAACE,KAAK,SAAN,E;;;;;;;;;;;;;;;;;;;qGAGCL,G;;;;;;;uCACC,qBAAWyB,eAAX,E;;;AAAdC,qC;AACAC,uC,GAAUD,MAAME,GAAN,CAAU,UAACC,IAAD,CAAK,MAAL,EAAc;AAClC,2CAAO,EAACC,MAAKD,IAAN,EAAWjB,IAAGiB,IAAd,EAAP;AACH,iCAFa,C;kEAGP7B,IAAIG,IAAJ,GAAW,EAACE,KAAI,QAAL,EAAcJ,MAAK0B,OAAnB,E;;;;;;;;;;;;;;;;;;;qGAGC3B,G;;;;;;;6CACWA,IAAIkB,K,EAA1BD,I,cAAAA,I,EAAKc,K,cAAAA,K,EAAMC,M,cAAAA,M;AAEfb,uC,GAAU,I;;AACd,oCAAGF,IAAH,EAAQ;AACJE,8CAAUC,KAAKC,KAAL,CAAWJ,IAAX,CAAV;AACH;;AAEGgB,wC,GAAW,I;;AACf,oCAAGF,KAAH,EAAS;AACLE,+CAAWb,KAAKC,KAAL,CAAWU,KAAX,CAAX;AACH;;AAEGG,yC,GAAY,I;;AAChB,oCAAGF,UAAU,SAAQA,MAArB,EAA4B;AACpBG,uCADoB,GACdf,KAAKC,KAAL,CAAWW,MAAX,CADc;;AAExB,wCAAGG,OAAOC,MAAMC,OAAN,CAAcF,IAAIvB,EAAlB,CAAV,EAAgC;AAC5BsB,oDAAY,EAACtB,IAAG,EAAC0B,KAAIH,IAAIvB,EAAT,EAAJ,EAAZ;AACH,qCAFD,MAEK;AACDsB,oDAAYC,GAAZ;AACH;AACJ;;AAEGb,qC,GAAQ,E;;AACZ,oCAAGH,WAAWA,QAAQI,MAAR,IAAiB,CAA/B,EAAiC;AAC7B,wCAAG,UAASJ,QAAQ,CAAR,CAAZ,EAAuB;AACnBG,8CAAMH,QAAQ,CAAR,CAAN,IAAoB,CAApB;AACH,qCAFD,MAEK;AACDG,8CAAMH,QAAQ,CAAR,CAAN,IAAoB,CAAC,CAArB;AACH;AACJ;;AAEGoB,yC,GAAY,C,EAAEC,O,GAAU,C;;AAC5B,oCAAGP,YAAYA,SAASV,MAAT,IAAkB,CAAjC,EAAmC;AAC/BgB,gDAAYN,SAAS,CAAT,CAAZ;AACAO,8CAAUP,SAAS,CAAT,CAAV;AACH;;;;uCAGuB,sBAAYQ,QAAZ,E;;;AAAdC,qC;AAEAC,0C,GAAa,E;;AACnBA,2CAAWJ,SAAX,GAAuBA,SAAvB;AACAI,2CAAWC,QAAX,GAAsBJ,UAAQD,SAAR,GAAkB,CAAxC;AACI7B,sC,GAAS,I;;qCACVY,K;;;;;qCACIW,Q;;;;;AACKM,0C,GAAY,C,EAAEC,Q,GAAU,C;;AAC5B,oCAAGP,YAAYA,SAASV,MAAT,IAAkB,CAAjC,EAAmC;AAC/BgB,iDAAYN,SAAS,CAAT,CAAZ;AACAO,+CAAUP,SAAS,CAAT,CAAV;AACH;AACKU,2C,GAAa,E;;AACnBA,4CAAWJ,SAAX,GAAuBA,UAAvB;AACAI,4CAAWC,QAAX,GAAsBJ,WAAQD,UAAR,GAAkB,EAAxC;;uCACe,sBAAYM,SAAZ,CAAsBX,SAAtB,EAAgCZ,KAAhC,EAAsCqB,WAAtC,C;;;AAAfjC,sC;;;;;;uCAEe,sBAAYmC,SAAZ,CAAsBX,SAAtB,EAAgCZ,KAAhC,C;;;AAAfZ,sC;;;;;;;qCAGDuB,Q;;;;;AACKM,2C,GAAY,C,EAAEC,S,GAAU,C;;AAC5B,oCAAGP,YAAYA,SAASV,MAAT,IAAkB,CAAjC,EAAmC;AAC/BgB,kDAAYN,SAAS,CAAT,CAAZ;AACAO,gDAAUP,SAAS,CAAT,CAAV;AACH;AACKU,4C,GAAa,E;;AACnBA,6CAAWJ,SAAX,GAAuBA,WAAvB;AACAI,6CAAWC,QAAX,GAAsBJ,YAAQD,WAAR,GAAkB,EAAxC;;uCACe,sBAAYM,SAAZ,CAAsBX,SAAtB,EAAgC,IAAhC,EAAqCS,YAArC,C;;;AAAfjC,sC;;;;;;uCAEe,sBAAYmC,SAAZ,CAAsBX,SAAtB,C;;;AAAfxB,sC;;;qCAKLA,M;;;;;kEAAeV,IAAIG,IAAJ,GAAW,EAACE,KAAI,MAAL,EAAYJ,MAAKS,MAAjB,EAAwBgC,OAAMA,KAA9B,E;;;kEACtB1C,IAAIG,IAAJ,GAAS,EAACE,KAAK,SAAN,E;;;;;;AAEhBP,uCAAOa,KAAP;;;;;;;;;;;;;;;;;;;qGAIcX,G;;;;;;AACVY,kC,GAAOZ,IAAIa,M,CAAXD,E;;;uCAEiB,sBAAYkC,QAAZ,CAAqBlC,EAArB,C;;;AAAfF,sC;;qCACHA,M;;;;;kEAAeV,IAAIG,IAAJ,GAAW,EAACE,KAAI,MAAL,EAAYJ,MAAKS,MAAjB,E;;;kEACtBV,IAAIG,IAAJ,GAAW,EAACE,KAAK,SAAN,E;;;;;;AAElBP,uCAAOa,KAAP;;;;;;;;;;;;;;;;;;;;;kBAOGZ,e","file":"hostController.js","sourcesContent":["/**\r\n * Created by chen on 17-8-23.\r\n */\r\nconst {Parser}=require('../log/log');\r\nconst logger={};\r\nParser(logger,'HostsController.js');\r\nimport HostService from '../services/hostService';\r\n//import PpService from \"../services/ppService\";\r\nimport Serialport from '../serialport/serialport';\r\n\r\nclass HostsController {\r\n    static async add_host(ctx){\r\n        const data = ctx.request.body;\r\n        logger.info(data);\r\n        if(!data) return ctx.body={ msg: '发送数据失败!' };\r\n        const isExit = await HostService.isExist({port:data.port});\r\n        logger.info(isExit);\r\n        if(isExit) return ctx.body={ msg: '主机已存在!' };\r\n\r\n        const result = await HostService.add_host(data)\r\n\r\n        let msg = '';\r\n        if(result) {\r\n            msg = '添加主机'+ data.port +'成功';\r\n            return ctx.body = {msg:msg,data:data};\r\n        }else{\r\n            msg = '添加失败';\r\n            return ctx.error={msg: msg};\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    static async delete_host(ctx) {\r\n        const { id } = ctx.params;\r\n        logger.info(id);\r\n        const result = await HostService.delete_host({id:id});\r\n        let msg = '';\r\n        if(result) {\r\n            msg = '删除主机成功';\r\n            return ctx.body = {msg:msg,data:result};\r\n        }else{\r\n            msg = '删除主机失败';\r\n            return ctx.error={msg: msg};\r\n        }\r\n\r\n    }\r\n\r\n    static async edit_host(ctx){\r\n        const data = ctx.request.body;\r\n        logger.info(data);\r\n        let _id = data._id;\r\n        delete data._id;\r\n        const result = await HostService.edit_host({_id:_id},data);\r\n        if(result) return ctx.body = {msg:'修改主机成功',data:result};\r\n        return ctx.error={msg: '修改主机失败!'};\r\n    }\r\n\r\n    static async find_host_noPage(ctx){\r\n        const { sort} = ctx.query;\r\n        let sortObj = JSON.parse(sort);\r\n        let sortP = {};\r\n        if(sortObj && sortObj.length >=2){\r\n            if('ASC' ===sortObj[1]){\r\n                sortP[sortObj[0]] = 1;\r\n            }else{\r\n                sortP[sortObj[0]] = -1;\r\n            }\r\n        }\r\n        let result = await HostService.findAll(sortP);\r\n        if(result) return ctx.body = {msg:'查询主机',data:result};\r\n        return ctx.body={msg: '没有找到主机!'};\r\n    }\r\n\r\n    static async getPort(ctx){\r\n        let ports = await Serialport.GetPortsArrived();\r\n        let portObj = ports.map((item/*,i*/)=>{\r\n            return {name:item,id:item};\r\n        });\r\n        return ctx.body = {msg:'获取本机端口',data:portObj};\r\n    }\r\n\r\n    static async find_host(ctx){\r\n        const { sort,range,filter } = ctx.query;\r\n\r\n        let sortObj = null;\r\n        if(sort){\r\n            sortObj = JSON.parse(sort);\r\n        }\r\n\r\n        let rangeObj = null;\r\n        if(range){\r\n            rangeObj = JSON.parse(range);\r\n        }\r\n\r\n        let filterObj = null;\r\n        if(filter && \"{}\" !==filter){\r\n            let obj = JSON.parse(filter);\r\n            if(obj && Array.isArray(obj.id)){\r\n                filterObj = {id:{$in:obj.id}};\r\n            }else{\r\n                filterObj = obj;\r\n            }\r\n        }\r\n\r\n        let sortP = {};\r\n        if(sortObj && sortObj.length >=2){\r\n            if('ASC' ===sortObj[1]){\r\n                sortP[sortObj[0]] = 1\r\n            }else{\r\n                sortP[sortObj[0]] = -1\r\n            }\r\n        }\r\n\r\n        let pageStart = 0,pageEnd = 0;\r\n        if(rangeObj && rangeObj.length >=2){\r\n            pageStart = rangeObj[0];\r\n            pageEnd = rangeObj[1];\r\n        }\r\n\r\n        try{\r\n            const total = await HostService.getTotal();\r\n\r\n            const pagination = {};\r\n            pagination.pageStart = pageStart;\r\n            pagination.pageSize = pageEnd-pageStart+1;\r\n            let result = null;\r\n            if(sortP){\r\n                if(rangeObj){\r\n                    let pageStart = 0,pageEnd = 0;\r\n                    if(rangeObj && rangeObj.length >=2){\r\n                        pageStart = rangeObj[0];\r\n                        pageEnd = rangeObj[1];\r\n                    }\r\n                    const pagination = {};\r\n                    pagination.pageStart = pageStart;\r\n                    pagination.pageSize = pageEnd-pageStart+25;\r\n                    result = await HostService.find_host(filterObj,sortP,pagination);\r\n                }else{\r\n                    result = await HostService.find_host(filterObj,sortP);\r\n                }\r\n            }else{\r\n                if(rangeObj){\r\n                    let pageStart = 0,pageEnd = 0;\r\n                    if(rangeObj && rangeObj.length >=2){\r\n                        pageStart = rangeObj[0];\r\n                        pageEnd = rangeObj[1];\r\n                    }\r\n                    const pagination = {};\r\n                    pagination.pageStart = pageStart;\r\n                    pagination.pageSize = pageEnd-pageStart+25;\r\n                    result = await HostService.find_host(filterObj,null,pagination);\r\n                }else{\r\n                    result = await HostService.find_host(filterObj);\r\n                }\r\n            }\r\n\r\n            // let result = await HostService.find_host(filterObj,sortP,pagination);\r\n            if(result) return ctx.body = {msg:'查询主机',data:result,total:total};\r\n            return ctx.body={msg: '没有找到主机!'};\r\n        }catch(error){\r\n            logger.error(error);\r\n        }\r\n\r\n    }\r\n    static async find_one(ctx){\r\n        const { id } = ctx.params;\r\n        try{\r\n            const result = await HostService.find_one(id);\r\n            if(result) return ctx.body = {msg:'查询主机',data:result};\r\n            return ctx.body = {msg: '没有找到主机!'};\r\n        }catch(error){\r\n            logger.error(error);\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default HostsController;"]}