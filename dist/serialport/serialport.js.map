{"version":3,"sources":["../../src/serialport/serialport.js"],"names":["_","require","config","global","server_config","SerialPort","EventEmitter","ByteLength","parsers","Parser","_Events","Open","Close","Error","Data","Online","Offline","_Errors","openError","writeError","closeError","Other","Com","port","options","isNumber","_timeHandle","_stopReConnect","_lastData","Buffer","alloc","timeOut","tryTimes","trySpan","deDuplication","extend","get","autoOpen","_received","_received_bak","_start","data","equals","clearTimeout","Promise","resolve","span","disConnect","then","reject","time","start","Date","getTime","restart","_connect","emit","log","times","catch","warn","duration","setTimeout","serialPort","write","err","_error","innerError","toString","drain","receive","length","isDuplication","on","e","removeAllListeners","type","disconnected","_reConnect","open","parser","pipe","byteLength","desc","message","indexOf","unpipe","close","error","params","errorType","isOpen","list","ports","map","exports","module"],"mappings":"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","file":"serialport.js","sourcesContent":["/**\r\n * Created by Wxf on 2017/9/8.\r\n */\r\n\r\nconst _=require('lodash');\r\nconst config=global.server_config||require('../config/config');\r\nconst SerialPort=require('serialport');\r\nconst EventEmitter=require('events').EventEmitter;\r\nconst ByteLength = SerialPort.parsers.ByteLength;\r\nconst {Parser} =require('../log/log');\r\n\r\nconst _Events={\r\n    Open:'open',\r\n    Close:'close',\r\n    Error:'error',\r\n    Data:'data',\r\n    //offline之后再连接为online\r\n    Online:'online',\r\n    Offline:'offline'\r\n};\r\n\r\nconst _Errors={\r\n    openError: 'openError',\r\n    writeError: 'writeError',\r\n    closeError:'closeError',\r\n    Other: 'other'\r\n};\r\n\r\nclass Com extends EventEmitter{\r\n    constructor(port,options){\r\n        super();\r\n        if(_.isNumber(port)){\r\n            port=`\\\\\\\\.\\\\COM${port}`;\r\n        }\r\n        this.port=port;\r\n        this._timeHandle=0;\r\n        this._stopReConnect=false;\r\n        this._lastData=Buffer.alloc(0);\r\n        this.options= {\r\n            timeOut:3000,\r\n            tryTimes:-1,\r\n            trySpan:5000,\r\n            deDuplication:false\r\n        };\r\n        _.extend(this.options,_.get(config,'serialPort'),options,{autoOpen:false});\r\n        this._received=0;\r\n        this._received_bak=0;\r\n        this._start=0;\r\n        Parser(this,'serialport.js',{port:port});\r\n    }\r\n\r\n    isDuplication(data) {\r\n        if(!this.options.deDuplication) return false;\r\n        if(this._lastData.equals(data)){\r\n            return true;\r\n        }\r\n        this._lastData=data;\r\n        return false;\r\n    }\r\n\r\n    stopReConnect(){\r\n        this._stopReConnect=true;\r\n        clearTimeout(this._timeHandle);\r\n        this._timeHandle=0;\r\n    }\r\n\r\n    _reConnect(){\r\n        if(this.options.tryTimes===0) return Promise.resolve();\r\n        let tryTimes=this.options.tryTimes;\r\n        let span=this.options.trySpan;\r\n        return this.disConnect().then(()=>{\r\n            return new Promise((resolve,reject)=>{\r\n                let time=0,start=new Date().getTime();\r\n                let restart=()=>{\r\n                    this._connect().then(()=>{\r\n                        this.emit(_Events.Online,this.log(`端口成功打开,第${time}次尝试`));\r\n                        time=0;\r\n                        resolve({times:time});\r\n                    }).catch(()=>{\r\n                        time++;\r\n                        this.emit(_Events.Offline,this.warn(`重连失败,第${time}次尝试`,{times:time,duration:(new Date().getTime()-start)}));\r\n                        if(this._stopReConnect){\r\n                            this._stopReConnect=false;\r\n                            return reject({times:time});\r\n                        }\r\n                        if(tryTimes===-1){\r\n                            this._timeHandle=setTimeout(restart,span);\r\n                            return;\r\n                        }\r\n                        if(tryTimes===0)return reject({times:time});\r\n                        tryTimes--;\r\n                    });\r\n                };\r\n                restart();\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n    get isConnected() {\r\n        if(!this.serialPort) return false;\r\n        return this.serialPort.isOpen;\r\n    }\r\n\r\n    write(data){\r\n        if(!this.serialPort) return Promise.reject('端口未连接，无法发送信号');\r\n        return new Promise((resolve,reject)=>{\r\n            this.serialPort.write(data,'binary',(err)=>{\r\n                if(err){\r\n                    let log=this._error(_Errors.writeError,'指令发送失败',{innerError:err.toString()});\r\n                    return reject(log);\r\n                }\r\n                this.serialPort.drain((err)=>{\r\n                    if(err){\r\n                        let log=this._error(_Errors.writeError,'指令发送失败,未送出',{innerError:err.toString()});\r\n                        return reject(log);\r\n                    }\r\n                    resolve();\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    _connect()\r\n    {\r\n        return this.disConnect().then(()=>{\r\n            return new Promise((resolve,reject)=>{\r\n                let port = new SerialPort(this.port,this.options);\r\n                let receive=(data)=>{\r\n                    this._received+=data.length;\r\n                    //1024B *100\r\n                    if(this._received-this._received_bak>102400){\r\n                        this._received_bak=this._received;\r\n                        this.log(`接受到数据${this._received_bak}KB,运行时长${(new Date().getTime()-this._start)/1000}分`)\r\n                    }\r\n                    if(this.isDuplication(data))return;\r\n                    this.emit('data',data,this.port);\r\n                };\r\n\r\n                port.on('close', (e) => {\r\n                    //file.close();\r\n                    //网线拔掉以后会有关闭事件\r\n                    port.removeAllListeners();\r\n                    if(this.serialPort) delete this.serialPort;\r\n                    port=null;\r\n                    this.emit(_Events.Close, this.log('端口关闭',{type: _Events.Close}));\r\n                    if(e&&e.disconnected){\r\n                        this._reConnect().catch();\r\n                    }\r\n                });\r\n\r\n                //Callback is called with an error object whenever there is an error.\r\n                port.on('error', (err) => {\r\n                    this.emit(_Events.Error,this._error(_Errors.Other,'端口异常',{innerError:err.toString()}));\r\n                    this.disConnect();\r\n                });\r\n\r\n                port.open((e) =>{\r\n                    if (e) {\r\n                        port.removeAllListeners();\r\n                        return reject(e);\r\n                    }\r\n                    this._received=0;\r\n                    this._received_bak=0;\r\n                    this._start=new Date().getTime();\r\n                    this.serialPort=port;\r\n                    let parser=this.parser = port.pipe(new ByteLength({length: this.options.byteLength}));\r\n                    parser.on('data', receive);\r\n                    resolve();\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    connect(){\r\n        return new Promise((resolve,reject)=>{\r\n            this._connect().then(()=>{\r\n                this.emit(_Events.Open, this.log('端口打开成功',{type: _Events.Open}));\r\n                resolve();\r\n            }).catch((e)=>{\r\n                if(this.options.tryTimes!==0) {\r\n                    return this._reConnect().then(data=>resolve(data)).catch(e=>reject(e));\r\n                }\r\n                let desc='端口打开出错';\r\n                if(e.message){\r\n                    if(e.message.indexOf('File not found')>-1){\r\n                        desc='端口未找到';\r\n                    }\r\n                    else if(e.message.indexOf('Access denied')>-1){\r\n                        desc='端口以被其他应用占用，请确认';\r\n                    }\r\n                }\r\n                let log=this._error(_Errors.openError,desc,{innerError:e.toString()});\r\n                this.emit(_Events.Error,log);\r\n                reject(log);\r\n            });\r\n        });\r\n    }\r\n\r\n    disConnect(){\r\n        this._lastData=Buffer.alloc(0);\r\n        if(!this.serialPort) return Promise.resolve();\r\n        this.parser.unpipe(this.serialPort);\r\n        this.parser=null;\r\n        return new Promise((resolve,reject)=>{\r\n            this.serialPort.close((err)=>{\r\n                if(err){\r\n                    let data=this._error(_Errors.closeError,'端口关闭异常',{innerError:err.toString()});\r\n                    this.emit(_Events.error,data);\r\n                    return reject(data);\r\n                }\r\n                this.log('端口应要关闭');\r\n                return resolve();\r\n            });\r\n        });\r\n    }\r\n\r\n    _error(type,desc,params){\r\n        return this.error(desc,_.extend({\r\n            type: _Events.Error,\r\n            errorType: type,\r\n        },params));\r\n    }\r\n\r\n    static get Events(){\r\n        return _Events;\r\n    }\r\n\r\n    static get Errors() {\r\n        return _Errors;\r\n    }\r\n\r\n    static async GetPortsArrived(){\r\n        let ports=await SerialPort.list().catch(()=>{\r\n            return Promise.resolve([]);\r\n        });\r\n        return _.map(ports,'comName');\r\n    }\r\n}\r\n\r\nexports=module.exports= Com;"]}