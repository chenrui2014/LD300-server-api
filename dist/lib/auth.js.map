{"version":3,"sources":["../../src/lib/auth.js"],"names":["passport","require","LocalStrategy","BearerStrategy","UserModel","AccessToken","serializeUser","user","done","username","deserializeUser","findOne","use","token","populate","accessToken","type","message","password","validPassword","exports","isBearerAuthenticated","authenticate","session","isLocalAuthenticated"],"mappings":";;;;;;;;;;AAAA,IAAMA,WAAYC,QAAQ,cAAR,CAAlB;AACA,IAAMC,gBAAiBD,QAAQ,gBAAR,CAAvB;AACA,IAAME,iBAAkBF,QAAQ,sBAAR,CAAxB;AACA,IAAMG,YAAYH,QAAQ,sBAAR,CAAlB;AACA,IAAMI,cAAeJ,QAAQ,uBAAR,CAArB;AACA;AACAD,SAASM,aAAT,CAAuB,UAACC,IAAD,EAAOC,IAAP;AAAA,WAAgBA,KAAK,IAAL,EAAWD,KAAKE,QAAhB,CAAhB;AAAA,CAAvB;AACAT,SAASU,eAAT;AAAA,0EAAyB,iBAAOD,QAAP,EAAiBD,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACFJ,UAAUO,OAAV,CAAkB,EAACF,kBAAD,EAAlB,CADE;;AAAA;AACfF,4BADe;;AAErBC,6BAAK,IAAL,EAAWD,IAAX;;AAFqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAzB;;AAAA;AAAA;AAAA;AAAA;;AAKAP,SAASY,GAAT,CAAa,IAAIT,cAAJ;AAAA,2EAAmB,kBAAOU,KAAP,EAAcL,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEEH,YAAYM,OAAZ,CAAoB,EAACE,YAAD,EAApB,EAA6BC,QAA7B,CAAsC,MAAtC,CAFF;;AAAA;AAElBC,mCAFkB;;AAGxBA,sCAAcP,KAAK,IAAL,EAAWO,YAAYR,IAAvB,CAAd,GAA6CC,KAAK,IAAL,EAAW,KAAX,EAAkB,EAACQ,MAAM,OAAP,EAAgBC,SAAS,OAAzB,EAAlB,CAA7C;AAHwB;AAAA;;AAAA;AAAA;AAAA;;AAKxBT;;AALwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAnB;;AAAA;AAAA;AAAA;AAAA,IAAb;;AASA;;;;AAIAR,SAASY,GAAT,CAAa,IAAIV,aAAJ;AAAA,2EAAkB,kBAAOO,QAAP,EAAiBS,QAAjB,EAA2BV,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEJJ,UAAUO,OAAV,CAAkB,EAACF,kBAAD,EAAlB,CAFI;;AAAA;AAEjBF,4BAFiB;;AAGvB,4BAAIA,QAAQA,KAAKY,aAAL,CAAmBD,QAAnB,CAAZ,EAA0C;AACtCV,iCAAK,IAAL,EAAWD,IAAX;AACH,yBAFD,MAEO;AACHC,iCAAK,IAAL,EAAW,KAAX;AACH;AAPsB;AAAA;;AAAA;AAAA;AAAA;;AASvBA;;AATuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;;AAAA;AAAA;AAAA;AAAA,IAAb;;AAaAY,QAAQC,qBAAR,GAAgC,YAAY;AACxC,WAAOrB,SAASsB,YAAT,CAAsB,QAAtB,EAAgC,EAACC,SAAS,KAAV,EAAhC,CAAP;AACH,CAFD;;AAIAH,QAAQI,oBAAR,GAA+B,YAAY;AACvC,WAAOxB,SAASsB,YAAT,CAAsB,OAAtB,EAA+B,EAACC,SAAS,KAAV,EAA/B,CAAP;AACH,CAFD;;AAIAH,QAAQpB,QAAR,GAAmBA,QAAnB","file":"auth.js","sourcesContent":["const passport =  require('koa-passport')\r\nconst LocalStrategy =  require('passport-local')\r\nconst BearerStrategy =  require('passport-http-bearer')\r\nconst UserModel = require('../models/user.model')\r\nconst AccessToken =  require('../models/accessToken')\r\n// serialize user objects into the session\r\npassport.serializeUser((user, done) => done(null, user.username))\r\npassport.deserializeUser(async (username, done) => {\r\n    const user = await UserModel.findOne({username})\r\n    done(null, user)\r\n})\r\n\r\npassport.use(new BearerStrategy(async (token, done) => {\r\n    try {\r\n        const accessToken = await AccessToken.findOne({token}).populate('user')\r\n        accessToken ? done(null, accessToken.user) : done(null, false, {type: 'error', message: '授权失败！'})\r\n    } catch (err) {\r\n        done(err)\r\n    }\r\n}))\r\n\r\n/**\r\n * 默认从 req.body 或者 req.query 中取出 username, password 字段\r\n * https://github.com/jaredhanson/passport-local/blob/master/lib/strategy.js#L49\r\n */\r\npassport.use(new LocalStrategy(async (username, password, done) => {\r\n    try {\r\n        const user = await UserModel.findOne({username})\r\n        if (user && user.validPassword(password)) {\r\n            done(null, user)\r\n        } else {\r\n            done(null, false)\r\n        }\r\n    } catch (err) {\r\n        done(err)\r\n    }\r\n}))\r\n\r\nexports.isBearerAuthenticated = function () {\r\n    return passport.authenticate('bearer', {session: false})\r\n}\r\n\r\nexports.isLocalAuthenticated = function () {\r\n    return passport.authenticate('local', {session: false})\r\n}\r\n\r\nexports.passport = passport"]}