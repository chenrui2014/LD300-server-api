{"version":3,"sources":["../../../src/ipcs/dahua/_dh_h264_unpack.js"],"names":["Transform","require","assert","naluPrefix","Buffer","from","DHAV","dhav","emptyBuffer","alloc","DHH264UnPick","skipPrefix","objectMode","_c","_skip0001","buf","enc","next","slice","indexOf","findPrefixAndSize","index","size","length","ok","push","t","d","concat","ndhav","lastIndexOf","index2","size2","b","buff","start","exports","module"],"mappings":"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","file":"_dh_h264_unpack.js","sourcesContent":["/**\r\n * Created by Luky on 2017/7/2.\r\n */\r\nconst Transform=require('stream').Transform;\r\nconst assert=require('assert');\r\nconst naluPrefix=Buffer.from([0,0,1]);\r\nconst DHAV=Buffer.from([0x44,0x48,0x41,0x56]);\r\nconst dhav=Buffer.from([0x64,0x68,0x61,0x76]);\r\nconst emptyBuffer=Buffer.alloc(0);\r\n\r\nclass DHH264UnPick extends Transform{\r\n\r\n    constructor(skipPrefix=true){\r\n        super({ objectMode: true });\r\n        this._c=emptyBuffer;\r\n        this._skip0001=skipPrefix;\r\n    }\r\n    static findPrefixAndSize(buff,start=0){\r\n        let index=buff.indexOf(naluPrefix,start);\r\n        if(index>0&&buff[index-1]===0){\r\n            return [index-1,4];\r\n        }\r\n        return [index,(index!==-1?3:0)];\r\n    }\r\n\r\n    _transform(buf,enc,next){\r\n        /*next(null,buf.toString('hex')+'\\r\\n');\r\n        return;*/\r\n        if(buf.slice(0,4).indexOf(DHAV)===0){\r\n            buf=buf.slice(40);//DHAV和不知道是什么数据结构的数据\r\n        }\r\n        let [index,size]=DHH264UnPick.findPrefixAndSize(buf);\r\n        if(-1===index){\r\n            //assert.ok(buf[4]!==0xfc);\r\n            //console.log(buf.toString('utf8'));\r\n            next();return;\r\n        }\r\n        if(this._c.length){\r\n            assert.ok(buf.slice(0,4).indexOf(DHAV)===-1);\r\n            this.push({t:'v',d:Buffer.concat([this._c,buf.slice(0,index)],this._c.length+index)});\r\n        }\r\n        this._c=buf.slice(index);\r\n        index=0;\r\n        let ndhav=-1;\r\n        if((ndhav=this._c.lastIndexOf(dhav))!==-1){\r\n            assert.ok(ndhav+8===this._c.length);\r\n            this._c=this._c.slice(0,ndhav);\r\n        }\r\n\r\n        do{\r\n            let [index2,size2]=DHH264UnPick.findPrefixAndSize(this._c,index+size+1);\r\n            if(index2===-1) {\r\n                if(ndhav===-1){\r\n                    this._c=this._c.slice(index+(this._skip0001?size:0));\r\n                    next();\r\n                    return;\r\n                }\r\n                else{\r\n                    let b=this._c.slice(index+(this._skip0001?size:0));\r\n                    this._c=emptyBuffer;\r\n                    next(null,{t:'v',d:b});\r\n                    return;\r\n                }\r\n            }\r\n            let b=this._c.slice(index+(this._skip0001?size:0),index2);\r\n            this.push({t:'v',d:b});\r\n            index=index2;size=size2;\r\n        }while(true);\r\n    }\r\n}\r\n\r\nexports=module.exports=DHH264UnPick;"]}