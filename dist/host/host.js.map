{"version":3,"sources":["../../src/host/host.js"],"names":["_","require","SerialPort","EventEmitter","config","global","server_config","Parser","portOptions","extend","baudRate","stopBits","dataBits","parity","byteLength","get","_Events","Open","Close","Error","Online","Offline","StateChanged","_HostErrors","InitError","ConnectError","PortError","RdySignalsSendError","_hostState","Normal","SysReady","Alarm","Unknown","_Errors","Errors","reset","Buffer","systemReady","SysRdySender","spans","cb","_span","_callback","_index","_handle","length","emit","setTimeout","send","clearTimeout","Host","id","port","options","autoConnect","_id","_port","__state","_SysRdySender","sendSysRdy","bind","on","setState","log","initOptions","_serialport","_options","Events","_onPortOpen","_onPortClose","_onPortError","Data","_onData","_onPortOnline","_onPortOffline","hid","connect","timeOut","tryRecover","recoverSpan","deDuplication","data","cmd","decode","type","interrupt","state","params","stateOld","_log","stateNew","isConnected","write","then","catch","e","error","_error","Promise","resolve","reject","warn","err","writeError","innerError","disConnect","innerEvent","desc","sid","event","prototype","call","errorType","buf","flag","c1","c2","i","dis","position","inc","index","date","Date","getFullYear","slice","padStart","getMonth","getDate","getHours","getMinutes","getSeconds","exports","module"],"mappings":"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","file":"host.js","sourcesContent":["/**\r\n * Created by Luky on 2017/6/27.\r\n */\r\n\r\nconst _ = require('lodash');\r\nconst SerialPort = require('../serialport/serialport');\r\nconst EventEmitter = require('events').EventEmitter;\r\nconst config=global.server_config||require('../config/config');\r\nconst {Parser} =require('../log/log');\r\n\r\nconst portOptions = _.extend({\r\n    baudRate: 115200,\r\n    stopBits: 2,\r\n    dataBits: 8,\r\n    parity:'none',\r\n    byteLength:16\r\n},_.get(config,'host.port'));\r\n\r\nconst _Events={\r\n    Open:'open',\r\n    Close:'close',\r\n    Error:'error',\r\n    Online:'online',\r\n    Offline:'offline',\r\n    StateChanged:'stateChanged'\r\n};\r\n\r\nconst _HostErrors={\r\n    InitError: 'initError',\r\n    ConnectError:'connectError',\r\n    PortError:'portError',\r\n    RdySignalsSendError:'rdySignalsSendError'\r\n};\r\n\r\nconst _hostState={\r\n    Normal:'normal',\r\n    SysReady:'sysRdy',\r\n    Alarm:'alarm',\r\n    Error:'error',\r\n    Unknown:'unknown'//代表主机离线等无信号状态\r\n};\r\n\r\nconst _Errors=_.extend({},SerialPort.Errors,_HostErrors);\r\n\r\nconst reset=new Buffer([0xAA]);\r\nconst systemReady=new Buffer([0x00]);\r\n\r\nclass SysRdySender extends EventEmitter{\r\n    constructor(spans,cb){\r\n        super();\r\n        this._span=spans||[];\r\n        this._callback=cb||function(){};\r\n        this._index=-1;\r\n        this._handle=0;\r\n    }\r\n    send(){\r\n        this._index++;\r\n        if(this._index>=this._span.length){\r\n            this.emit('finish');\r\n            this._index=-1;\r\n            return;\r\n        }\r\n        this._handle=setTimeout(()=>{\r\n            this._callback();\r\n            this.send();\r\n        },this._span[this._index]);\r\n    }\r\n\r\n    interrupt(){\r\n        clearTimeout(this._handle);\r\n        this._index=-1;\r\n        this.emit('interrupted');\r\n    }\r\n}\r\n\r\nclass Host extends EventEmitter{\r\n    constructor(id,port,options,autoConnect=false){\r\n        super();\r\n        this._id=id;\r\n        this._port=port;\r\n        this.__state=_hostState.Unknown;\r\n        this._SysRdySender=new SysRdySender(_.get(config,'host.systemReadySignalSendSpan',[5000]),this.sendSysRdy.bind(this));\r\n        this._SysRdySender.on('finish',()=>{\r\n            this.setState(_hostState.SysReady,this.log('主机已工作在sysrdy状态'));\r\n        });\r\n        this.initOptions(options);\r\n        this._serialport=new SerialPort(port,this._options);\r\n        this._serialport.on(SerialPort.Events.Open,this._onPortOpen.bind(this));\r\n        this._serialport.on(SerialPort.Events.Close,this._onPortClose.bind(this));\r\n        this._serialport.on(SerialPort.Events.Error,this._onPortError.bind(this));\r\n        this._serialport.on(SerialPort.Events.Data,this._onData.bind(this));\r\n        this._serialport.on(SerialPort.Events.Online,this._onPortOnline.bind(this));\r\n        this._serialport.on(SerialPort.Events.Offline,this._onPortOffline.bind(this));\r\n        Parser(this,'host.js',{hid:id,port:port});\r\n        if(autoConnect) this.connect();\r\n    }\r\n\r\n    initOptions(options){\r\n        this._options={\r\n            timeOut:3000,\r\n            tryRecover:-1,\r\n            recoverSpan:5000\r\n        };\r\n        _.extend(this._options,portOptions,options,{deDuplication:true,port:this._port});\r\n    }\r\n\r\n    _onData(data){\r\n        let cmd = decode(data, this._id);\r\n        switch(cmd.type){\r\n            case _hostState.Error:\r\n                this.setState(_hostState.Error,cmd);\r\n                this._SysRdySender.interrupt();\r\n                break;\r\n            case _hostState.Normal:\r\n                //第一次不用发送(unknown),其他两个状态来需要 补rdy状态\r\n                if(this.state===_hostState.Alarm||this.state===_hostState.Error){\r\n                    this._SysRdySender.send();\r\n                    this.setState(_hostState.Normal,cmd);\r\n                    return;\r\n                }\r\n                this.setState(this.state===_hostState.SysReady?_hostState.SysReady:_hostState.Normal,cmd);\r\n                break;\r\n            case _hostState.Alarm:\r\n                this.setState(_hostState.Alarm,cmd);\r\n                this._SysRdySender.interrupt();\r\n                break;\r\n        }\r\n    }\r\n\r\n    static get Events(){\r\n        return _Events;\r\n    }\r\n\r\n    static get Errors() {\r\n        return _Errors;\r\n    }\r\n\r\n    static get States(){\r\n        return _hostState;\r\n    }\r\n\r\n    setState(state,params){\r\n        if(state===this.__state) return;\r\n        let stateOld=this.__state;\r\n        this.__state=state;\r\n        this.emit(_Events.StateChanged,this._log('主机状态改变',_.extend(params,{stateNew:state,stateOld:stateOld,type:_Events.StateChanged})));\r\n    }\r\n\r\n    get state(){\r\n        return this.__state;\r\n    }\r\n\r\n    get id(){\r\n        return this._id;\r\n    }\r\n\r\n    get isConnected() {\r\n        return this._serialport.isConnected;\r\n    }\r\n\r\n    sendSysRdy(){\r\n        if(!this.isConnected) return false;\r\n        this._serialport.write(systemReady).then(()=>{\r\n            this._log('向主机发送sysrdy信息成功');\r\n        }).catch((e)=>{\r\n            let error=this._error(_Errors.RdySignalsSendError,'sysrdy信号发送失败',e);\r\n            this.emit(_Events.Error,error);\r\n        });\r\n        return true;\r\n    }\r\n\r\n    clearAlarm(){\r\n        return new Promise((resolve,reject)=>{\r\n            if(this.state!==_hostState.Alarm) return resolve(this.warn('客户端发来无效清除指令，已忽略'));\r\n            this._serialport.write(reset).then(()=>{\r\n                //this._bSendSysRdy=true;\r\n                resolve(this._log('清除指令已发出'));\r\n            }).catch((err)=>{\r\n                reject(this._error(_Errors.writeError,'清除报警指令发送失败',{innerError:err}));\r\n            });\r\n        });\r\n    }\r\n\r\n    connect(){\r\n        return this.disConnect().then(()=>{\r\n            this._serialport.connect().catch(e=>e);\r\n            return Promise.resolve();\r\n        });\r\n    }\r\n\r\n    _onPortError(data){\r\n        this.emit(_Events.Error,this._error(_HostErrors.PortError,'端口异常',data));\r\n    }\r\n\r\n    _onPortOpen(data){\r\n        this.sendSysRdy();\r\n        this.emit(_Events.Open,this._log('主机已连接',{innerEvent:data}));\r\n    }\r\n\r\n    _onPortClose(data){\r\n        let log=this._log('主机连接关闭',{innerEvent:data});\r\n        this.setState(_hostState.Unknown,log);\r\n        this.emit(_Events.Close,log);\r\n    }\r\n\r\n    _onPortOnline(data){\r\n        let log=this._log('主机重新连接上线',{innerEvent:data});\r\n        this.emit(_Events.Online,log);\r\n    }\r\n\r\n    _onPortOffline(data){\r\n        let log=this._log('主机断开，即将再次尝试重连',{innerEvent:data});\r\n        this.setState(_hostState.Unknown,log);\r\n        this.emit(_Events.Offline,log);\r\n    }\r\n\r\n    _log(desc,params){\r\n        let id=(params&&'id' in params)?params['id']:sid(this._id);\r\n        return this.log(desc,_.extend(params,{\r\n            id:id\r\n        }));\r\n    }\r\n\r\n    emit(event,params){\r\n        _.extend(params,{type:event});\r\n        return EventEmitter.prototype.emit.call(this,event,params);\r\n    }\r\n\r\n    _error(type,desc,innerError,params){\r\n        return this.error(desc,_.extend({\r\n            type: _Events.Error,\r\n            errorType: type,\r\n            innerError: innerError,\r\n            id: sid(this._id)\r\n        },params));\r\n    }\r\n\r\n    disConnect(){\r\n        return this._serialport.disConnect();\r\n    }\r\n}\r\n\r\nfunction decode(buf) {\r\n    // important:\r\n    // assume data length is 16\r\n    // double  hex: 33 (dec: 51)  (16bit--hex: 33 33) is sync information from Security Terminal\r\n    // After this sync information, the next 16 bit is the status information from Security Terminal\r\n    // Program below is : detect sycn bit (Double hex 33) then read & record the status information from serial port of security terminal\r\n    // because the data format in the serial port can be 33 33 ** ** or 33 33 33 ** or 33 * 33 33 33 *,\r\n    // We need to detect 2 consecutive 33, not only one 33, and then record the real status information from security terminal\r\n    let flag = 0,c1=0,c2=0;\r\n    for (let i = 0; i < 15; i++)\r\n    {\r\n        if (flag === 0 && buf[i] !== 0x33)\r\n        {\r\n            flag = 1;\r\n            continue;\r\n        }\r\n        if (flag === 1 && buf[i] === 0x33)\r\n        {\r\n            flag = 2;\r\n            continue;\r\n        }\r\n        if (flag === 2 && buf[i] === 0x33)\r\n        {\r\n            flag = 3;\r\n            continue;\r\n        }\r\n        if (flag === 3)\r\n        {\r\n            c1= buf[i];\r\n            c2= buf[i + 1];\r\n            break;\r\n        }\r\n    }\r\n\r\n    if(c1===0&&c2===0){\r\n        // fib optic connection error -> fatal error\r\n        return {\r\n            type:_hostState.Error,\r\n            errorType:_Errors.ConnectError,\r\n            desc:'收到主机无效指令'\r\n        };\r\n    }\r\n    //0x33 0x33 0x55 0x15 0x00 0x00 0x00 0x00\r\n    if (c1 === 0x55 && c2 === 0x15)\r\n    {\r\n        // system ready\r\n        return {\r\n            type:_hostState.Normal\r\n        };\r\n    }\r\n    //0x33 0x33 0x01 0xC1 0x00 0x00 0x00 0x00\r\n    //771米\r\n    if ((c2 & 0xC0)===0xC0) {\r\n        let  dis= ((c2 & 0xF) << 8) + c1;\r\n        dis *= 3;\r\n        return {\r\n            type:_hostState.Alarm,\r\n            position:dis\r\n        };\r\n    }\r\n    //0x33 0x33 0x00 0x40 0x00 0x00 0x00 0x00\r\n    //01000000\r\n    if ((c2 & 0xC0)===0x40){\r\n        // let dis=((c2 & 0xF) << 8) + c1;\r\n        // dis = dis * 3 - 25; // meter\r\n        // if (dis <= 50) dis = 50;\r\n        return {\r\n            type:_hostState.Error,\r\n            errorType:_Errors.InitError,\r\n            desc:'收到主机初始化异常指令'\r\n        };\r\n    }\r\n}\r\n\r\nlet inc=0;\r\nfunction sid(index) {\r\n    let date = new Date();\r\n    if(inc===10000) inc=0;\r\n    return ('' + date.getFullYear()).slice(2)\r\n        + _.padStart('' + (date.getMonth()+1), 2,'0')\r\n        + _.padStart('' + date.getDate(), 2,'0')\r\n        + _.padStart('' + date.getHours(), 2,'0')\r\n        + _.padStart('' + date.getMinutes(), 2,'0')\r\n        + _.padStart('' + date.getSeconds(), 2,'0')\r\n        + _.padStart('' + index, 2,'0')\r\n        +_.padStart(''+(inc++),4,0);\r\n}\r\n\r\nexports=module.exports=Host;"]}