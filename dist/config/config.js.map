{"version":3,"sources":["../../src/config/config.js"],"names":["path","require","config","runMode","type","project","interfaces","store","web","port","state_server","host","baudRate","stopBits","dataBits","parity","byteLength","systemReadySignalSendSpan","ipc_server","listen","serialPort","tryRecover","recoverSpan","timeOut","deDuplication","persistence","pathTempl","imageTempl","videoTempl","captureSpan","root","resolve","__dirname","begin","Date","getTime","runtimeLength","getAbsolutePath","name","getConfig","getLogDir","getDataDir","getLibDir","getData","getVideoPath","ipc","runWay","pre_cache_type","pre_cache_option","ptzLock","reConnectSpan","exports","module"],"mappings":";;AAAA,IAAMA,OAAKC,QAAQ,MAAR,CAAX;;AAEA,IAAIC,SAAO;AACPC,aAAQ;AACJ;AACA;AACAC,cAAK,IAHD;AAIJC,iBAAQ,oBAJJ;AAKJC,oBAAW,uBALP;AAMJC,eAAM,IANF,CAMM;AANN,KADD;AASPC,SAAI;AACAC,cAAK;AADL,KATG;AAYPC,kBAAa,EAAC;AACVN,cAAK,QADI,EACK;AACdK,cAAK,IAFI,EAEC;AACVT,cAAK,cAHI,CAGU;AAHV,KAZN;AAiBPW,UAAK,EAAC;AACFF,cAAK;AACDG,sBAAU,MADT;AAEDC,sBAAU,CAFT;AAGDC,sBAAU,CAHT;AAIDC,oBAAO,MAJN;AAKDC,wBAAW;AALV,SADJ;AAQDC,mCAA2B,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB;AAR1B,KAjBE;AA2BPC,gBAAW,EAAC;AACRd,cAAK,QADE,EACO;AACde,gBAAO,KAFA,EAEM;AACbV,cAAK,IAHE,CAGE;AAHF,KA3BJ;AAgCPW,gBAAW,EAAC;AACR;AACAC,oBAAW,CAAC,CAFL;AAGP;AACAC,qBAAY,IAJL;AAKP;AACAC,iBAAQ,IAND;AAOP;AACAC,uBAAc;AARP,KAhCJ;AA0CPC,iBAAY,EAAC;AACTC,mBAAU,+BADF;AAERC,oBAAW,mCAFH;AAGRC,oBAAW,4BAHH;AAIRC,qBAAY;AAJJ,KA1CL;AAgDPC,UAAK9B,KAAK+B,OAAL,CAAaC,SAAb,EAAuB,KAAvB,CAhDE;AAiDPC,WAAM,IAAIC,IAAJ,GAAWC,OAAX,EAjDC;AAkDPC,mBAAc,yBAAY;AACtB,eAAO,IAAIF,IAAJ,GAAWC,OAAX,KAAqBjC,OAAO+B,KAAnC;AACH,KApDM;AAqDPI,mBArDO,2BAqDSC,IArDT,EAqDc;AACjB;AACA,eAAOtC,KAAK+B,OAAL,CAAa7B,OAAO4B,IAApB,EAAyBQ,IAAzB,CAAP;AACH,KAxDM;AAyDPC,aAzDO,qBAyDGD,IAzDH,EAyDQ;AACX,eAAOrC,QAAQ,OAAKqC,IAAb,CAAP;AACH,KA3DM;AA4DPE,aA5DO,uBA4DI;AACT,eAAOtC,OAAOmC,eAAP,CAAuB,SAAvB,CAAP;AACD,KA9DM;AA+DPI,cA/DO,sBA+DIH,IA/DJ,EA+DS;AACd,eAAOpC,OAAOmC,eAAP,CAAuB,UAAQC,IAA/B,CAAP;AACD,KAjEM;AAkEPI,aAlEO,uBAkEI;AACT,eAAOxC,OAAOmC,eAAP,CAAuB,MAAvB,CAAP;AACD,KApEM;AAqEPM,WArEO,mBAqECL,IArED,EAqEM;AACT,eAAOrC,QAAQ,aAAWqC,IAAnB,CAAP;AACH,KAvEM;AAwEPM,gBAxEO,0BAwEO;AACZ,eAAO1C,OAAOmC,eAAP,CAAuB,oBAAvB,CAAP;AACD,KA1EM;;AA2EPQ,SAAI,EAAC;AACD;;;;;;;;;AASAC,gBAAO,CAVP;AAWA;AACA;AACA;AACA;AACAC,wBAAe,KAff;AAgBA;AACA;AACA;AACAC,0BAAiB,CAnBjB;AAoBA;AACAC,iBAAQ,KArBR;AAsBAC,uBAAc;AAElB;;;;;;;;;;;AAxBI,KA3EG,EAAX;;AAgHAC,UAAQC,OAAOD,OAAP,GAAejD,MAAvB","file":"config.js","sourcesContent":["const path=require('path');\r\n\r\nlet config={\r\n    runMode:{\r\n        //S 仅服务端，通过socket提供接口\r\n        //BS 服务端浏览器端模式\r\n        type:'BS',\r\n        project:'RongFei-YiLiPrison',\r\n        interfaces:'RongFei/i_rong_fei.js',\r\n        store:'db'//file数据由文件方式存储，db由数据库方式存储\r\n    },\r\n    web:{\r\n        port:9000\r\n    },\r\n    state_server:{//状态广播服务配置\r\n        type:'socket',//暂时不解析，socket用于作为代理模式，其他厂商提供客户端，http-socket则使用集成平台\r\n        port:3001,//本地开放接口\r\n        path:'/stateServer'//http-socket时有效\r\n    },\r\n    host:{//主机配置\r\n        port:{\r\n            baudRate: 115200,\r\n            stopBits: 2,\r\n            dataBits: 8,\r\n            parity:\"none\",\r\n            byteLength:16\r\n        },\r\n        systemReadySignalSendSpan: [9000,2000,2000,2000]\r\n    },\r\n    ipc_server:{//ip摄像头配置\r\n        type:'client',//client为客户端直连摄像头模式，server或其他为服务端模式\r\n        listen:false,//是否监听摄像头状态，监听则可知道摄像头是否工作正常\r\n        port:3000//type为client有效\r\n    },\r\n    serialPort:{//串口配置\r\n        //0关闭，-1无限次恢复，>0恢复次数\r\n        tryRecover:-1,\r\n        //应根据主机重启或异常重置的时间来设置下面参数\r\n        recoverSpan:5000,\r\n        //设置失联的判断时间\r\n        timeOut:3000,\r\n        //过滤掉重复的数据\r\n        deDuplication:false\r\n    },\r\n    persistence:{//存档配置\r\n        pathTempl:'../assets/monitors/{yyyy}{mm}',\r\n        imageTempl:'{dd}-{hh}{mi}{ss}-{iter}-{prefix}',\r\n        videoTempl:'{dd}-{hh}{mi}{ss}-{prefix}',\r\n        captureSpan:3\r\n    },\r\n    root:path.resolve(__dirname,'../'),\r\n    begin:new Date().getTime(),\r\n    runtimeLength:function () {\r\n        return new Date().getTime()-config.begin;\r\n    },\r\n    getAbsolutePath(name){\r\n        //console.log(name + \" path:\" +path.resolve(config.root,name));\r\n        return path.resolve(config.root,name);\r\n    },\r\n    getConfig(name){\r\n        return require('./'+name);\r\n    },\r\n    getLogDir(){\r\n      return config.getAbsolutePath('../logs');\r\n    },\r\n    getDataDir(name){\r\n      return config.getAbsolutePath('data/'+name);\r\n    },\r\n    getLibDir(){\r\n      return config.getAbsolutePath('clib');\r\n    },\r\n    getData(name){\r\n        return require('../data/'+name);\r\n    },\r\n    getVideoPath(){\r\n      return config.getAbsolutePath('../assets/monitors');\r\n    },\r\n    ipc:{//摄像头工作配置\r\n        /*\r\n        1:预缓存时间，0表示不启动预缓存,则需要画面时才去连接摄像头第一种需要实现的方法\r\n        2:只打开摄像头，不缓存数据，这种模式考虑onvif标准使用yellowstone实现数据的拉取，否则需要建立很多的ffmpeg子线程\r\n        3:预缓存数据，数据缓存指定的时间，可以保证事件发生的过程全部被录制下来\r\n        方式1:的延时可能有2到3秒\r\n        方式2:如果使用线程池可以保证主机信号到及取回录像\r\n        方式3:可以实现全过程录制\r\n        第一期只实现第一种,其他方式模式后续合同更新\r\n        */\r\n        runWay:0,\r\n        //idr按照I帧缓存，遇到下一个I帧时抛弃上一个缓存，frame[time/count]方式下是分析帧类型缓存\r\n        //对于固定顺序输出I帧的使用idr以提高性能，否则通过frame方式\r\n        //farme-time方式下通过time上限方式抛弃帧\r\n        //frame-count通过帧数抛弃抛弃\r\n        pre_cache_type:'idr',\r\n        //idr模式下idr帧的个数，最多3帧，最少1帧,pre_cache_option为具体配置\r\n        //farme-time下为时间,最多3s,最少500ms,单位为ms,pre_cache_option为具体配置\r\n        //frame-count,帧数，最多75帧，最少10帧,pre_cache_option为具体配置\r\n        pre_cache_option:1,\r\n        //ptz自动释放时间，默认为15秒\r\n        ptzLock:15000,\r\n        reConnectSpan:2000\r\n    }\r\n    /*    video:{\r\n            codec:'mpeg1video',\r\n            codea:'mp2',\r\n            f:'mpegts'\r\n        },\r\n        video:{\r\n            codec:'copy'//'libx264'//输出视频格式\r\n            ,codea:'acc'//输出音频格式\r\n            ,f:'flv'//封装格式\r\n            //,s:'600*400'//输出尺寸\r\n        },*/\r\n};\r\n\r\nexports=module.exports=config;"]}