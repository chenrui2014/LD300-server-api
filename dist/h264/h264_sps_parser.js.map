{"version":3,"sources":["../../src/h264/h264_sps_parser.js"],"names":["Util","require","ExpGolomb","SPSParser","nalu","rbsp","ebsp2rbsp","gb","skipBits","profile_idc","readUByte","profile_compatibility","readBits","level_idc","seq_parameter_set_id","readUEG","profile_string","getProfileString","level_string","getLevelString","chroma_format_idc","chroma_format","chroma_format_table","bit_depth","skipUEG","readBoolean","scaling_list_count","i","_skipScalingList","log2_max_frame_num","poc","poc_type","type","log2_max_poc_lsb","max_poc_lsb","delta_pic_order_always_zero_flag","offset_for_non_ref_pic","readSEG","offset_for_top_to_bottom_field","num_ref_frames_in_poc_cycle","offset_for_ref_frame","expected_delta_per_poc_cycle","max_num_ref_frames","pic_width_in_mbs_minus1","pic_height_in_map_units_minus1","frame_mbs_only_flag","mb_adaptive_frame_field_flag","frame_crop_left_offset","frame_crop_right_offset","frame_crop_top_offset","frame_crop_bottom_offset","frame_cropping_flag","sar_width","sar_height","fps","fps_fixed","fps_num","fps_den","vui_parameters_present_flag","aspect_ratio_idc","sar_w_table","sar_h_table","skipBit","num_units_in_tick","time_scale","sarScale","crop_unit_x","crop_unit_y","sub_wc","sub_hc","codec_width","codec_height","present_width","Math","ceil","destroy","sps_id","chroma_format_string","getChromaFormatString","frame_rate","fixed","sar_ratio","width","height","codec_size","present_size","count","last_scale","next_scale","delta_scale","toFixed","chroma","exports","module"],"mappings":"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","file":"h264_sps_parser.js","sourcesContent":["/**\r\n * Created by Luky on 2017/8/2.\r\n */\r\n\r\n\r\nconst Util=require('./h264_util');\r\nconst ExpGolomb=require('./golomb');\r\n\r\nclass SPSParser {\r\n\r\n    static parseSPS(nalu) {\r\n        let rbsp = Util.ebsp2rbsp(nalu);\r\n        let gb = new ExpGolomb(rbsp);\r\n\r\n        gb.skipBits(8);\r\n        let profile_idc = gb.readUByte();  // profile_idc\r\n        let profile_compatibility=gb.readBits(8);// constraint_set_flags[5] + reserved_zero[3]\r\n        let level_idc = gb.readUByte();  // level_idc\r\n        let seq_parameter_set_id=gb.readUEG();// seq_parameter_set_id\r\n\r\n        let profile_string = SPSParser.getProfileString(profile_idc);\r\n        let level_string = SPSParser.getLevelString(level_idc);\r\n        let chroma_format_idc = 1;\r\n        let chroma_format = 420;\r\n        let chroma_format_table = [0, 420, 422, 444];\r\n        let bit_depth = 8;\r\n        /*\r\n        100 ||  // High profile\r\n        110 ||  // High10 profile\r\n        122 ||  // High422 profile\r\n        244 ||  // High444 Predictive profile\r\n         44 ||  // Cavlc444 profile\r\n         83 ||  // Scalable Constrained High profile (SVC)\r\n         86 ||  // Scalable High Intra profile (SVC)\r\n        118 ||  // Stereo High profile (MVC)\r\n        128 ||  // Multiview High profile (MVC)\r\n        138 ||  // Multiview Depth High profile (MVCD)\r\n        144  // old High444 profile*/\r\n        if (profile_idc === 44 || profile_idc === 83 || profile_idc === 86\r\n            || profile_idc === 100 || profile_idc === 110 || profile_idc === 118\r\n            || profile_idc === 122 || profile_idc === 128 ||profile_idc === 138\r\n            || profile_idc === 144 ||profile_idc === 244\r\n            ) {\r\n\r\n            chroma_format_idc = gb.readUEG();\r\n            if (chroma_format_idc === 3) {\r\n                gb.readBits(1);  // separate_colour_plane_flag\r\n            }\r\n            if (chroma_format_idc <= 3) {\r\n                chroma_format = chroma_format_table[chroma_format_idc];\r\n            }\r\n\r\n            bit_depth = gb.readUEG() + 8;  // bit_depth_luma_minus8\r\n            gb.skipUEG();  // bit_depth_chroma_minus8\r\n            gb.skipBits(1);  // qpprime_y_zero_transform_bypass_flag\r\n            if (gb.readBoolean()) {  // seq_scaling_matrix_present_flag\r\n                let scaling_list_count = (chroma_format_idc !== 3) ? 8 : 12;\r\n                for (let i = 0; i < scaling_list_count; i++) {\r\n                    if (gb.readBoolean()) {  // seq_scaling_list_present_flag\r\n                        if (i < 6) {\r\n                            SPSParser._skipScalingList(gb, 16);\r\n                        } else {\r\n                            SPSParser._skipScalingList(gb, 64);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        let log2_max_frame_num=gb.readUEG()+4;\r\n        \r\n        let poc={};//poc\r\n        let poc_type = poc.type=gb.readUEG();\r\n        if (poc_type === 0) {\r\n            poc.log2_max_poc_lsb=gb.readUEG()+4;//log2_max_poc_lsb_minus4\r\n            poc.max_poc_lsb=1<<(poc.log2_max_poc_lsb);\r\n        }\r\n        else if (poc_type === 1) {\r\n            poc.delta_pic_order_always_zero_flag=gb.readBoolean();\r\n            poc.offset_for_non_ref_pic=gb.readSEG();\r\n            poc.offset_for_top_to_bottom_field=gb.readSEG();\r\n            poc.num_ref_frames_in_poc_cycle = gb.readUEG();\r\n            poc.offset_for_ref_frame=[];\r\n            poc.expected_delta_per_poc_cycle=0;\r\n            for (let i = 0; i < poc.num_ref_frames_in_poc_cycle; i++) {\r\n                poc.expected_delta_per_poc_cycle+=(poc.offset_for_ref_frame[i]=gb.readSEG());\r\n            }\r\n        }\r\n\r\n        let max_num_ref_frames=gb.readUEG();//max_num_ref_frames\r\n        gb.skipBits(1);//gaps_in_frame_num_value_allowed_flag\r\n\r\n        let pic_width_in_mbs_minus1 = gb.readUEG();\r\n        let pic_height_in_map_units_minus1 = gb.readUEG();\r\n\r\n        let frame_mbs_only_flag = gb.readBits(1);\r\n        let mb_adaptive_frame_field_flag=false;\r\n        if (frame_mbs_only_flag === 0) {\r\n            mb_adaptive_frame_field_flag=gb.readBoolean();  // mb_adaptive_frame_field_flag\r\n        }\r\n        gb.skipBits(1);  // direct_8x8_inference_flag\r\n\r\n        let frame_crop_left_offset = 0;\r\n        let frame_crop_right_offset = 0;\r\n        let frame_crop_top_offset = 0;\r\n        let frame_crop_bottom_offset = 0;\r\n\r\n        let frame_cropping_flag = gb.readBoolean();//剪切图像\r\n        if (frame_cropping_flag) {\r\n            frame_crop_left_offset = gb.readUEG();\r\n            frame_crop_right_offset = gb.readUEG();\r\n            frame_crop_top_offset = gb.readUEG();\r\n            frame_crop_bottom_offset = gb.readUEG();\r\n        }\r\n\r\n        let sar_width = 1, sar_height = 1;\r\n        let fps = 0, fps_fixed = true, fps_num = 0, fps_den = 0;\r\n\r\n        let vui_parameters_present_flag = gb.readBoolean();\r\n        if (vui_parameters_present_flag) {\r\n            if (gb.readBoolean()) {  // aspect_ratio_info_present_flag\r\n                let aspect_ratio_idc = gb.readBits(8);\r\n                let sar_w_table = [1, 12, 10, 16, 40, 24, 20, 32, 80, 18, 15, 64, 160, 4, 3, 2];\r\n                let sar_h_table = [1, 11, 11, 11, 33, 11, 11, 11, 33, 11, 11, 33,  99, 3, 2, 1];\r\n\r\n                if (aspect_ratio_idc > 0 && aspect_ratio_idc < 16) {\r\n                    sar_width = sar_w_table[aspect_ratio_idc - 1];\r\n                    sar_height = sar_h_table[aspect_ratio_idc - 1];\r\n                } else if (aspect_ratio_idc === 255) {\r\n                    sar_width = gb.readBits(8) << 8 | gb.readBits(8);\r\n                    sar_height = gb.readBits(8) << 8 | gb.readBits(8);\r\n                }\r\n            }\r\n\r\n            if (gb.readBoolean()) {  // overscan_info_present_flag\r\n                gb.skipBit();  // overscan_appropriate_flag\r\n            }\r\n            if (gb.readBoolean()) {  // video_signal_type_present_flag\r\n                gb.skipBits(4);  // video_format & video_full_range_flag\r\n                if (gb.readBoolean()) {  // colour_description_present_flag\r\n                    gb.skipBits(24);  // colour_primaries & transfer_characteristics & matrix_coefficients\r\n                }\r\n            }\r\n            if (gb.readBoolean()) {  // chroma_loc_info_present_flag\r\n                gb.skipUEG();  // chroma_sample_loc_type_top_field\r\n                gb.skipUEG();  // chroma_sample_loc_type_bottom_field\r\n            }\r\n            if (gb.readBoolean()) {  // timing_info_present_flag\r\n                let num_units_in_tick = gb.readBits(32);\r\n                let time_scale = gb.readBits(32);\r\n                fps_fixed = gb.readBoolean();  // fixed_frame_rate_flag\r\n\r\n                fps_num = time_scale;\r\n                fps_den = num_units_in_tick * 2;\r\n                fps = fps_num / fps_den;\r\n            }\r\n        }\r\n\r\n        let sarScale = 1;\r\n        if (sar_width !== 1 || sar_height !== 1) {\r\n            sarScale = sar_width / sar_height;\r\n        }\r\n\r\n        let crop_unit_x = 0, crop_unit_y = 0;\r\n        if (chroma_format_idc === 0) {\r\n            crop_unit_x = 1;\r\n            crop_unit_y = 2 - frame_mbs_only_flag;\r\n        } else {\r\n            let sub_wc = (chroma_format_idc === 3) ? 1 : 2;\r\n            let sub_hc = (chroma_format_idc === 1) ? 2 : 1;\r\n            crop_unit_x = sub_wc;\r\n            crop_unit_y = sub_hc * (2 - frame_mbs_only_flag);\r\n        }\r\n\r\n        let codec_width = (pic_width_in_mbs_minus1 + 1) * 16;\r\n        let codec_height = (2 - frame_mbs_only_flag) * ((pic_height_in_map_units_minus1 + 1) * 16);\r\n\r\n        codec_width -= (frame_crop_left_offset + frame_crop_right_offset) * crop_unit_x;\r\n        codec_height -= (frame_crop_top_offset + frame_crop_bottom_offset) * crop_unit_y;\r\n\r\n        let present_width = Math.ceil(codec_width * sarScale);\r\n\r\n        gb.destroy();\r\n        gb = null;\r\n\r\n        return {\r\n            profile_idc:profile_idc,\r\n            profile_compatibility:profile_compatibility,\r\n            sps_id:seq_parameter_set_id,\r\n            profile_string: profile_string,  // baseline, high, high10, ...\r\n            level_idc:level_idc,\r\n            level_string: level_string,  // 3, 3.1, 4, 4.1, 5, 5.1, ...\r\n            bit_depth: bit_depth,  // 8bit, 10bit, ...\r\n            chroma_format_idc:chroma_format_idc,\r\n            chroma_format: chroma_format,  // 4:2:0, 4:2:2, ...\r\n            chroma_format_string: SPSParser.getChromaFormatString(chroma_format),\r\n            frame_mbs_only_flag:frame_mbs_only_flag,\r\n            mb_adaptive_frame_field_flag:mb_adaptive_frame_field_flag,\r\n            max_num_ref_frames:max_num_ref_frames,\r\n            log2_max_frame_num:log2_max_frame_num,\r\n            poc:poc,\r\n            frame_rate: {\r\n                fixed: fps_fixed,\r\n                fps: fps,\r\n                fps_den: fps_den,\r\n                fps_num: fps_num\r\n            },\r\n\r\n            sar_ratio: {\r\n                width: sar_width,\r\n                height: sar_height\r\n            },\r\n\r\n            codec_size: {\r\n                width: codec_width,\r\n                height: codec_height\r\n            },\r\n\r\n            present_size: {\r\n                width: present_width,\r\n                height: codec_height\r\n            }\r\n        };\r\n    }\r\n\r\n    static _skipScalingList(gb, count) {\r\n        let last_scale = 8, next_scale = 8;\r\n        let delta_scale = 0;\r\n        for (let i = 0; i < count; i++) {\r\n            if (next_scale !== 0) {\r\n                delta_scale = gb.readSEG();\r\n                next_scale = (last_scale + delta_scale + 256) % 256;\r\n            }\r\n            last_scale = (next_scale === 0) ? last_scale : next_scale;\r\n        }\r\n    }\r\n\r\n    static getProfileString(profile_idc) {\r\n        switch (profile_idc) {\r\n            case 66:\r\n                return 'Baseline';\r\n            case 77:\r\n                return 'Main';\r\n            case 88:\r\n                return 'Extended';\r\n            case 100:\r\n                return 'High';\r\n            case 110:\r\n                return 'High10';\r\n            case 122:\r\n                return 'High422';\r\n            case 244:\r\n                return 'High444';\r\n            default:\r\n                return 'Unknown';\r\n        }\r\n    }\r\n\r\n    static getLevelString(level_idc) {\r\n        return (level_idc / 10).toFixed(1);\r\n    }\r\n\r\n    static getChromaFormatString(chroma) {\r\n        switch (chroma) {\r\n            case 420:\r\n                return '4:2:0';\r\n            case 422:\r\n                return '4:2:2';\r\n            case 444:\r\n                return '4:4:4';\r\n            default:\r\n                return 'Unknown';\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexports=module.exports=SPSParser;"]}