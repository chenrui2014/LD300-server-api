{"version":3,"sources":["../../src/h264/h264_nalu_parser.js"],"names":["NALU","data","forbidden_bit","nal_reference_idc","nal_unit_type","key_frame","TYPES","IDR","nal_unit_type_string","getTypeString","ut","exports","module"],"mappings":";;;;;;AAAA;;;;IAIMA,I;AAEF,kBAAYC,IAAZ,EAAkB;AAAA;;AACd,aAAKC,aAAL,GAAqB,CAAC,EAAED,KAAK,CAAL,IAAU,IAAZ,CAAtB,CADc,CAC0B;AACxC,aAAKE,iBAAL,GAAyB,CAACF,KAAK,CAAL,IAAU,IAAX,KAAoB,CAA7C,CAFc,CAEiC;AAC/C,aAAKG,aAAL,GAAqBH,KAAK,CAAL,IAAU,IAA/B;AACA,aAAKI,SAAL,GAAgB,KAAKD,aAAL,KAAuBJ,KAAKM,KAAL,CAAWC,GAAlD;AACA,aAAKC,oBAAL,GAA0BR,KAAKS,aAAL,CAAmB,KAAKL,aAAxB,CAA1B;AACH;;;;4BA4CU;AACP,mBAAO,KAAKA,aAAZ;AACH;;;4BAEM;AACH,mBAAO,KAAKF,aAAZ;AACH;;;4BAEQ;AACL,mBAAO,KAAKC,iBAAZ;AACH;;;4BAEgB;AACb,mBAAO,KAAKE,SAAZ;AACH;;;sCAxDoBK,E,EAAG;AACpB,oBAAOA,EAAP;AACI,qBAAK,CAAL,CAAO,KAAK,EAAL;AAAQ,2BAAO,OAAP;AACf,qBAAK,CAAL,CAAO,KAAK,CAAL,CAAO,KAAK,CAAL;AAAO,2BAAO,KAAP;AACrB,qBAAK,CAAL;AAAO,2BAAO,KAAP;AACP,qBAAK,CAAL;AAAO,2BAAO,KAAP;AACP,qBAAK,CAAL;AAAO,2BAAO,KAAP;AACP,qBAAK,CAAL;AAAO,2BAAO,KAAP;AACP,qBAAK,CAAL;AAAO,2BAAO,KAAP;AACP;AAAQ,2BAAO,OAAP;AARZ;AAUH;;;4BAEkB;AACf,mBAAO;AACH,yBAAQ,CADL;AAEH,iCAAgB,CAFb;AAGH,uBAAM,CAHH;AAIH,uBAAM,CAJH;AAKH,uBAAM,CALH;AAMH,uBAAM,CANH;AAOH,uBAAM,CAPH;AAQH,uBAAM,CARH;AASH,uBAAM,CATH;AAUH,uBAAM,CAVH;AAWH,gCAAe,EAXZ;AAYH,8BAAa,EAZV;AAaH,+BAAc,EAbX;AAcH,2BAAU,EAdP;AAeH,mCAAkB;AAff,aAAP;AAiBH;;;4BAEgB;AACb,mBAAO;AACH,0BAAS,CADN;AAEH,uBAAO,CAFJ;AAGH,wBAAO,CAHJ;AAIH,2BAAW;AAJR,aAAP;AAMH;;;;;;AAmBLC,UAAQC,OAAOD,OAAP,GAAeX,IAAvB","file":"h264_nalu_parser.js","sourcesContent":["/**\r\n * Created by Luky on 2017/8/2.\r\n */\r\n\r\nclass NALU {\r\n\r\n    constructor(data) {\r\n        this.forbidden_bit = !!(data[0] & 0x80);//1bit\r\n        this.nal_reference_idc = (data[0] & 0x60) >> 5;//2bit\r\n        this.nal_unit_type = data[0] & 0x1f;\r\n        this.key_frame=(this.nal_unit_type === NALU.TYPES.IDR);\r\n        this.nal_unit_type_string=NALU.getTypeString(this.nal_unit_type);\r\n    }\r\n\r\n    static getTypeString(ut){\r\n        switch(ut){\r\n            case 1:case 19:return 'SLICE';\r\n            case 2:case 3:case 4:return 'DB_';\r\n            case 5:return 'IDR';\r\n            case 6:return 'SEI';\r\n            case 7:return 'SPS';\r\n            case 8:return 'PPS';\r\n            case 9:return 'AUD';\r\n            default:return 'Other';\r\n        }\r\n    }\r\n\r\n    static get TYPES() {\r\n        return {\r\n            'SLICE':1,\r\n            'SLICE_NON_IDR':1,\r\n            'DPA':2,\r\n            'DPB':3,\r\n            'DPC':4,\r\n            'IDR':5,\r\n            'SEI':6,\r\n            'SPS':7,\r\n            'PPS':8,\r\n            'AUD':9,\r\n            'END_SEQUENCE':10,\r\n            'END_STREAM':11,\r\n            'FILLER_DATA':12,\r\n            'SPS_EXT':13,\r\n            'AUXILIARY_SLICE':19\r\n        };\r\n    }\r\n\r\n    static get NRI() {\r\n        return {\r\n            'DISPOS':0,\r\n            'LOW': 1,\r\n            'HIGH':2,\r\n            'HIGHEST': 3\r\n        };\r\n    }\r\n\r\n    get type() {\r\n        return this.nal_unit_type;\r\n    }\r\n\r\n    get f(){\r\n        return this.forbidden_bit;\r\n    }\r\n\r\n    get nri(){\r\n        return this.nal_reference_idc;\r\n    }\r\n\r\n    get isKeyframe() {\r\n        return this.key_frame;\r\n    }\r\n}\r\n\r\nexports=module.exports=NALU;"]}