{"version":3,"sources":["../../src/h264/h264_poc.js"],"names":["SliceParser","require","H264POC","_prev_frame_num","_prev_frame_num_offset","_prev_poc_lsb","_prev_poc_msb","slice","sps","profile","poc","sb","frame_num","key_frame","field_poc","type","max_poc_lsb","log2_max_poc_lsb","lsb","msb","encode_type","EncodeTypes","FRAME","delta_bottom","max_frame_num","log2_max_frame_num","frame_num_offset","abs_frame_num","poc_cycle_length","num_ref_frames_in_poc_cycle","nalu","nal_reference_idc","expected_delta_per_poc_cycle","expectedpoc","poc_cycle_cnt","frame_num_in_poc_cycle","i","offset_for_ref_frame","offset_for_non_ref_pic","delta","offset_for_top_to_bottom_field","max_poc","Math","max","pic_filed_poc_sum","pic_field_poc","BOTTOM_FIELD","TOP_FIELD","min","sb_other","got_reset","exports","module"],"mappings":"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","file":"h264_poc.js","sourcesContent":["/**\r\n * Created by Luky on 2017/8/6.\r\n */\r\nconst SliceParser=require('./h264_slice_parser');\r\n\r\nclass H264POC{\r\n\r\n    constructor(){\r\n        this._prev_frame_num=0;\r\n        this._prev_frame_num_offset=0;\r\n        this._prev_poc_lsb=0;\r\n        this._prev_poc_msb=0;\r\n    }\r\n\r\n    initPOC(slice,sps){\r\n        if(sps.profile==='66'){//baseline\r\n            sps.poc.sb=sps.frame_num;\r\n            return;\r\n        }\r\n        if(slice.key_frame){\r\n            this._prev_frame_num=\r\n            this._prev_frame_num_offset=\r\n            this._prev_poc_lsb=\r\n            this._prev_poc_msb=0;\r\n        }\r\n        let field_poc=[];\r\n        if (sps.poc.type === 0) {\r\n            const max_poc_lsb = 1 << sps.log2_max_poc_lsb;\r\n            if (slice.poc.lsb < this._prev_poc_lsb &&this._prev_poc_lsb - slice.poc.lsb >= max_poc_lsb / 2){\r\n                slice.poc.msb = this._prev_poc_msb + max_poc_lsb;\r\n            }\r\n            else if (slice.poc.lsb > this._prev_poc_lsb &&this._prev_poc_lsb - slice.poc.lsb < -max_poc_lsb / 2)\r\n            {//乱序了\r\n                slice.poc.msb = this._prev_poc_msb - max_poc_lsb;\r\n            }\r\n            else{\r\n                slice.poc.msb = this._prev_poc_msb;\r\n            }\r\n\r\n            field_poc[0] =field_poc[1] = slice.poc.msb + slice.poc.lsb;\r\n            if (slice.encode_type ===SliceParser.EncodeTypes.FRAME)\r\n                field_poc[1] += slice.poc.delta_bottom;\r\n        }\r\n        else {\r\n            const max_frame_num = 1 << sps.log2_max_frame_num;\r\n            slice.frame_num_offset = this._prev_frame_num_offset;\r\n            if (slice.frame_num < this._prev_frame_num)\r\n                slice.frame_num_offset += max_frame_num;\r\n            if (sps.poc.type === 1) {\r\n                let abs_frame_num = 0;\r\n                let poc_cycle_length = sps.num_ref_frames_in_poc_cycle;\r\n                if (poc_cycle_length !== 0)\r\n                    abs_frame_num = slice.frame_num_offset + slice.frame_num;\r\n\r\n                if (slice.nalu.nal_reference_idc === 0 && abs_frame_num > 0)\r\n                    abs_frame_num--;\r\n\r\n                let expected_delta_per_poc_cycle = sps.poc.expected_delta_per_poc_cycle;\r\n\r\n                let expectedpoc = 0;\r\n                if (abs_frame_num > 0) {\r\n                    let poc_cycle_cnt = (abs_frame_num - 1) / poc_cycle_length;\r\n                    let frame_num_in_poc_cycle = (abs_frame_num - 1) % poc_cycle_length;\r\n\r\n                    expectedpoc = poc_cycle_cnt * expected_delta_per_poc_cycle;\r\n                    for (let i = 0; i <= frame_num_in_poc_cycle; i++)\r\n                        expectedpoc = expectedpoc + sps.offset_for_ref_frame[i];\r\n                }\r\n\r\n                if (slice.nalu.nal_reference_idc === 0)\r\n                    expectedpoc = expectedpoc + sps.offset_for_non_ref_pic;\r\n\r\n                field_poc[0] = expectedpoc + slice.poc.delta[0];\r\n                field_poc[1] = field_poc[0] + sps.offset_for_top_to_bottom_field;\r\n\r\n                if (slice.encode_type === SliceParser.EncodeTypes.FRAME)\r\n                    field_poc[1] += slice.poc.delta[1];\r\n            } else {\r\n                let poc = 2 * (slice.frame_num_offset + slice.frame_num);\r\n\r\n                //B帧,两帧的fnm相等，非参考帧在前\r\n                if (slice.nalu.nal_reference_idc === 0){\r\n                    poc--;\r\n                }\r\n\r\n                field_poc[0] = poc;\r\n                field_poc[1] = poc;\r\n            }\r\n        }\r\n        let max_poc=Math.max(field_poc[0],field_poc[1]);\r\n        let pic_filed_poc_sum=field_poc[0]+field_poc[1];\r\n        let pic_field_poc=[max_poc+1,max_poc+1];\r\n        if (slice.encode_type !==SliceParser.EncodeTypes.BOTTOM_FIELD)\r\n            pic_field_poc[0] = field_poc[0];\r\n        if (slice.encode_type !== SliceParser.EncodeTypes.TOP_FIELD)\r\n            pic_field_poc[1] = field_poc[1];\r\n        slice.poc.sb= Math.min(pic_field_poc[0], pic_field_poc[1]);\r\n        slice.poc.sb_other=pic_filed_poc_sum-slice.poc.sb;\r\n\r\n        /* Set up the prev_ values for decoding POC of the next picture. */\r\n        let got_reset=slice.got_reset;\r\n        this._prev_frame_num = got_reset ? 0 : slice.frame_num;\r\n        this._prev_frame_num_offset = got_reset ? 0 : slice.frame_num_offset;\r\n        if (slice.nalu.nal_reference_idc!== 0) {\r\n            if (!got_reset) {\r\n                this._prev_poc_msb = slice.poc.msb;\r\n                this._prev_poc_lsb = slice.poc.lsb;\r\n            }\r\n            else {\r\n                this._prev_poc_msb = 0;\r\n                this._prev_poc_lsb =\r\n                    (slice.encode_type===SliceParser.EncodeTypes.BOTTOM_FIELD?0:field_poc[0]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexports=module.exports=H264POC;"]}