{"version":3,"sources":["../../src/test/_vedio_cache.test.js"],"names":["Cache","require","expect","describe","xit","cache","append","Buffer","alloc","length","equal","dispatch","equals","times","fun","index","lastSecond","a","iid","setInterval","cur","Date","console","log","getMilliseconds","sec","getSeconds","toLocaleString","clearInterval","done","on","data","_started","t","fill","_datas","_buffer","time","buffer","Math","floor","it","len"],"mappings":"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","file":"_vedio_cache.test.js","sourcesContent":["/**\r\n * Created by Luky on 2017/7/16.\r\n */\r\n\r\nconst Cache=require('../app/servers/cache/_valve_pipe');\r\nconst expect=require('chai').expect;\r\n\r\ndescribe('cache test',()=>{\r\n    xit('无监视不缓存数据',()=>{\r\n        let cache=new Cache(3,256*3);\r\n        cache.append(Buffer.alloc(1),false);\r\n        expect(cache.length).equal(0);\r\n        expect(cache.dispatch(null)).equals(null);\r\n    });\r\n\r\n    // 一秒调用2次\r\n    function times(fun,times) {\r\n        times=times*2;\r\n        let index=0;\r\n        let lastSecond=0,a=0;\r\n        let iid=setInterval(()=>{\r\n            let cur=new Date();\r\n            console.log(`毫秒数：${cur.getMilliseconds()}`);\r\n            if(cur.getMilliseconds()>550&&index===0){\r\n                return;\r\n            }\r\n            let sec=cur.getSeconds();\r\n            lastSecond=lastSecond||sec;\r\n            if(sec!==lastSecond){\r\n                a=0;\r\n            }\r\n            else if(a===2){\r\n                return;\r\n            }\r\n            a++;\r\n            lastSecond=sec;\r\n            console.log(`Date:${cur.toLocaleString()},times:${index}`);\r\n            fun(index++);\r\n            times--;\r\n            if(times===0)clearInterval(iid);\r\n        },200);\r\n    }\r\n\r\n    xit('测试非擦除数据，3个容量，共3秒测试，每秒两次数据，每次100个值，共600数据量',(done)=>{\r\n        let cache=new Cache(3,100*2*3);\r\n        cache.on('data',(data)=>{\r\n            expect(cache._started).equals(true);\r\n            expect(data.length).equals(600);\r\n            let t=Buffer.alloc(100*3*2,1);\r\n            t.fill(2,200,400);\r\n            t.fill(3,400,600);\r\n            expect(t.equals(data)).equals(true);\r\n            expect(cache._datas[0].length).equals(0);\r\n            expect(cache._datas[0]._buffer.length).equals(200);\r\n            expect(cache._datas[1].length).equals(0);\r\n            expect(cache._datas[1]._buffer.length).equals(200);\r\n            expect(cache._datas[2].length).equals(0);\r\n            expect(cache._datas[2]._buffer.length).equals(200);\r\n            done();\r\n        });\r\n        times((time)=>{\r\n            let buffer=Buffer.alloc(100,Math.floor((time+2)/2));\r\n            cache.append(buffer,time!==3*2-1);\r\n        },3);\r\n    });\r\n    xit('测试数据丢弃，3秒容量，每秒两次数据，每次10个数据,连续六秒',(done)=>{\r\n        let cache=new Cache(3,10*2*3);\r\n        cache.on('data',(data)=>{\r\n            expect(cache._started).equals(true);\r\n            expect(data.length).equals(60);\r\n            let t=Buffer.alloc(10*2*3,4);\r\n            t.fill(5,20,40);\r\n            t.fill(6,40,60);\r\n            expect(t.equals(data)).equals(true);\r\n            expect(cache._datas[0].length).equals(0);\r\n            expect(cache._datas[0]._buffer.length).equals(20);\r\n            expect(cache._datas[1].length).equals(0);\r\n            expect(cache._datas[1]._buffer.length).equals(20);\r\n            expect(cache._datas[2].length).equals(0);\r\n            expect(cache._datas[2]._buffer.length).equals(20);\r\n            done();\r\n        });\r\n        times((time)=>{\r\n            let buffer=Buffer.alloc(10,Math.floor((time+2)/2));\r\n            cache.append(buffer,time!==6*2-1);\r\n        },6);\r\n    });\r\n\r\n    it('单秒容量不足及性能测试',(done)=>{\r\n        let len=1024*1024*100;\r\n        let cache=new Cache(3);\r\n        let times=0,lastSecond=0;\r\n        let buffer=Buffer.alloc(len,1);\r\n        cache.on('data',(data)=> {\r\n            expect(Buffer.alloc(times*len,1).equals(data)).equals(true);\r\n            console.log(`length:${times*len/1024/1024}M`);//1000M单秒的计入\r\n            done();\r\n        });\r\n        let iid=setInterval(()=>{\r\n            let cur=new Date();\r\n            if(times===0&&cur.getMilliseconds()>100)\r\n            {\r\n                return;\r\n            }\r\n            lastSecond=lastSecond||cur.getSeconds();\r\n            times++;\r\n            if(lastSecond!==cur.getSeconds()){\r\n                clearInterval(iid);\r\n                cache.append(buffer,false);\r\n                return;\r\n            }\r\n            cache.append(buffer,true);\r\n        },10);\r\n    });\r\n\r\n});\r\n"]}