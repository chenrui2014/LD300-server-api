{"version":3,"sources":["../../../src/test/serialport/serialport.test.js"],"names":["expect","require","Com","SerialPort","_","console","log","error","done","equal","ok","toPort","id","options","baudRate","stopBits","dataBits","parity","byteLength","tryTimes","describe","it","com","on","msg","innerError","indexOf","errorType","Errors","openError","connect","then","bind","catch","com1","err","JSON","stringify","disConnect","extend","e","times","Events","Offline","stopReConnect","GetPortsArrived","ports","length","com2","beforeEach","data","toString","write","Buffer","from","setTimeout","afterEach","eventDataExpect","port","type","Open","Close","opt","deDuplication","ct","i"],"mappings":"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","file":"serialport.test.js","sourcesContent":["const expect = require('chai').expect;\r\nconst Com=require('../../serialport/serialport');\r\nconst SerialPort=Com;\r\nconst _=require('lodash');\r\nconsole.log('\\r测试前通过虚拟串口工具打开端口1和2，并保证无端口13\\r');\r\n\r\nfunction error(done){\r\n    expect(1).equal(0);\r\n    done();\r\n}\r\n\r\nfunction ok(done) {\r\n    done();\r\n}\r\n\r\nfunction  toPort(id) {\r\n    return `\\\\\\\\.\\\\COM${id}`;\r\n}\r\n\r\nlet options={\r\n    baudRate: 115200,\r\n    stopBits: 2,\r\n    dataBits: 8,\r\n    parity:\"none\",\r\n    byteLength:16,\r\n    tryTimes:0\r\n};\r\n\r\ndescribe('串口测试',()=>{\r\n    describe('com错误测试',()=>{\r\n        it('无法找到端口',(done)=>{\r\n            //File not found\r\n            let com=new Com(13,options);\r\n            com.on('error',(msg)=>{\r\n                expect(msg.innerError.indexOf('File not found')>-1).equal(true);\r\n                expect(msg.errorType).equal(SerialPort.Errors.openError);\r\n            });\r\n            com.connect().then(error.bind(null,done)).catch(ok.bind(null,done));\r\n        });\r\n\r\n        it('重复绑定端口',(done)=>{\r\n            //Error: Opening \\\\\\\\.\\\\COM2: Access denied\r\n            let com1=new Com(1,options);\r\n            com1.connect().then(()=>{\r\n                let com=new Com(1,options);\r\n                com.on('error',(msg)=>{\r\n                    expect(msg.innerError.indexOf('Access denied')>-1).equal(true);\r\n                    expect(msg.errorType).equal(SerialPort.Errors.openError);\r\n                });\r\n                com.connect().catch((err)=>{\r\n                    expect(JSON.stringify(err).indexOf('端口以被其他应用占用，请确认')>-1).equal(true);\r\n                    com1.disConnect().then(done).catch(error.bind(null,done));\r\n                });\r\n            }).catch(error.bind(null,done));\r\n        });\r\n\r\n        it('一直重连',(done)=>{\r\n            let com=new Com(13,_.extend({},options,{tryTimes:-1}));\r\n            com.connect().then().catch((e)=>{\r\n                expect(e.times).equal(2);\r\n                ok(done);\r\n            });\r\n\r\n            let err=0;\r\n            com.on(Com.Events.Offline,(e)=>{\r\n                expect('duration' in e).equal(true);\r\n                err++;\r\n                if(err!==2) return;\r\n                expect(e.times).equal(2);\r\n                com.stopReConnect();\r\n            });\r\n        });\r\n    });\r\n\r\n    describe('静态功能块测试',()=>{\r\n        it('',async ()=> {\r\n            let ports=await SerialPort.GetPortsArrived();\r\n            expect(ports.length>0).equal(true);\r\n            expect(ports[0]).equal('COM1');\r\n        });\r\n    });\r\n\r\n    describe('正常测试',()=>{\r\n        let com=null,com2=null;\r\n        beforeEach((done)=>{\r\n            com=new Com(1,options);\r\n            com.on('error',console.error);\r\n            com.connect().then(()=>{\r\n                com2=new Com(2,options);\r\n                com2.on('error',console.error);\r\n                com2.connect().then(done).catch(error.bind(null,done));\r\n            }).catch(error.bind(null,done));\r\n        });\r\n        it('端口正确关闭',(done)=>{\r\n            com.disConnect().then(()=>{\r\n                com=new Com(1,options);\r\n                com.connect().then(()=>{\r\n                    com.disConnect().then(ok.bind(null,done)).catch(error.bind(null,done));\r\n                }).catch(error.bind(null,done));\r\n            }).catch(error.bind(null,done));\r\n        });\r\n\r\n        it('发送获取数据',(done)=>{\r\n            //00000000000000003333551500000000\r\n            com.on('data',(data)=>{\r\n                //const {id,data}=unpackageData(data1);\r\n                expect(data.toString('hex')).equal('00000000000000003333551500000000');\r\n                done();\r\n            });\r\n            com2.write(Buffer.from('00000000000000003333551500000000','hex'));\r\n            setTimeout(()=>{\r\n                done;\r\n            },5000);\r\n        });\r\n\r\n        afterEach((done)=>{\r\n            com.disConnect().then(()=>{\r\n                com2.disConnect().then(ok.bind(null,done)).catch(error.bind(null,done));\r\n            }).catch(error.bind(null,done));\r\n        })\r\n    });\r\n\r\n    describe('事件测试',()=>{\r\n\r\n        function eventDataExpect(data,port,type) {\r\n            expect(data.port).equal(toPort(port));\r\n            expect(data.type).equal(type);\r\n        }\r\n\r\n       it('open',(done)=>{\r\n           let com=new Com(1,options);\r\n           com.on(Com.Events.Open,(data)=>{\r\n               eventDataExpect(data,1,Com.Events.Open);\r\n               com.disConnect().then(ok.bind(null,done)).catch(error.bind(null,done));\r\n           });\r\n       });\r\n\r\n        it('close',(done)=>{\r\n            let com=new Com(1,options);\r\n            com.on(Com.Events.Close,(data)=>{\r\n                eventDataExpect(data,1,Com.Events.Close);\r\n                done();\r\n            });\r\n            com.disConnect().catch();\r\n        });\r\n    });\r\n\r\n    describe('正常测试-去重',()=> {\r\n        let com = null,com2=null;\r\n        beforeEach((done) => {\r\n            let opt=_.extend({},options,{deDuplication:true});\r\n            com = new Com(1,opt);\r\n            com.on('error',console.error);\r\n            com.connect().then(()=>{\r\n                com2=new Com(2,opt);\r\n                com2.on('error',console.error);\r\n                com2.connect().then(done).catch(error.bind(null,done));\r\n            }).catch(error.bind(null, done));\r\n        });\r\n\r\n        it('1',(done)=>{\r\n            //00000000000000003333551500000000\r\n            let ct=0;\r\n            com.on('data',(data)=>{\r\n                //const {id,data}=unpackageData(data1);\r\n                expect(data.toString('hex')).equal('00000000000000003333551500000000');\r\n                //expect(id).equal(1);\r\n                ct++;\r\n            });\r\n            for(let i=0;i<3;i++){\r\n                com2.write(Buffer.from('00000000000000003333551500000000','hex'));\r\n            }\r\n            setTimeout(()=>{\r\n                expect(ct===1).equal(true);\r\n                com.disConnect().then(done).catch(error.bind(null,done));\r\n            },10000);\r\n        });\r\n        afterEach((done)=>{\r\n            com.disConnect().then(()=>{\r\n                com2.disConnect().then(ok.bind(null,done)).catch(error.bind(null,done));\r\n            }).catch(error.bind(null,done));\r\n        })\r\n    });\r\n});"]}