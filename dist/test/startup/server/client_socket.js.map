{"version":3,"sources":["../../../../src/test/startup/server/client_socket.js"],"names":["_","require","net","EventEmitter","Parser","Client","host","port","client","time","restart","start","then","log","catch","warn","times","setTimeout","stop","Promise","resolve","reject","Socket","readable","writable","connect","on","err","code","error","toString","data","emit","had_error","removeAllListeners","reconnect","write","destroy","exports","module"],"mappings":";;;;;;;;;;AAAA,IAAMA,IAAEC,QAAQ,QAAR,CAAR;AACA,IAAMC,MAAID,QAAQ,KAAR,CAAV;AACA,IAAME,eAAaF,QAAQ,QAAR,EAAkBE,YAArC;;eACeF,QAAQ,sBAAR,C;IAARG,M,YAAAA,M;;IAEDC,M;;;AACF,oBAAYC,IAAZ,EAAiBC,IAAjB,EAAsB;AAAA;;AAAA;;AAElB,cAAKD,IAAL,GAAUA,QAAM,IAAhB;AACA,cAAKC,IAAL,GAAUA,IAAV;AACA,cAAKC,MAAL,GAAY,IAAZ;AACAJ,sBAAY,kBAAZ,EAA+B,EAACG,MAAK,MAAKA,IAAX,EAAgBD,MAAK,MAAKA,IAAL,IAAW,WAAhC,EAA/B;AALkB;AAMrB;;;;oCAEU;AAAA;;AACP,gBAAIG,OAAK,CAAT;AACA,gBAAIC,UAAQ,SAARA,OAAQ,GAAI;AACZ,uBAAKC,KAAL,GAAaC,IAAb,CAAkB,YAAI;AAClBH,2BAAK,CAAL;AACA,2BAAKI,GAAL,CAAS,UAAT;AACH,iBAHD,EAGGC,KAHH,CAGS,YAAI;AACT,2BAAKC,IAAL,yCAAmB,EAACC,OAAMP,MAAP,EAAnB;AACAQ,+BAAWP,OAAX,EAAmB,IAAnB;AACH,iBAND;AAOH,aARD;AASAA;AACH;;;gCAEK,OAAQ;AAAA;;AACV,iBAAKQ,IAAL;AACA,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAkB;AACjC,oBAAIb,SAAON,IAAIoB,MAAJ,CAAW;AAClBC,8BAAU,IADQ;AAElBC,8BAAU;AAFQ,iBAAX,CAAX;AAIAhB,uBAAOiB,OAAP,CAAe,EAAClB,MAAK,OAAKA,IAAX,EAAgBD,MAAK,OAAKA,IAA1B,EAAf,EAA+C,YAAI;AAC/C,2BAAKO,GAAL,CAAS,QAAT;AACA,2BAAKL,MAAL,GAAYA,MAAZ;AACA,2BAAOY,SAAP;AACH,iBAJD;AAKAZ,uBAAOkB,EAAP,CAAU,OAAV,EAAkB,UAACC,GAAD,EAAO;AACrB,wBAAGA,IAAIC,IAAJ,KAAW,QAAd,EAAuB;AACnB,+BAAOP,OAAO,OAAKQ,KAAL,CAAW,QAAX,CAAP,CAAP;AACH;AACD,2BAAKA,KAAL,+BAAmBF,IAAIG,QAAJ,EAAnB;AACH,iBALD;AAMAtB,uBAAOkB,EAAP,CAAU,MAAV,EAAiB,UAACK,IAAD,EAAQ;AACrB;;AAEA,2BAAKlB,GAAL,CAAS,MAAT,EAAgB,EAACkB,MAAKA,KAAKD,QAAL,CAAc,KAAd,CAAN,EAAhB;AACA,2BAAKE,IAAL,CAAU,MAAV,EAAiBD,IAAjB;AACH,iBALD;AAMAvB,uBAAOkB,EAAP,CAAU,OAAV,EAAmB,UAACO,SAAD,EAAc;AAC7BzB,2BAAO0B,kBAAP;AACA,wBAAGD,SAAH,EAAa;AACT,+BAAKJ,KAAL,CAAW,YAAX;AACA,+BAAKM,SAAL;AACA;AACH,qBAJD,MAKK,OAAKtB,GAAL,CAAS,QAAT;AACR,iBARD;AASH,aA/BM,CAAP;AAgCH;;;8BAEKkB,I,EAAK;AACP,gBAAG,KAAKvB,MAAR,EAAe;AACX,qBAAKA,MAAL,CAAY4B,KAAZ,CAAkBL,IAAlB;AACH;AACJ;;;+BAEK;AACF,gBAAG,KAAKvB,MAAR,EAAe;AACX,qBAAKA,MAAL,CAAY6B,OAAZ;AACA,qBAAK7B,MAAL,GAAY,IAAZ;AACH;AACJ;;;;EAtEgBL,Y;;AA0ErBmC,UAAQC,OAAOD,OAAP,GAAejC,MAAvB","file":"client_socket.js","sourcesContent":["const _=require('lodash');\r\nconst net=require('net');\r\nconst EventEmitter=require('events').EventEmitter;\r\nconst {Parser}=require('../../../app/log/log');\r\n\r\nclass Client extends EventEmitter{\r\n    constructor(host,port){\r\n        super();\r\n        this.host=host||null;\r\n        this.port=port;\r\n        this.client=null;\r\n        Parser(this,'client_socket.js',{port:this.port,host:this.host||'localhost'});\r\n    }\r\n\r\n    reconnect(){\r\n        let time=0;\r\n        let restart=()=>{\r\n            this.start().then(()=>{\r\n                time=0;\r\n                this.log('服务自动重连成功');\r\n            }).catch(()=>{\r\n                this.warn(`服务重连失败`,{times:time++});\r\n                setTimeout(restart,5000);\r\n            });\r\n        };\r\n        restart();\r\n    }\r\n\r\n    start(/*com*/){\r\n        this.stop();\r\n        return new Promise((resolve,reject)=>{\r\n            let client=net.Socket({\r\n                readable: true,\r\n                writable: true\r\n            });\r\n            client.connect({port:this.port,host:this.host},()=>{\r\n                this.log('已连接服务器');\r\n                this.client=client;\r\n                return resolve();\r\n            });\r\n            client.on('error',(err)=>{\r\n                if(err.code==='ENOENT'){\r\n                    return reject(this.error('服务器未找到'));\r\n                }\r\n                this.error(`内部错误,${err.toString()}`);\r\n            });\r\n            client.on('data',(data)=>{\r\n                /*const {id,data}=unpackageData(data1);\r\n                com.write(data,id);*/\r\n                this.log('收到数据',{data:data.toString('hex')});\r\n                this.emit('data',data);\r\n            });\r\n            client.on('close', (had_error)=> {\r\n                client.removeAllListeners();\r\n                if(had_error){\r\n                    this.error('服务器关闭或连接错误');\r\n                    this.reconnect();\r\n                    //尝试重连服务器\r\n                }\r\n                else this.log('连接正常关闭');\r\n            });\r\n        });\r\n    }\r\n\r\n    write(data){\r\n        if(this.client){\r\n            this.client.write(data);\r\n        }\r\n    }\r\n\r\n    stop(){\r\n        if(this.client){\r\n            this.client.destroy();\r\n            this.client=null;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexports=module.exports=Client;"]}