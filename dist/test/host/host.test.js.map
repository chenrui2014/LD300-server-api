{"version":3,"sources":["../../../src/test/host/host.test.js"],"names":["_","require","expect","SerialPort","Host","util","vHost","vHostPort","hostPort","expectEmitData","data","id","type","hid","equal","isNumber","describe","port","loopID","before","done","portOptions","connect","then","catch","setInterval","write","cmds","it","host","rdata","equals","Buffer","from","removeListener","on","Events","Open","state","States","Unknown","sc","StateChanged","stateOld","stateNew","Normal","SysReady","clearInterval","disConnect","Close","after","Alarm","position","setTimeout","clearAlarm","Error","errorType","Errors","InitError","ConnectError","Offline","innerEvent"],"mappings":"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","file":"host.test.js","sourcesContent":["/**\r\n * Created by Luky on 2017/6/24.\r\n */\r\nconst _=require('lodash');\r\nconst expect = require('chai').expect;\r\nconst SerialPort=require('../../app/serialport/serialport');\r\nconst Host=require('../../app/host/host');\r\nconst util=require('util');\r\nconst vHost=require('../../host/virtual_host');\r\n//真实测试中使用的端口\r\n\r\nlet vHostPort='\\\\\\\\.\\\\COM1';\r\nlet hostPort='\\\\\\\\.\\\\COM2';\r\n\r\nfunction expectEmitData(data,id,type){\r\n    expect(data.hid).equal(id);\r\n    expect(data.type).equal(type);\r\n    expect(_.isNumber(data.id-0)).equal(true);\r\n}\r\n\r\ndescribe('模拟测试，请打开1,2串口',()=>{\r\n    describe('打开及正常信号',()=> {\r\n        let port;\r\n        let loopID=0;\r\n        before((done)=>{\r\n            port=new SerialPort(vHostPort,vHost.portOptions);\r\n            port.connect().then(done).catch(done);\r\n            loopID=setInterval(()=>{\r\n                port.write(vHost.cmds[0]);\r\n            },200);\r\n        });\r\n\r\n        it('打开设备测试发送rdady信号,关闭设备',(done)=>{\r\n            const host=new Host(2,hostPort);\r\n            let rdata=(data)=>{\r\n                expect(data.equals(Buffer.from([0]))).equal(true);\r\n                port.removeListener('data',rdata);\r\n            };\r\n            port.on('data',rdata);\r\n            host.on(Host.Events.Open,(data)=>{\r\n                expectEmitData(data,2,Host.Events.Open);\r\n            });\r\n\r\n            let state=Host.States.Unknown;\r\n            let sc=(data)=>{\r\n                expectEmitData(data,2,Host.Events.StateChanged);\r\n                expect(data.stateOld).equal(state);\r\n                if(state===Host.States.Unknown){\r\n                    expect(data.stateNew).equal(Host.States.Normal);\r\n                    expect(host.state).equal(Host.States.Normal);\r\n                    state=data.stateNew;\r\n                }\r\n                else if(state===Host.States.Normal){\r\n                    host.removeListener(Host.Events.StateChanged,sc);\r\n                    expect(data.stateNew).equal(Host.States.SysReady);\r\n                    expect(host.state).equal(Host.States.SysReady);\r\n                    clearInterval(loopID);\r\n                    host.disConnect().catch(done);\r\n                }\r\n                else{\r\n                    expect(1).equal(2);\r\n                    return;\r\n                }\r\n            };\r\n            host.on(Host.Events.StateChanged,sc);\r\n\r\n            host.on(Host.Events.Close,(data)=>{\r\n                expectEmitData(data,2,Host.Events.Close);\r\n                done();\r\n            });\r\n            host.connect();\r\n        });\r\n\r\n        after((done)=>{\r\n            port.disConnect().then(done).catch(done);\r\n        });\r\n    });\r\n\r\n    describe('报警信号',()=>{\r\n        let port;\r\n        before((done)=>{\r\n            port=new SerialPort(vHostPort,vHost.portOptions);\r\n            port.connect().then(done).catch(done);\r\n        });\r\n        it('接受警报771米',(done)=>{\r\n            const host=new Host(2,hostPort);\r\n            host.on(Host.Events.Open,()=>{\r\n                port.write(vHost.cmds[1]);\r\n            });\r\n            host.on(Host.Events.StateChanged,(data)=>{\r\n                expectEmitData(data,2,Host.Events.StateChanged);\r\n                if(data.stateNew!==Host.States.Alarm){\r\n                    return;\r\n                }\r\n                expect(host.state).equal(Host.States.Alarm);\r\n                expect(data.stateNew).equal(Host.States.Alarm);\r\n                expect(data.position).equal(771);\r\n                host.disConnect().then(done).catch(done);\r\n            });\r\n            host.connect();\r\n        });\r\n        it('报警解除',(done)=>{\r\n            const host=new Host(2,hostPort);\r\n            host.connect();\r\n            port.on('data',(data)=>{\r\n               if(data[0]===0)return;\r\n               expect(data.equals(Buffer.from([0xAA]))).equal(true);\r\n               host.disConnect().then(done).catch(done);\r\n            });\r\n            setTimeout(()=>{\r\n                host.clearAlarm().catch(done);\r\n            },100);\r\n        });\r\n\r\n        it('报警接触后复位信号',(done)=>{\r\n            const host=new Host(2,hostPort);\r\n            host.on(Host.Events.Open,()=>{\r\n                expect(host.state).equal(Host.States.Unknown);\r\n                port.write(vHost.cmds[1]);\r\n            });\r\n            host.on(Host.Events.StateChanged,(data)=>{\r\n                if(data.stateNew===Host.States.Alarm){\r\n                    expect(host.state).equal(Host.States.Alarm);\r\n                    port.write(vHost.cmds[0]);\r\n                }\r\n                if(data.stateNew===Host.States.SysReady){\r\n                    expect(host.state).equal(Host.States.SysReady);\r\n                    host.disConnect().then(done).catch(done);\r\n                }\r\n            });\r\n            host.connect();\r\n        });\r\n\r\n        after((done)=>{\r\n            port.disConnect().then(done).catch(done);\r\n        });\r\n    });\r\n\r\n    describe('主机返回错误信号',()=>{\r\n        let port;\r\n        before((done)=>{\r\n            port=new SerialPort(vHostPort,vHost.portOptions);\r\n            port.connect().then(done).catch(done);\r\n        });\r\n\r\n        it('initError',(done)=>{\r\n            setTimeout(()=>{\r\n                port.write(vHost.cmds[2]);\r\n            },400);\r\n            const host=new Host(2,hostPort);\r\n            host.on(Host.Events.StateChanged,(data)=>{\r\n                if(data.stateNew===Host.States.Error){\r\n                    expect(host.state).equal(Host.States.Error);\r\n                    expectEmitData(data,2,Host.Events.StateChanged);\r\n                    expect(data.errorType).equal(Host.Errors.InitError);\r\n                    host.disConnect().then(done).catch(done);\r\n                }\r\n            });\r\n            host.connect();\r\n        });\r\n\r\n        it('connectnitError',(done)=>{\r\n            setTimeout(()=>{\r\n                port.write(vHost.cmds[3]);\r\n            },400);\r\n            const host=new Host(2,hostPort);\r\n            host.on(Host.Events.StateChanged,(data)=>{\r\n                if(data.stateNew===Host.States.Error) {\r\n                    expectEmitData(data, 2, Host.Events.StateChanged);\r\n                    expect(host.state).equal(Host.States.Error);\r\n                    expect(data.errorType).equal(Host.Errors.ConnectError);\r\n                    host.disConnect().then(done).catch(done);\r\n                }\r\n            });\r\n            host.connect();\r\n        });\r\n\r\n        after((done)=>{\r\n            port.disConnect().then(done).catch(done);\r\n        });\r\n    });\r\n\r\n    describe('小测端口错误传递',()=>{\r\n       it('绑定不存在的13端口-Offline测试',(done)=>{\r\n           const host=new Host(2,13);\r\n           host.on(Host.Events.Offline,(data)=>{\r\n               expect(host.state).equal(Host.States.Unknown);\r\n               expectEmitData(data,2,Host.Events.Offline);\r\n               expect(data.innerEvent.port).equal('\\\\\\\\.\\\\COM13');\r\n               done();\r\n           });\r\n           host.connect();\r\n       });\r\n    });\r\n});"]}