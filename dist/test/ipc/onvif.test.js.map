{"version":3,"sources":["../../../src/test/ipc/onvif.test.js"],"names":["id","IPCF","getIPC","getInstance","require","db","file","Data","ONVIF","expect","fs","http","path","wOption","flags","encoding","fd","mode","autoClose","describe","ipc","sign","name","options","ip","split","join","resolve","__dirname","fw","createWriteStream","on","data","write","realPlay","Promise","reject","setTimeout","stopRealPlay","catch","save","dbInstance","before","it","done","cfg","connect","then","console","log","isConnected","equal","disConnect","discovery","JSON","stringify","rtspURI","uri","user","pwd","replace"],"mappings":"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","file":"onvif.test.js","sourcesContent":["/**\r\n * Created by Luky on 2017/7/3.\r\n */\r\nconst {db,file}=require('../init');\r\nconst Data=require('../../servers/data_server');\r\nconst ONVIF=require('../../ipcs/onvif/onvif_ipc');\r\nconst IPCF=require('../../servers/ipc_factory');\r\nconst expect = require('chai').expect;\r\n//const ffmpeg=require('ffmpeg');\r\n//const rtsp=require('rtsp-ffmpeg');\r\n//const ffmpegStream=require('../../_ffmpeg/__stream_ffmpeg');\r\n//node-rtsp-stream\r\n//const Recorder = require('rtsp-recorder');\r\nconst fs = require('fs');\r\nconst http = require('http');\r\nconst path=require('path');\r\n\r\nconst wOption = {\r\n    flags: 'a',\r\n    encoding: null,\r\n    fd: null,\r\n    mode: 0o666,\r\n    autoClose: true\r\n};\r\n\r\nasync function getInstance(id) {\r\n    return await IPCF.getIPC(id);\r\n}\r\n\r\ndescribe('onvif 大华测试',function(){\r\n\r\n    let dbInstance=null;\r\n    before(async ()=>{\r\n        //打开注释启动数据库取数据\r\n        dbInstance=await file();\r\n    });\r\n\r\n   it('连接测试',(done)=>{\r\n       let ipc=new ONVIF(cfg);\r\n       ipc.connect().then(()=>{\r\n           console.log('链接成功');\r\n           expect(ipc.isConnected).equal(true);\r\n           ipc.disConnect().then(done).catch(done);\r\n       }).catch(done);\r\n   });\r\n\r\n   async function save(ipc,sign) {\r\n       let name=ipc.options.ip.split('.').join('_');\r\n       const file=path.resolve(__dirname,`../data/${name}_onvif_${sign}.h264`);\r\n       let fw=fs.createWriteStream(file,wOption);\r\n       ipc.on('video',(data)=>{\r\n           fw.write(data);\r\n       });\r\n       await ipc.realPlay();\r\n       return new Promise((resolve,reject)=>{\r\n          setTimeout(()=>{\r\n              ipc.stopRealPlay().catch(reject);\r\n              resolve();\r\n          },6000);\r\n       });\r\n   }\r\n\r\n   it('海康威视',async ()=>{\r\n       let ipc=await getInstance(6);\r\n       await save(ipc,'hkws',64);\r\n   });\r\n\r\n   it('discovery',async ()=>{\r\n       await ONVIF.discovery((data)=>{\r\n           console.log(JSON.stringify(data));\r\n       });\r\n   });\r\n\r\n   /*it('直播地址测试',(done)=>{\r\n       let o=new ONVIF(cfg);\r\n       o._realPlay().then((ps)=> {\r\n           let uri=ps.uri;\r\n           console.log('pre play');\r\n           console.log(uri);\r\n\r\n           let stream=new ffmpegStream({\r\n               input:rtspURI(uri,cfg.user,cfg.pwd),\r\n               output:'flv',\r\n               resolution:`${ps.width}*${ps.height}`,\r\n               quality:ps.quality,\r\n               rate:ps.fps,\r\n               bitrate:ps.bitrate,\r\n               arguments:['-rtsp_transport', 'tcp']\r\n           });\r\n           let fw = fs.createWriteStream('d:/onvif.flv',wOption);\r\n           stream.on('data',(data)=>{\r\n               fw.write(data);\r\n           });\r\n           /!*let Recorder = require('rtsp-recorder');\r\n\r\n           uri = uri.replace('rtsp://', 'rtsp://admin:admin@');\r\n\r\n           let rec = new Recorder({\r\n               url: uri, //url to rtsp stream\r\n               timeLimit: 10, //length of one video file (seconds)\r\n               folder: 'd:', //path to video folder\r\n               prefix: 'vid-', //prefix for video files\r\n               movieWidth: 1280, //width of video\r\n               movieHeight: 720, //height of video\r\n               maxDirSize: 1024 * 20, //max size of folder with videos (MB), when size of folder more than limit folder will be cleared\r\n               maxTryReconnect: 15 //max count for reconnects\r\n           });\r\n\r\n//start recording\r\n           rec.initialize();\r\n           *!/\r\n\r\n           setTimeout(()=> {\r\n               return o._stopRealPlay().then(() => {\r\n                   console.log('stop play');\r\n                   done();\r\n               }).catch(done);\r\n           },10000);\r\n       }).catch(done);\r\n   });*/\r\n});\r\n\r\n\r\nfunction rtspURI(uri,user,pwd){\r\n    return uri.replace('rtsp://', `rtsp://${user}:${pwd}@`);\r\n}"]}