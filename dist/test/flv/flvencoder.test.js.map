{"version":3,"sources":["../../../src/test/flv/flvencoder.test.js"],"names":["flv","require","WebSocket","_","url","assert","Writable","H264unPack","lineReader","path","fs","Cache","wOption","flags","encoding","fd","mode","autoClose","Live","done","_port","_path","_open","_rooms","socket","_server","Server","port","noServer","verifyClient","info","console","log","on","ws","req","uri","parse","roomIDRegExp","RegExp","ipcid","last","exec","user","query","id","msg","code","reason","readyState","OPEN","cache","addClient","data","send","fp","resolve","__dirname","unpack","pipe","eachLine","line","write","Buffer","from","end","describe","it","server","xdescribe","toString","x","VedioTagAVCPackage_EndOfSequence"],"mappings":";;;;;;AACA,IAAMA,MAAIC,QAAQ,2BAAR,CAAV;AACA,IAAMC,YAAYD,QAAQ,IAAR,CAAlB;AACA,IAAME,IAAEF,QAAQ,QAAR,CAAR;AACA,IAAMG,MAAIH,QAAQ,KAAR,CAAV;AACA,IAAMI,SAAOJ,QAAQ,QAAR,CAAb;AACA,IAAMK,WAASL,QAAQ,QAAR,EAAkBK,QAAjC;AACA,IAAMC,aAAWN,QAAQ,sCAAR,CAAjB;AACA,IAAMO,aAAaP,QAAQ,aAAR,CAAnB;AACA,IAAMQ,OAAKR,QAAQ,MAAR,CAAX;AACA,IAAMS,KAAKT,QAAQ,IAAR,CAAX;AACA;AACA,IAAMU,QAAMV,QAAQ,sCAAR,CAAZ;;AAEA,IAAMW,UAAU;AACZC,WAAO,GADK;AAEZC,cAAU,IAFE;AAGZC,QAAI,IAHQ;AAIZC,UAAM,GAJM;AAKZC,eAAW;AALC,CAAhB;;IAOMC,I;AACF,kBAAYC,IAAZ,EAAiB;AAAA;;AACb,aAAKC,KAAL,GAAW,IAAX;AACA,aAAKC,KAAL,GAAW,OAAX;AACA,aAAKC,KAAL;AACA,aAAKC,MAAL,GAAY,EAAZ;AACA,aAAKJ,IAAL,GAAUA,IAAV;AACH;;;;gCAEM;AAAA;;AACH,gBAAIK,SAAO,KAAKC,OAAL,GAAa,IAAIvB,UAAUwB,MAAd,CAAqB;AACzCC,sBAAK,KAAKP,KAD+B;AAEzC;AACAQ,0BAAS,IAHgC;AAIzCC,8BAAa,sBAACC,IAAD,EAAQ;AACjBC,4BAAQC,GAAR,CAAYF,IAAZ;AACA,2BAAO,IAAP;AACH;AAPwC,aAArB,CAAxB;AASAN,mBAAOS,EAAP,CAAU,YAAV,EAAwB,UAACC,EAAD,EAAKC,GAAL,EAAa;AACjC,oBAAMC,MAAMhC,IAAIiC,KAAJ,CAAUF,IAAI/B,GAAd,EAAmB,IAAnB,CAAZ;AACA2B,wBAAQC,GAAR,6CAAwBG,IAAI/B,GAA5B;AACA,oBAAMkC,eAAe,IAAIC,MAAJ,CAAc,MAAKlB,KAAnB,gBAAqC,GAArC,CAArB;AACA,oBAAMmB,QAAQrC,EAAEsC,IAAF,CAAOH,aAAaI,IAAb,CAAkBN,IAAI3B,IAAtB,KAA+B,CAAC,CAAC,CAAF,CAAtC,IAA8C,CAA5D;AACA,oBAAMkC,OAAOP,IAAIQ,KAAJ,CAAUC,EAAvB;AACAX,mBAAGD,EAAH,CAAM,SAAN,EAAiB,UAACa,GAAD,EAAS;AACtBf,4BAAQC,GAAR,gDAAsBc,GAAtB;AACH,iBAFD;AAGAZ,mBAAGD,EAAH,CAAM,OAAN,EAAe,UAACc,IAAD,EAAOC,MAAP,EAAkB;AAC7BjB,4BAAQC,GAAR,4CAAiCe,IAAjC,eAA+CC,MAA/C,oBAA+DR,KAA/D,cAA6EG,IAA7E;AACH,iBAFD;;AAIA,oBAAIT,GAAGe,UAAH,KAAkB/C,UAAUgD,IAAhC,EAAsC;AAClC;AACA;AACA,wBAAIC,QAAM,IAAIxC,KAAJ,EAAV;AACAwC,0BAAMC,SAAN,CAAgB,UAACC,IAAD,EAAQ;AACpBnB,2BAAGoB,IAAH,CAAQD,IAAR;AACH,qBAFD;AAGA,wBAAME,KAAG9C,KAAK+C,OAAL,CAAaC,SAAb,wBAAT;AACA;AACA,wBAAIC,SAAO,IAAInD,UAAJ,CAAe,IAAf,CAAX;AACAmD,2BAAOC,IAAP,CAAYR,KAAZ,EAVkC,CAUf;AACnB3C,+BAAWoD,QAAX,CAAoBL,EAApB,EAAwB,UAASM,IAAT,EAAepB,IAAf,EAAqB;AACzCiB,+BAAOI,KAAP,CAAaC,OAAOC,IAAP,CAAYH,IAAZ,EAAiB,KAAjB,CAAb;AACA;AACA,4BAAIpB,IAAJ,EAAU;AACNiB,mCAAOO,GAAP;AACA;AACH;AACJ,qBAPD;AAQA;AACAd,0BAAMlB,EAAN,CAAS,QAAT,EAAkB,MAAKd,IAAvB;AACA;AACH;AACJ,aApCD;AAqCH;;;;;;AAGL+C,SAAS,WAAT,EAAqB,YAAI;AACrBC,OAAG,QAAH,EAAY,UAAChD,IAAD,EAAQ;AAChB,YAAIiD,SAAO,IAAIlD,IAAJ,CAASC,IAAT,CAAX;AACH,KAFD;AAIH,CALD;;AAOAkD,UAAU,cAAV,EAAyB,YAAI;AAC1BF,OAAG,IAAH,EAAQ,YAAI;AACR,YAAMd,OAAK,kYAAX;AACAtB,gBAAQC,GAAR,CAAY+B,OAAOC,IAAP,CAAYX,IAAZ,EAAiB,KAAjB,EAAwBiB,QAAxB,CAAiC,MAAjC,CAAZ;AACH,KAHD;AAIF,CALD;;AAOAD,UAAU,YAAV,EAAuB,YAAI;AACvBF,OAAG,cAAH,EAAkB,YAAI;AAClB,YAAII,IAAEvE,IAAIwE,gCAAJ,GAAuCF,QAAvC,CAAgD,KAAhD,CAAN;AACAvC,gBAAQC,GAAR,CAAYuC,CAAZ;AACA;AACH,KAJD;AAKH,CAND","file":"flvencoder.test.js","sourcesContent":["\r\nconst flv=require('../../app/flv/flv_encoder');\r\nconst WebSocket = require('ws');\r\nconst _=require('lodash');\r\nconst url=require('url');\r\nconst assert=require('assert');\r\nconst Writable=require('stream').Writable;\r\nconst H264unPack=require('../../app/ipcs/dahua/_dh_h264_unpack');\r\nconst lineReader = require('line-reader');\r\nconst path=require('path');\r\nconst fs = require('fs');\r\n//const H264_2FLV=require('../app/h264/h264_2flv');\r\nconst Cache=require('../../app/servers/cache/to_flv_cache');\r\n\r\nconst wOption = {\r\n    flags: 'w',\r\n    encoding: null,\r\n    fd: null,\r\n    mode: 0o666,\r\n    autoClose: false\r\n};\r\nclass Live{\r\n    constructor(done){\r\n        this._port=3000;\r\n        this._path='/live';\r\n        this._open();\r\n        this._rooms=[];\r\n        this.done=done;\r\n    }\r\n\r\n    _open(){\r\n        let socket=this._server=new WebSocket.Server({\r\n            port:this._port,\r\n            //path:this._path,\r\n            noServer:true,\r\n            verifyClient:(info)=>{\r\n                console.log(info);\r\n                return true;\r\n            }\r\n        });\r\n        socket.on('connection', (ws, req) => {\r\n            const uri = url.parse(req.url, true);\r\n            console.log(`客户端连入，url${req.url}`);\r\n            const roomIDRegExp = new RegExp(`${this._path}\\\\/(\\\\d+)`, 'i');\r\n            const ipcid = _.last(roomIDRegExp.exec(uri.path) || [-1]) - 0;\r\n            const user = uri.query.id;\r\n            ws.on('message', (msg) => {\r\n                console.log(`收到客户端消息${msg}`);\r\n            });\r\n            ws.on('close', (code, reason) => {\r\n                console.log(`Websocket连接关闭code:${code},reason${reason}，ipcid:${ipcid},user:${user}`);\r\n            });\r\n\r\n            if (ws.readyState === WebSocket.OPEN) {\r\n                //let lfv=new H264_2FLV();\r\n                //lfv.open();\r\n                let cache=new Cache();\r\n                cache.addClient((data)=>{\r\n                    ws.send(data);\r\n                });\r\n                const fp=path.resolve(__dirname,`data/dh_h264_cb.txt`);\r\n                //let fw2=fs.createWriteStream(`d:/dhipc_unpacked_2flv.flv`,wOption);\r\n                let unpack=new H264unPack(true);\r\n                unpack.pipe(cache);//.pipe(fw2);\r\n                lineReader.eachLine(fp, function(line, last) {\r\n                    unpack.write(Buffer.from(line,'hex'));\r\n                    //console.log(line);\r\n                    if (last) {\r\n                        unpack.end();\r\n                        //fw2.close();\r\n                    }\r\n                });\r\n                //fw2.on('finsih',this.done);\r\n                cache.on('finsih',this.done);\r\n                //server.on('finsih',done);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\ndescribe('h264_2flv',()=>{\r\n    it('转FLV文件',(done)=>{\r\n        let server=new Live(done);\r\n    });\r\n\r\n});\r\n\r\nxdescribe('flv-script部分',()=>{\r\n   it('参看',()=>{\r\n       const data='00086475726174696f6e000000000000000000000577696474680040760000000000000006686569676874004072000000000000000d766964656f646174617261746500000000000000000000096672616d6572617465004059000000000000000c766964656f636f646563696400401c00000000000000057469746c65020010525453502053657373696f6e2f322e300007656e636f64657202000d4c61766635372e37352e313030000866696c6573697a65000000000000000000000009';\r\n       console.log(Buffer.from(data,'hex').toString('utf8'));\r\n   });\r\n});\r\n\r\nxdescribe('FLVEncoder',()=>{\r\n    it('没关系，固定值获取下看看',()=>{\r\n        let x=flv.VedioTagAVCPackage_EndOfSequence().toString('hex');\r\n        console.log(x);\r\n        //0900000400000000000000020000000000000f\r\n    });\r\n});"]}