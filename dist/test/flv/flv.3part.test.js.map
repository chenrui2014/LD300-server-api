{"version":3,"sources":["../../../src/test/flv/flv.3part.test.js"],"names":["FlvDecoder","require","Decoder","fs","path","describe","it","done","fpath","resolve","fpathwrite","fout","createWriteStream","flags","encoding","fd","mode","autoClose","file","createReadStream","decoder","on","name","data","console","error","audio","pipe","err"],"mappings":";;AAAA,IAAMA,aAAWC,QAAQ,EAAR,EAAYC,OAA7B;AACA,IAAMC,KAAKF,QAAQ,IAAR,CAAX;AACA,IAAOG,OAAKH,QAAQ,MAAR,CAAZ;;AAEAI,SAAS,YAAT,EAAsB,YAAK;AACvBC,OAAG,qBAAH,EAA0B,UAACC,IAAD,EAAU;AAChC,YAAIC,QAAQJ,KAAKK,OAAL,CAAa,wDAAb,CAAZ;AACA,YAAIC,aAAaN,KAAKK,OAAL,CAAa,kEAAb,CAAjB;AACA,YAAIE,OAAOR,GAAGS,iBAAH,CAAqBF,UAArB,EAAiC;AACxCG,mBAAO,GADiC;AAExCC,sBAAU,IAF8B;AAGxCC,gBAAI,IAHoC;AAIxCC,kBAAM,GAJkC;AAKxCC,uBAAW;AAL6B,SAAjC,CAAX;AAOA,YAAIC,OAAOf,GAAGgB,gBAAH,CAAoBX,KAApB,CAAX;AACA,YAAIY,UAAU,IAAIpB,UAAJ,EAAd;AACAoB,gBAAQC,EAAR,CAAW,UAAX,EAAuB,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AACzC;AACAC,oBAAQC,KAAR,CAAc,wBAAd,EAAwCH,IAAxC,EAA8CC,IAA9C;AACH,SAHD;AAIAH,gBAAQC,EAAR,CAAW,OAAX,EAAoB,UAAUK,KAAV,EAAiB;AACjCA,kBAAMC,IAAN,CAAWhB,IAAX;AACH,SAFD;;AAIAS,gBAAQC,EAAR,CAAW,OAAX,EAAoB,UAAUO,GAAV,EAAe;AAC/BrB,iBAAKqB,GAAL;AACH,SAFD;;AAIAR,gBAAQC,EAAR,CAAW,QAAX,EAAqB,YAAM;AACvBd;AACH,SAFD;;AAIAW,aAAKS,IAAL,CAAUP,OAAV;AACH,KA7BD;AA+BH,CAhCD","file":"flv.3part.test.js","sourcesContent":["const FlvDecoder=require('').Decoder;\r\nconst fs = require('fs');\r\nconst  path=require('path');\r\n\r\ndescribe('acc<==>flv',()=> {\r\n    it('将16000-acc从flv中提取出来', (done) => {\r\n        let fpath = path.resolve('./test/data/acc2flv/audio_flv_onvif_aac_16000.test.flv');\r\n        let fpathwrite = path.resolve('./test/data/acc2flv/audio_flv_onvif_aac_16000_2aac_adts.test.aac');\r\n        let fout = fs.createWriteStream(fpathwrite, {\r\n            flags: 'w',\r\n            encoding: null,\r\n            fd: null,\r\n            mode: 0o666,\r\n            autoClose: true\r\n        });\r\n        let file = fs.createReadStream(fpath);\r\n        let decoder = new FlvDecoder();\r\n        decoder.on('metadata', function (name, data) {\r\n            // \"name\" is a String, \"data\" is an Object/Array\r\n            console.error('\"metadata\" event %j %j', name, data);\r\n        });\r\n        decoder.on('audio', function (audio) {\r\n            audio.pipe(fout);\r\n        });\r\n\r\n        decoder.on('error', function (err) {\r\n            done(err);\r\n        });\r\n\r\n        decoder.on('finish', () => {\r\n            done();\r\n        });\r\n\r\n        file.pipe(decoder);\r\n    });\r\n\r\n});"]}