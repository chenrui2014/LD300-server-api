{"version":3,"sources":["../../../src/test/servers/live_server.test.js"],"names":["Live","require","http","_","DHIPC","ipcOptions","expect","fs","WebSocket","port","describe","server","ipc","live","before","createServer","listen","autoClose","after","close","it","done","_play","then","data","equal","_cache","path","id","_stopPlay","catch","x","on","length","exists","arrchive","_file","to","setTimeout","stopArrchive","state","statSync","size","url","openWSS","ws","Ping","pong","removeAllListeners","FLVVerify","removeListener","indexOf","Buffer","from"],"mappings":"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","file":"live_server.test.js","sourcesContent":["const Live=require('../../app/servers/ipc_live_server');\r\nconst http = require('http');\r\nconst _=require('lodash');\r\nconst DHIPC=require('../../app/ipcs/dahua/dh_ipc');\r\nconst ipcOptions=require('../data/dhipc.json');\r\nconst expect=require('chai').expect;\r\nconst fs=require('fs');\r\nconst WebSocket=require('ws');\r\nconst port=3001;\r\n\r\ndescribe('摄像头直播流服务测试,请先打开摄像头98',()=>{\r\n\r\n    let server=null,ipc=null,live=null;\r\n    before(()=>{\r\n        server=http.createServer();\r\n        server.listen(port);\r\n        ipc=new DHIPC(ipcOptions);\r\n        live=new Live(server,ipc,'',{autoClose:true});\r\n    });\r\n\r\n    after(()=>{\r\n       server.close();\r\n    });\r\n\r\n    it('启动摄像头视频输出',(done)=>{\r\n        live._play().then((data)=>{\r\n            expect(!data).equal(false);\r\n            expect(!live._cache).equal(false);\r\n            expect(live.path).equal(`/live/${ipc.id}`);\r\n            live._stopPlay();\r\n            expect(!live._cache).equal(true);\r\n            done();\r\n        }).catch(done);\r\n    });\r\n\r\n    it('流保存成文件,并自动关闭流',(done)=>{\r\n        let x=0;\r\n        live.on('file',(data)=>{\r\n            x++;\r\n            expect(data.path.length>0).equal(true);\r\n            fs.exists(data.path, (exists) => {\r\n                expect(exists).equal(true);\r\n            });\r\n        });\r\n        live.on('fileClosed',(data)=>{\r\n            x++;\r\n            expect(data.path.length>0).equal(true);\r\n            fs.exists(data.path, (exists) => {\r\n                expect(exists).equal(true);\r\n            });\r\n        });\r\n        live.on('close',(data)=>{\r\n            x++;\r\n            expect(data.id).equal(ipc.id);\r\n            expect(data.path).equal(`/live/${ipc.id}`);\r\n        });\r\n        live.arrchive(1).then((path)=>{\r\n            expect(!live._file).equal(false);\r\n            expect(path.length>0).to.equal(true);\r\n            fs.exists(path, (exists) => {\r\n                expect(exists).equal(true);\r\n            });\r\n            setTimeout(()=>{\r\n                live.stopArrchive();\r\n                expect(!live._file).equal(true);\r\n                let state=fs.statSync(path);\r\n               expect(state.size>0).equal(true);\r\n               expect(x).equal(3);\r\n               done();\r\n            },2000);\r\n        }).catch(done);\r\n    });\r\n\r\n    it('启动websocket', async (done)=>{\r\n        let url=`ws://localhost:${port}${live.path}`;\r\n        let x=0;\r\n        live.on('open',()=>{\r\n            expect(x++).equal(0);\r\n        });\r\n        await live.openWSS().catch(done);\r\n        let ws=new WebSocket(url);\r\n        let Ping=(data)=>{\r\n            expect(!data).equal(false);\r\n            ws.pong('',false,true);\r\n            expect(x++).equal(1);\r\n            ws.close();\r\n        };\r\n        ws.on('ping',Ping);\r\n        ws.on('close',()=>{\r\n            ws.removeAllListeners();\r\n        });\r\n        live.on('close',()=>{\r\n            done();\r\n        });\r\n        let FLVVerify=(data)=>{\r\n            ws.removeListener('message',FLVVerify);\r\n            expect(data.indexOf(Buffer.from(\"FLV\"))).equal(0);\r\n        };\r\n        ws.on('message',FLVVerify);\r\n    });\r\n});"]}