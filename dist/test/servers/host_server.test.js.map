{"version":3,"sources":["../../../src/test/servers/host_server.test.js"],"names":["port","getUrl","require","db","file","setHostData","setMData","setIpcData","_","config","get","Server","expect","vHost","Host","SerialPort","master","IPCServer","Factory","describe","dbInstance","before","start","it","done","server","id","then","testHostStart","forEach","hosts","host","instance","isConnected","equal","stop","setTimeout","catch","ipc_server","_arrchive","_stopArrchive","_alarm","_stopAlarm","_moveToPoint","x","y","z","preset","loopID","portOptions","connect","after","disConnect","state","States","Unknown","on","Events","StateChanged","data","type","stateOld","stateNew","Normal","clearInterval","setInterval","write","nomalCmd","httpport","evt","Alarm","monintors","length","AlarmCmd","getIPC","ipc","onVideo","removeListener","err","Error","errorType","Errors","IPCConnectError","vh","clearAlarm"],"mappings":"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","file":"host_server.test.js","sourcesContent":["const {db,file}=require('../init');\r\nlet {setHostData,setMData,setIpcData}=require('../modify_config');\r\nlet _=require('lodash');\r\nconst config=require('../../config/config');\r\nconst port=_.get(config,'ipc_server.port');\r\nlet Server=require('../../servers/host_server');\r\nlet expect=require('chai').expect;\r\nlet vHost=require('../../host/virtual_host');\r\nlet Host=require('../../host/host');\r\nconst SerialPort=require('../../serialport/serialport');\r\n//const IPCServer=require('../../servers/ipc_server_child').server;\r\n//const M=require('../../servers/ipc_mointors');\r\nconst master=require('../../servers/ipc_server_master');\r\nconst IPCServer=new master();\r\nconst Factory=require('../../servers/ipc_factory');\r\n\r\n/*let port=0;\r\nasync function getUrl(){\r\n    if(port) return port;\r\n    let a=IPCServer.address();\r\n    if(a&&'port' in a) return port=a.port;\r\n    IPCServer.on('listening',()=>{\r\n        return port=IPCServer.address().port;\r\n    });\r\n}*/\r\n\r\nasync function getUrl() {\r\n    return port;\r\n}\r\n\r\ndescribe('主机服务测试用例',()=>{\r\n    let dbInstance=null;\r\n    before(async ()=>{\r\n        //打开注释启动数据库取数据\r\n        dbInstance=await file();\r\n        await IPCServer.start();\r\n    });\r\n\r\n    it('启动关闭',(done)=>{\r\n        let server=new Server();\r\n        setHostData([{id:1,port:'\\\\\\\\.\\\\COM2'},{id:1,port:'\\\\\\\\.\\\\COM4'}]);\r\n        server.start().then(()=>{\r\n            let testHostStart=()=>{\r\n                _.forEach(server.hosts,(host)=>{\r\n                    expect(host.instance.isConnected).equal(true);\r\n                });\r\n                server.stop();\r\n                done();\r\n            };\r\n            setTimeout(testHostStart,200);\r\n        }).catch(done);\r\n    });\r\n\r\n\r\n    it('报警，启动并停止视频录像',(done)=>{\r\n        getUrl().then((port)=>{\r\n            let server=new Server({ipc_server:{\r\n                    port:port\r\n                }});\r\n            server._arrchive(6,1).then(()=>{\r\n                setTimeout(()=>{\r\n                    server._stopArrchive(6,1).then(done).catch(done);\r\n                },1800);\r\n            }).catch(done);\r\n        });\r\n    });\r\n\r\n    it('拉起警报再关闭',(done)=>{\r\n        getUrl().then((port)=>{\r\n            let server=new Server({ipc_server:{\r\n                    port:port\r\n                }});\r\n            server._alarm(1,1).then(()=>{\r\n                setTimeout(()=>{\r\n                    server._stopAlarm(1,1).then(done).catch(done);\r\n                },1800);\r\n            }).catch(done);\r\n        });\r\n    });\r\n\r\n    it('移动ptz到xyz',(done)=>{\r\n        getUrl().then((port)=>{\r\n            let server=new Server({ipc_server:{\r\n                    port:port\r\n                }});\r\n            server._moveToPoint(1,{x:1,y:1,z:1,preset:null},1).then(done).catch(done);\r\n        });\r\n    });\r\n\r\n    describe('服务状态事件测试',()=>{\r\n        let port;\r\n        let loopID=0;\r\n        before((done)=>{\r\n            port=new SerialPort(1,vHost.portOptions);\r\n            port.connect().then(done).catch(done);\r\n        });\r\n        after((done)=>{\r\n            port.disConnect().then(done).catch(done);\r\n        });\r\n        it('状态改变测试unknown->normal',(done)=>{\r\n            let server=new Server();\r\n            let state=Host.States.Unknown;\r\n            server.on(Host.Events.StateChanged,(data)=>{\r\n                expect(data.type).equal(Host.Events.StateChanged);\r\n                expect('id' in data).equal(true);\r\n                expect('hid' in data).equal(true);\r\n                expect(data.stateOld===state).equal(true);\r\n                expect(data.stateNew===Host.States.Normal).equal(true);\r\n                server.stop();\r\n                clearInterval(loopID);\r\n                setTimeout(done,200);\r\n            });\r\n            setHostData([{id:1,port:'\\\\\\\\.\\\\COM2'}]);\r\n            server.start().then(()=>{\r\n                loopID=setInterval(()=>{\r\n                    port.write(vHost.nomalCmd);\r\n                },200);\r\n            }).catch(done);\r\n        });\r\n\r\n        it('报警,调摄像头',(done)=>{\r\n            getUrl().then((httpport)=> {\r\n                let server = new Server({\r\n                    ipc_server: {\r\n                        port: httpport\r\n                    }\r\n                });\r\n                server.on(Host.Events.StateChanged,(evt)=>{\r\n                    expect(evt.type).equal(Host.Events.StateChanged);\r\n                    expect(evt.stateNew).equal(Host.States.Alarm);\r\n                    expect(evt.monintors.length).equal(1);\r\n                    server.stop();\r\n                    clearInterval(loopID);\r\n                    done();\r\n                });\r\n                setHostData([{id:1,port:'\\\\\\\\.\\\\COM2'}]);\r\n                server.start().then(()=>{\r\n                    //server.hosts[0].m=mt;\r\n                    loopID=setInterval(()=>{//position 82 有摄像头，2000没有\r\n                        port.write(vHost.AlarmCmd(82));\r\n                    },200);\r\n                }).catch(done);\r\n\r\n            });\r\n        });\r\n\r\n        it('报警,找不到调摄像头',(done)=>{\r\n            getUrl().then((httpport)=> {\r\n                let server = new Server({\r\n                    ipc_server: {\r\n                        port: httpport\r\n                    }\r\n                });\r\n                server.on(Host.Events.StateChanged,(evt)=>{\r\n                    expect(evt.type).equal(Host.Events.StateChanged);\r\n                    expect(evt.stateNew).equal(Host.States.Alarm);\r\n                    expect(evt.monintors.length).equal(0);\r\n                    server.stop();\r\n                    clearInterval(loopID);\r\n                    done();\r\n                });\r\n                setHostData([{id:1,port:'\\\\\\\\.\\\\COM2'}]);\r\n                server.start().then(()=>{\r\n                    //server.hosts[0].m=mt;\r\n                    loopID=setInterval(()=>{\r\n                        port.write(vHost.AlarmCmd(2000));\r\n                    },200);\r\n                }).catch(done);\r\n\r\n            });\r\n        });\r\n\r\n        it('调用摄像头机-枪机',(done)=>{\r\n            getUrl().then(async (httpport)=> {\r\n                let server = new Server({\r\n                    ipc_server: {\r\n                        port: httpport\r\n                    }\r\n                });\r\n                let ipc= await Factory.getIPC(1);\r\n                let onVideo=()=>{\r\n                    ipc.removeListener('video',onVideo);\r\n                    clearInterval(loopID);\r\n                    setTimeout(()=>{\r\n                        port.write(vHost.nomalCmd);\r\n                    },1800);\r\n                };\r\n\r\n                ipc.on('video',onVideo);\r\n                setHostData([{id:1,port:'\\\\\\\\.\\\\COM2'}]);\r\n                server.start().then(()=>{\r\n                    server.hosts[0].instance.on(Host.Events.StateChanged,(data)=>{\r\n                        if(data.stateNew===Host.States.Normal){\r\n                            server.stop();\r\n                            done();\r\n                        }\r\n                    });\r\n                    loopID=setInterval(()=>{\r\n                        port.write(vHost.AlarmCmd(84));\r\n                    },200);\r\n                });\r\n            });\r\n        });\r\n\r\n        it('调用离线摄像头',(done)=>{\r\n            getUrl().then((httpport)=> {\r\n                let server = new Server({\r\n                    ipc_server: {\r\n                        port: httpport\r\n                    }\r\n                });\r\n                setHostData([{id:1,port:'\\\\\\\\.\\\\COM2'}]);\r\n                server.start().then(()=>{\r\n                    server.on('error',(err)=>{\r\n                        clearInterval(loopID);\r\n                        expect(err.type).equal(Server.Events.Error);\r\n                        expect(err.errorType).equal(Server.Errors.IPCConnectError);\r\n                        server.stop();\r\n                        done();\r\n                    });\r\n                    loopID=setInterval(()=>{\r\n                        port.write(vHost.AlarmCmd(784));\r\n                    },200);\r\n                }).catch(done);\r\n\r\n            });\r\n        });\r\n    });\r\n\r\n    describe('消除警报',()=>{\r\n        let vh=null;\r\n        before((done)=>{\r\n            vh=new vHost(1);\r\n            vh.start().then(done).catch(done);\r\n        });\r\n        it('启动一台主机',(done)=>{\r\n            let server = new Server();\r\n            setHostData([{id:1,port:'\\\\\\\\.\\\\COM2'}]);\r\n            server.start().then(()=>{\r\n                server.clearAlarm(1).catch(done);\r\n            }).catch(done);\r\n            vh.on('reset',(data)=>{\r\n                expect(data.port).equal(1);\r\n                server.stop();\r\n                done();\r\n            });\r\n        });\r\n        after((done)=>{\r\n            vh.stop().then(done).catch(done);\r\n        });\r\n    });\r\n});"]}