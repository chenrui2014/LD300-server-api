{"version":3,"sources":["../../../src/test/servers/ipc_server_master.test.js"],"names":["path","options","hostname","port","method","headers","Promise","resolve","req","http","request","res","setEncoding","on","data","JSON","parse","end","send","require","db","file","IPCDispatch","expect","describe","dbInstance","server","before","start","it"],"mappings":";;;;;;;0EAOA,iBAAoBA,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,+BADV,GACoB;AACZC,sCAAU,WADE;AAEZC,kCAAMA,IAFM;AAGZH,kCAAMA,IAHM;AAIZI,oCAAQ,KAJI;AAKZC,qCAAS;AACL,gDAAgB;AADX;AALG,yBADpB;AAAA,yDAUW,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAW;AAC1B,gCAAMC,MAAMC,KAAKC,OAAL,CAAaT,OAAb,EAAqB,UAACU,GAAD,EAAO;AACpCA,oCAAIC,WAAJ,CAAgB,MAAhB;AACAD,oCAAIE,EAAJ,CAAO,MAAP,EAAe,UAACC,IAAD,EAAU;AACrBP,4CAAQQ,KAAKC,KAAL,CAAWF,IAAX,CAAR;AACH,iCAFD;AAGH,6BALW,CAAZ;AAMAN,gCAAIS,GAAJ;AACH,yBARM,CAVX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,I;;;;;;;;;eAPCC,QAAQ,SAAR,C;IAATC,E,YAAAA,E;IAAGC,I,YAAAA,I;;AACV,IAAMZ,OAAOU,QAAQ,MAAR,CAAb;AACA,IAAMG,cAAYH,QAAQ,iCAAR,CAAlB;AACA,IAAMI,SAAOJ,QAAQ,MAAR,EAAgBI,MAA7B;;AAEA,IAAMpB,OAAK,IAAX;;AAuBAqB,SAAS,WAAT,EAAqB,YAAI;AACrB,QAAIC,aAAW,IAAf;AACA,QAAIC,SAAO,IAAIJ,WAAJ,EAAX;AACAK,sEAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEcN,MAFd;;AAAA;AAEHI,kCAFG;AAAA;AAAA,+BAGGC,OAAOE,KAAP,CAAa,EAACzB,UAAD,EAAb,CAHH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AAKA0B,OAAG,aAAH,6DAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACPX,KAAK,aAAL,CADO;;AAAA;AAAA;AAAA,+BAEPA,KAAK,aAAL,CAFO;;AAAA;AAAA;AAAA,+BAGPA,KAAK,aAAL,CAHO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjB;AAKAW,OAAG,YAAH,6DAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACNX,KAAK,aAAL,CADM;;AAAA;AAAA;AAAA,+BAENA,KAAK,aAAL,CAFM;;AAAA;AAAA;AAAA,+BAGNA,KAAK,aAAL,CAHM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhB;AAKH,CAlBD","file":"ipc_server_master.test.js","sourcesContent":["const {db,file}=require('../init');\r\nconst http = require('http');\r\nconst IPCDispatch=require('../../servers/ipc_server_master');\r\nconst expect=require('chai').expect;\r\n\r\nconst port=3000;\r\n\r\nasync function send(path) {\r\n    const options = {\r\n        hostname: 'localhost',\r\n        port: port,\r\n        path: path,\r\n        method: 'GET',\r\n        headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded'\r\n        }\r\n    };\r\n    return new Promise((resolve)=>{\r\n        const req = http.request(options,(res)=>{\r\n            res.setEncoding('utf8');\r\n            res.on('data', (data) => {\r\n                resolve(JSON.parse(data));\r\n            });\r\n        });\r\n        req.end();\r\n    });\r\n}\r\n\r\ndescribe('ipc分发服务测试',()=>{\r\n    let dbInstance=null;\r\n    let server=new IPCDispatch();\r\n    before(async ()=>{\r\n        //打开注释启动数据库取数据\r\n        dbInstance=await file();\r\n        await server.start({port});\r\n    });\r\n    it('测试同一个ipc的分发',async ()=>{\r\n        await send('/ipc/6/live');\r\n        await send('/ipc/6/live');\r\n        await send('/ipc/6/live');\r\n    });\r\n    it('测试不同ipc的分发',async ()=>{\r\n        await send('/ipc/6/live');\r\n        await send('/ipc/6/live');\r\n        await send('/ipc/1/live');\r\n    })\r\n});"]}