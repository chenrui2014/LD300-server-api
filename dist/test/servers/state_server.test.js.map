{"version":3,"sources":["../../../src/test/servers/state_server.test.js"],"names":["StateServer","require","Server","http","expect","vHost","describe","server","before","done","start","id","port","then","catch","after","stop","it","hserver","createServer","req","res","writeHead","end","listen","s","err","code","equal","vh","Promise","all","send","CMD","alarm","on","data","setTimeout","clearAlarm"],"mappings":"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","file":"state_server.test.js","sourcesContent":["const StateServer=require('../../app/servers/host_state_server');\r\nconst Server=require('../../app/servers/host_server');\r\nconst http=require('http');\r\nconst expect=require('chai').expect;\r\nconst vHost=require('../../host/virtual_host');\r\n\r\ndescribe('状态服务测试',()=>{\r\n    let server;\r\n    before((done)=>{\r\n        server = new Server();\r\n        server.start([{id:1,port:'\\\\\\\\.\\\\COM2'}]).then(()=>{\r\n            done();\r\n        }).catch(done);\r\n    });\r\n    after(()=>{\r\n       server.stop();\r\n    });\r\n    it('端口被暂用，启动失败',(done)=>{\r\n        const hserver = http.createServer((req, res) => {\r\n            res.writeHead(200, { 'Content-Type': 'text/plain' });\r\n            res.end('okay');\r\n        });\r\n        hserver.listen('3001',()=>{\r\n            let s=new StateServer();\r\n            s.start(server).catch((err)=>{\r\n                expect(err.code).equal('EADDRINUSE');\r\n                done();\r\n            });\r\n        });\r\n    });\r\n    it('启用并停止',(done)=>{\r\n        let s=new StateServer();\r\n        s.start(server).then(()=>{\r\n            s.stop();\r\n            const hserver = http.createServer((req, res) => {\r\n                res.writeHead(200, { 'Content-Type': 'text/plain' });\r\n                res.end('okay');\r\n            });\r\n            hserver.listen('3001',()=> {\r\n                done();\r\n            });\r\n        }).catch(done);\r\n    });\r\n\r\n    describe('启动状态服务，提供前台测试',()=>{\r\n        let vh=null,s=null;\r\n        before((done)=>{\r\n            vh=new vHost(1);\r\n            s=new StateServer();\r\n            Promise.all([vh.start(),s.start(server)]).then(()=>{\r\n                done();\r\n            }).catch(()=>{\r\n                done(false);\r\n            });\r\n        });\r\n        after(()=>{\r\n            vh.stop();\r\n            s.stop();\r\n        });\r\n        it('先报错，然后还原',(done)=>{\r\n            vh.send(vHost.CMD.alarm,10);\r\n            vh.on('reset',(data)=>{\r\n                expect(data.port).equal(1);\r\n                setTimeout(done,9000);\r\n            });\r\n            setTimeout(()=>{\r\n                server.clearAlarm(1).catch(done);\r\n            },9000);\r\n        });\r\n    });\r\n});"]}