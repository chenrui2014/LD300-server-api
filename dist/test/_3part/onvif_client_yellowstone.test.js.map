{"version":3,"sources":["../../../src/test/_3part/onvif_client_yellowstone.test.js"],"names":["RtspClient","require","H264Transport","url","pwd","fs","wOption","flags","encoding","fd","mode","autoClose","describe","it","done","client","connect","keepAlive","then","details","console","log","format","play","on","channel","data","packet","id","timestamp","marker","type","rtcpPacket","packetType","prefix","setTimeout","close","fw","createWriteStream","fw2","h264"],"mappings":"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","file":"onvif_client_yellowstone.test.js","sourcesContent":["//rtsp://admin:admin@192.168.1.98:554/cam/realmonitor?channel=1&subtype=0&unicast=true&proto=Onvif\r\n\r\nconst RtspClient=require('../../_3part/yellowstone/lib/index').RtspClient;\r\nconst H264Transport=require('yellowstone').H264Transport;\r\n//const url='rtsp://192.168.1.98:554/cam/realmonitor?channel=1&subtype=1&unicast=true&proto=Onvif';\r\nconst url='rtsp://192.168.1.106:554/cam/realmonitor?channel=1&subtype=1&unicast=true&proto=Onvif';\r\nconst pwd='admin';\r\nconst fs=require('fs');\r\n\r\nconst wOption = {\r\n    flags: 'w',\r\n    encoding: null,\r\n    fd: null,\r\n    mode: 0o666,\r\n    autoClose: true\r\n};\r\n\r\ndescribe('测试RTSP_client',()=>{\r\n    it('心跳测试',(done)=>{\r\n        const client = new RtspClient('admin',pwd);\r\n        client.connect(url, { keepAlive: true }).then((details) => {\r\n            console.log('Connected. Video format is', details.format);\r\n/*            setInterval(()=>{\r\n                client.request(\"OPTIONS\");\r\n            },1000);*/\r\n            client.play();\r\n        });\r\n\r\n        // data == packet.payload, just a small convenient thing\r\n// data is for RTP packets\r\n        client.on('data', function(channel, data, packet) {\r\n            console.log('RTP Packet', 'ID=' + packet.id, 'TS=' + packet.timestamp, 'M=' + packet.marker,'Type='+packet.type);\r\n            //console.log(data.toString('hex'));\r\n        });\r\n\r\n        client.on('controlData', function(channel, rtcpPacket) {\r\n            console.log('RTCP Control Packet', 'TS=' + rtcpPacket.timestamp, 'PT=' + rtcpPacket.packetType);\r\n        });\r\n\r\n        client.on('log', function(data, prefix) {\r\n            console.log(prefix + ': ' + data);\r\n        });\r\n\r\n        setTimeout(()=>{\r\n            client.close(true);\r\n            done();\r\n        },100000);\r\n    });\r\n\r\n    it('取回包',(done)=>{\r\n        const client = new RtspClient('admin',pwd);\r\n\r\n        let fw=fs.createWriteStream('d:/yellowstone.txt',wOption);\r\n        let fw2=fs.createWriteStream('d:/yellowstone.dat',wOption);\r\n\r\n// details is a plain Object that includes...\r\n//   format - string\r\n//   mediaSource - media portion of the SDP\r\n//   transport RTP and RTCP channels\r\n\r\n        client.connect(url, { keepAlive: true }).then((details) => {\r\n            console.log('Connected. Video format is', details.format);\r\n\r\n            // Open the output file\r\n            if (details.format==='H264') {\r\n                const h264 = new H264Transport(client, fs.createWriteStream(\"d:/bigbuckbunny.dat\"), details);\r\n            }\r\n            console.log(details);\r\n\r\n            client.play();\r\n        });\r\n\r\n// data == packet.payload, just a small convenient thing\r\n// data is for RTP packets\r\n        client.on('data', function(channel, data, packet) {\r\n            console.log('RTP Packet', 'ID=' + packet.id, 'TS=' + packet.timestamp, 'M=' + packet.marker);\r\n/*            if(packet.marker!==1) return;\r\n            fw.write(packet.payload.toString('hex')+'\\r\\n');\r\n            fw2.write(packet.payload);*/\r\n        });\r\n\r\n// control data is for RTCP packets\r\n        client.on('controlData', function(channel, rtcpPacket) {\r\n            console.log('RTCP Control Packet', 'TS=' + rtcpPacket.timestamp, 'PT=' + rtcpPacket.packetType);\r\n        });\r\n\r\n// allows you to optionally allow for RTSP logging\r\n// also allows for you to hook this into your own logging system easily\r\n        client.on('log', function(data, prefix) {\r\n            console.log(prefix + ': ' + data);\r\n        });\r\n\r\n        setTimeout(()=>{\r\n            fw.close();\r\n            fw2.close();\r\n            client.close(true);\r\n            done();\r\n        },10000);\r\n    });\r\n});"]}