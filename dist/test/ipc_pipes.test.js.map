{"version":3,"sources":["../../src/test/ipc_pipes.test.js"],"names":["spawn","require","ONVIF","cfg","fs","expect","Cache","CaptureTransform","cfg2","DHIPC","Stream","path","wOption","flags","encoding","fd","mode","autoClose","describe","xit","done","o","connect","then","cache","Math","floor","bitrate","fw","createWriteStream","pipe","on","console","log","setTimeout","unpipe","end","catch","open","pic","cap","file","resolve","__dirname","_child","createReadStream","err","error","stdin","e","stderr","toString","data","stdout","it"],"mappings":"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","file":"ipc_pipes.test.js","sourcesContent":["/**\r\n * Created by Luky on 2017/7/19.\r\n */\r\nconst spawn = require('child_process').spawn;\r\nconst ONVIF=require('../app/ipcs/onvif/onvif_ipc');\r\nconst cfg=require('./data/dhipc_onvif.json');\r\nconst fs = require('fs');\r\nconst expect = require('chai').expect;\r\nconst Cache=require('../app/servers/cache/_valve_pipe');\r\nconst CaptureTransform=require('../app/_ffmpeg/persistence_ffmpeg_pipe');\r\nconst cfg2=require('./data/dhipc.json');\r\nconst DHIPC=require('../app/ipcs/dahua/dh_ipc');\r\nconst Stream=require('../app/_ffmpeg/stream_ffmpeg_pipe');\r\nconst path=require('path');\r\n\r\nconst wOption = {\r\n    flags: 'w',\r\n    encoding: null,\r\n    fd: null,\r\n    mode: 0o666,\r\n    autoClose: true\r\n};\r\n\r\ndescribe('管道测试',()=>{\r\n    xit('阀门关闭测试缓存量',(done)=>{\r\n        let o=new ONVIF(cfg);\r\n        o.connect().then(()=>{\r\n            let cache=new Cache(3,Math.floor(o.bitrate*3));\r\n            let fw=fs.createWriteStream('d:/onvif_cache1.flv',wOption);\r\n            o.pipe(cache).pipe(fw);\r\n            fw.on('close',()=>{\r\n                console.log('文件输出成功');\r\n                done();\r\n            });\r\n            setTimeout(()=>{\r\n                o.unpipe(cache);\r\n                cache.end();\r\n            },20000);\r\n        }).catch(done);\r\n\r\n    });\r\n\r\n    xit('阀门打开缓存输出',(done)=>{\r\n        let o=new ONVIF(cfg);\r\n        o.connect().then(()=>{\r\n            let cache=new Cache(1,Math.floor(o.bitrate));\r\n            let fw=fs.createWriteStream('d:/onvif_cache2.flv',wOption);\r\n            o.pipe(cache).pipe(fw);\r\n            fw.on('close',()=>{\r\n                console.log('文件输出成功');\r\n                done();\r\n            });\r\n            setTimeout(()=>{\r\n                console.log('打开阀门，输出缓存');\r\n                cache.open();\r\n            },5000);\r\n            setTimeout(()=>{\r\n                o.unpipe(cache);\r\n                cache.end();\r\n            },10000);\r\n        }).catch(done);\r\n    });\r\n\r\n    function pic(o,done){\r\n        o.connect().then(()=>{\r\n            let cache=new Cache(3,Math.floor(o.bitrate*3),true);\r\n            let cap=new CaptureTransform();\r\n            o.pipe(cache).pipe(cap,{end:false});\r\n            cap.on('finish',done);\r\n            setTimeout(()=>{\r\n                o.unpipe(cache);\r\n                cache.end();\r\n                cache.unpipe(cap);\r\n                cap.end();\r\n            },30000);\r\n        }).catch(done);\r\n    }\r\n\r\n    xit('流转图片输出',(done)=>{\r\n        pic(new ONVIF(cfg),done);\r\n    });\r\n\r\n    xit('测试ffmpeg内存流',(done)=>{\r\n        const file=path.resolve(__dirname,'./data/1.flv');\r\n/*        let s=new Stream({});\r\n        s._open();*/\r\n        let cap=new CaptureTransform();\r\n        let _child=spawn('ffmpeg',[\r\n            '-loglevel', 'error'\r\n            ,'-i','pipe:0'\r\n            ,'-c:v','copy'\r\n            ,'-c:a','copy'\r\n            ,'-f','flv'\r\n            ,'-updatefirst', '1'\r\n            ,'-'\r\n        ]);\r\n        let fd=fs.createReadStream(file,{\r\n            flags: 'r',\r\n            encoding: null,\r\n            fd: null,\r\n            mode: 0o666,\r\n            autoClose: false\r\n        });\r\n        _child.on('error',(err)=>{\r\n            console.error(err);\r\n        });\r\n        _child.stdin.on('error',(e)=>{\r\n            console.error(e);\r\n        });\r\n        _child.stderr.on('data',(e)=>{\r\n            console.error(e.toString('utf8'));\r\n        });\r\n        _child.stdin.on('data',(data)=>{\r\n            console.log(data);\r\n        });\r\n        _child.stdout.pipe(cap);\r\n        fd.pipe(_child.stdin);\r\n        cap.on('finish',done);\r\n        setTimeout(()=>{\r\n            fd;\r\n            _child;\r\n            done();\r\n        },3000);\r\n    });\r\n\r\n    it('大华sdk直连测试',(done)=>{\r\n        pic(new DHIPC(cfg2),done);\r\n    });\r\n});"]}