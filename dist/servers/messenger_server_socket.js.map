{"version":3,"sources":["../../src/servers/messenger_server_socket.js"],"names":["config","global","server_config","require","_","Server","Parser","net","CmdFormatter","assert","CmdSplitter","cb","_cb","_cache","_expected","data","length","readUInt8","Buffer","concat","slice","SocketServer","hostServer","port","cmdFormatter","_port","get","_server","_clients","Set","_index","_cmdFormater","Error","client","cmd","rec","formatReceived","type","CmdReceived","clear","_onReceiveMsgIntrusionAlert","hid","log","toString","translation","address","warn","evt","formatHostStateChanged","_nextIndex","forEach","write","original","each","state","stop","Promise","resolve","reject","server","createServer","socket","setKeepAlive","setNoDelay","_cmdSplitter","_onReceiveCmd","bind","add","ip","count","size","emit","Events","newClient","on","had_error","delete","removeAllListeners","append","err","error","innerError","code","listen","close","exports","module"],"mappings":"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","file":"messenger_server_socket.js","sourcesContent":["/**\r\n * Created by Luky on 2017/10/19\r\n */\r\n\r\nconst config=global.server_config||require('../config/config');\r\nconst _=require('lodash');\r\nconst Server=require('./messenger_server');\r\nconst {Parser}=require('../log/log');\r\nconst net = require('net');\r\nconst CmdFormatter=require('./interfaces/cmd_formatter');\r\nconst assert=require('assert');\r\n\r\nclass CmdSplitter{\r\n    constructor(cb){\r\n        this._cb=cb;\r\n        this._cache=null;\r\n        this._expected=0;\r\n    }\r\n\r\n    append(data)\r\n    {\r\n        do{\r\n            if(!data.length)return;\r\n            if(this._expected===0){\r\n                this._expected=data.readUInt8(0);\r\n            }\r\n            if(this._expected>data.length){\r\n                if(null===this._cache) this._cache=data;\r\n                else this._cache=Buffer.concat([this._cache,data]);\r\n                this._expected-=data.length;\r\n                return;\r\n            }\r\n            if(this._cache===null){\r\n                this._cb(data.slice(0,this._expected));\r\n                data=data.slice(this._expected);\r\n                this._expected=0;\r\n            }\r\n            else{\r\n                this._cb(Buffer.concat(this._cache,data.slice(0,this._expected)));\r\n                this._cache=null;\r\n                data=data.slice(this._expected);\r\n                this._expected=0;\r\n            }\r\n        }while(true);\r\n    }\r\n}\r\n\r\nclass SocketServer extends Server\r\n{\r\n    constructor(hostServer,port,cmdFormatter){\r\n        super(hostServer);\r\n        this._port=port||_.get(config,'state_server.port',3001);\r\n        this._server=null;\r\n        this._clients=new Set();\r\n        this._index=0;\r\n        this._cmdFormater=cmdFormatter;\r\n        if(!(cmdFormatter instanceof CmdFormatter)) throw new Error('未找到集成接口,服务无法正常运行');\r\n        Parser(this,'server_socket.js',{port:this._port});\r\n    }\r\n\r\n    get _nextIndex(){\r\n        return this._index=((++this._index)&0xfff);\r\n    }\r\n\r\n    _onReceiveCmd(client,cmd){\r\n        let rec=this._cmdFormater.formatReceived(cmd);\r\n        switch(rec.type){\r\n            case CmdFormatter.CmdReceived.clear:\r\n                this._onReceiveMsgIntrusionAlert(rec.hid);\r\n                this.log('收到复位命令',{cmd:cmd.toString('hex'),translation:rec,client:client.address()});\r\n                break;\r\n            default://CmdFormatter.CmdReceived.unKnown:\r\n                this.warn('收到未知命令',{cmd:cmd.toString('hex'),client:client.address()});\r\n                break;\r\n        }\r\n    }\r\n\r\n    notifyHostStateChanged(evt){\r\n        let cmd=this._cmdFormater.formatHostStateChanged(this._nextIndex,evt);\r\n        this._clients.forEach((client)=>{\r\n            if(cmd)client.write(cmd,()=>{\r\n                this.log('命令已发出',{cmd:cmd.toString('hex'),original:evt,client:client.address()})\r\n            });\r\n        });\r\n    }\r\n\r\n    notifyHostsState(client,data){\r\n        //hid,type,stateNew,position\r\n        _.each(data,(state)=>{\r\n            let cmd=this._cmdFormater.formatHostStateChanged(this._nextIndex,state);\r\n            if(cmd)client.write(cmd,()=>{\r\n                this.log('命令已发出',{cmd:cmd.toString('hex'),original:state,client:client.address()})\r\n            });\r\n        });\r\n    }\r\n\r\n    start(){\r\n        this.stop();\r\n        return new Promise((resolve,reject)=>{\r\n\r\n            let server =net.createServer((socket) =>{ //'connection' listener\r\n                socket.setKeepAlive(true,300000);\r\n                socket.setNoDelay(true);\r\n                socket._cmdSplitter=new CmdSplitter(this._onReceiveCmd.bind(this,socket));\r\n                this._clients.add(socket);\r\n                let ip=socket.address();\r\n                this.log('新客户端登陆',{ip:ip,count:this._clients.size});\r\n                this.emit(Server.Events.newClient,socket);\r\n                socket.on('close', (had_error)=> {\r\n                    delete socket._cmdSplitter;\r\n                    this._clients.delete(socket);\r\n                    socket.removeAllListeners();\r\n                    if(had_error)this.warn('客户端socket错误关闭');\r\n                    this.log('客户端退出',{ip:ip,count:this._clients.size});\r\n                });\r\n                //之后所有命令保证第一个8bit为数据的长度，socket会保证一次输出为8bit指定的命令长度\r\n                socket.on('data',(data)=>{\r\n                    socket._cmdSplitter.append(data);\r\n                });\r\n                socket.on('error',(err)=> {\r\n                    this.error('客户端异常',{innerError:err.toString()});\r\n                });\r\n            });\r\n\r\n            server.on('error',(err)=>{\r\n                if(err.code==='EACCES'){\r\n                    return reject(this.error('端口被占用,服务启动失败'));\r\n                }\r\n                reject(this.error('内部错误,服务启动失败',{innerError:err.toString()}));\r\n            });\r\n\r\n            server.on('close',()=>{\r\n                this.log('服务器已关闭，端口释放');\r\n                server.removeAllListeners();\r\n                server=null;\r\n            });\r\n\r\n            server.listen(this._port,()=>{ //'listening' listener\r\n                this._server=server;\r\n                this.log('服务器启动');\r\n                return resolve();\r\n            });\r\n        });\r\n    }\r\n\r\n    stop(){\r\n        if(this._server){\r\n            this._server.close();\r\n            this._server=null;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexports=module.exports=SocketServer;"]}