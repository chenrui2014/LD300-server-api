{"version":3,"sources":["../../src/servers/messenger_server_http_socket.js"],"names":["io","require","config","global","server_config","_","Server","Parser","HttpSocketServer","hostServer","port","path","_port","get","_path","stop","Promise","resolve","reject","server","serveClient","httpServer","createServer","errorBind","err","removeListener","code","error","innerError","onListen","_server","_httpServer","ct","on","client","ip","log","count","emit","Events","newClient","removeAllListeners","clients","size","cmd","_onReceiveMsgIntrusionAlert","hid","toString","attach","pingInterval","pingTimeout","cookie","listen","close","e","msg","for","exports","module"],"mappings":"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","file":"messenger_server_http_socket.js","sourcesContent":["/**\r\n * Created by Luky on 2017/10/19\r\n */\r\nconst io=require('socket.io');\r\nconst config=global.server_config||require('../config/config');\r\nconst _=require('lodash');\r\nconst Server=require('./messenger_server');\r\nconst {Parser}=require('../log/log');\r\n\r\nclass HttpSocketServer extends Server{\r\n    constructor(hostServer,port,path){\r\n        super(hostServer);\r\n        this._port=port||_.get(config,'state_server.port',3001);\r\n        this._path=path||_.get(config, 'state_server.path', '/stateServer');\r\n        Parser(this,'server_http_socket.js',{port:this._port,path:this._path});\r\n    }\r\n\r\n    start(){\r\n        this.stop();\r\n        return new Promise((resolve,reject)=>{\r\n            let server=io({\r\n                path:this._path,\r\n                serveClient:false\r\n            });\r\n            let httpServer = require('http').createServer();\r\n            let errorBind=(err)=>{\r\n                httpServer.removeListener('error',errorBind);\r\n                if(err.code==='EACCES'||err.code==='EADDRINUSE'){\r\n                    this.error('端口被占用,服务启动失败',{innerError:err});\r\n                }\r\n                else{\r\n                    this.error('其他未知错误,服务启动失败',{innerError:err})\r\n                }\r\n                reject(err);\r\n            };\r\n            let onListen=()=>{\r\n                httpServer.removeListener('listening',onListen);\r\n                this._server=server;\r\n                this._httpServer=httpServer;\r\n                let ct=0;\r\n                server.on('connection',(client)=>{\r\n                    ct++;\r\n                    let ip=_.get(client,'conn.remoteAddress');\r\n                    this.log('新客户端登陆',{ip:ip,count:ct});\r\n                    this.emit(Server.Events.newClient,client);\r\n                    client.on('disconnection',()=>{\r\n                        client.removeAllListeners();\r\n                        ct--;\r\n                        this.log('客户端退出',{ip:ip,count:this.clients.size});\r\n                    });\r\n                    client.on('clear',(cmd)=>{\r\n                        this._onReceiveMsgIntrusionAlert(cmd.hid);\r\n                    });\r\n                    client.on('error',(err)=> {\r\n                        this.error('客户端异常',{innerError:err.toString()});\r\n                    });\r\n                });\r\n\r\n                this.log('服务器启动');\r\n                resolve();\r\n            };\r\n            httpServer.on('error',errorBind);\r\n            httpServer.on('listening',onListen);\r\n\r\n            server.attach(httpServer, {\r\n                pingInterval: 10000,\r\n                pingTimeout: 5000,\r\n                cookie: false\r\n            });\r\n            httpServer.listen(this._port);\r\n        });\r\n    }\r\n\r\n    stop(){\r\n        if(this._server){\r\n            this._server.removeAllListeners();\r\n            this._server.close();\r\n            this._server=null;\r\n            this._httpServer.close(e=>e);\r\n            this._httpServer=null;\r\n            this.log('服务器已关闭，端口释放');\r\n        }\r\n    }\r\n\r\n    notifyHostStateChanged(msg){\r\n        this._server&&this._server.emit('update',msg,{for:'everyone'});\r\n    }\r\n\r\n    notifyHostsState(client,msg){\r\n        client.emit('init',msg);\r\n    }\r\n}\r\n\r\nexports=module.exports=HttpSocketServer;"]}