{"version":3,"sources":["../../src/servers/ipc_live_server.js"],"names":["EventEmitter","require","WebSocket","config","global","server_config","_","url","assert","Cache","FLVEncoder","Persistence","fs","Parser","Live","server","ipc","options","_server","_wss","_ipc","_cache","_persistence","get","autoClose","path","_path","id","_file","removeClient","_fileSend","close","emit","log","tryAutoClose","prefix","_play","catch","ok","videoPath","file","createWriteStream","startTime","send","data","timestamp","type","tagType","dataType","time","setTimestamp","write","addClient","cache","supportAudio","videoToCache","on","realPlay","e","clear","removeListener","Promise","reject","error","innerError","_videoToCache","stopRealPlay","clearInterval","_clientAliveTest","wss","Server","verifyClient","setInterval","clients","size","_closeWSS","forEach","ws","isAlive","terminate","ping","err","readyState","OPEN","code","reason","stopArrchive","_stopPlay","exports","module"],"mappings":"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","file":"ipc_live_server.js","sourcesContent":["/**\r\n * Created by Luky on 2017/6/29.\r\n */\r\n\r\nconst EventEmitter=require('events').EventEmitter;\r\nconst WebSocket = require('ws');\r\nconst config=global.server_config||require('../config/config');\r\nconst _=require('lodash');\r\n//const factory=require('./ipc_factory');\r\nconst url=require('url');\r\nconst assert=require('assert');\r\n//const timeSpan=require('../TimeSpan');\r\nconst Cache=require('./cache/to_flv_cache');\r\nconst FLVEncoder=require('../flv/flv_encoder');\r\nconst Persistence=require('./ipc_video_persistence');\r\nlet fs=require('fs');\r\nconst {Parser}=require('../log/log');\r\n\r\nclass Live extends EventEmitter{\r\n    constructor(server,ipc,options){\r\n        super();\r\n        this._server=server;\r\n        this._wss=null;\r\n        this._ipc=ipc;\r\n        this._cache=null;\r\n        this._persistence=new Persistence(_.get(options,'persistence',null));\r\n        this.options={\r\n            autoClose:_.get(options,'autoClose',true)\r\n        };\r\n        let path=_.get(options,'server.path','/live');\r\n        this._path=`${path}/${ipc.id}`;\r\n        Parser(this,'ipc_live_server.js',{id:ipc.id,path:this._path});\r\n    }\r\n\r\n    get path(){\r\n        return this._path;\r\n    }\r\n\r\n    stopArrchive(){\r\n        if(!this._file)return;\r\n        let path=this._file.path;\r\n        if(this._cache){\r\n            this._cache.removeClient(this._fileSend);\r\n        }\r\n        this._file.close();\r\n        this._file=null;\r\n        this._fileSend=null;\r\n        this.emit('fileClosed',this.log('直播流与文件写入通道关闭',{path:path}));\r\n        this.tryAutoClose();\r\n    }\r\n\r\n    async arrchive(prefix){\r\n        if(this._file)return this._file.path;\r\n        let ok=await this._play().catch(()=>{return false;});\r\n        if(!ok) return '';\r\n        let path=this._persistence.videoPath(prefix,'flv');\r\n        let file=this._file=fs.createWriteStream(path);\r\n        let startTime=0;\r\n        let send=this._fileSend=(data,options)=>{\r\n            let timestamp=0;\r\n            if(options.type==='tag'&&options.tagType==='video'&&options.dataType==='data'){\r\n                if(startTime===0) startTime=options.time;\r\n                timestamp=options.time-startTime;\r\n                FLVEncoder.setTimestamp(data,timestamp);\r\n            }\r\n            file.write(data);\r\n        };\r\n        this._cache.addClient(send);\r\n        this.emit('file',this.log('建立直播流与文件的写入通道',{path:path}));\r\n        return path;\r\n    }\r\n\r\n    async _play(){\r\n        if(this._cache) return true;\r\n        let ipc=this._ipc;\r\n        //await ipc.connect().catch(e=>{\r\n        //    throw new Error(this.error('摄像头连接出错',{innerError:e}));\r\n        //});\r\n        let cache=new Cache(true,ipc.supportAudio);\r\n        let videoToCache=(data)=>{\r\n            cache.write(data);\r\n        };\r\n        ipc.on('video',videoToCache);\r\n        await ipc.realPlay().catch((e)=>{\r\n            cache.clear();\r\n            cache=null;\r\n            ipc.removeListener('video',videoToCache);\r\n            return Promise.reject(this.error('无法获取直播流',{innerError:e}))\r\n        });\r\n        this.log('获取直播流');\r\n        this._cache=cache;\r\n        this._videoToCache=videoToCache;\r\n        return true;\r\n    }\r\n\r\n    _stopPlay(){\r\n        if(!this._cache) return;\r\n        this._ipc.removeListener('video',this._videoToCache);\r\n        this._videoToCache=null;\r\n        this._ipc.stopRealPlay().catch();\r\n        if(this._cache){\r\n            this._cache.clear();\r\n            this._cache=null;\r\n        }\r\n        this.log('关闭直播流');\r\n    }\r\n\r\n    _closeWSS(){\r\n        if(!this._wss) return;\r\n        clearInterval(this._clientAliveTest);\r\n        this._clientAliveTest=0;\r\n        if(this._wss){\r\n            this._wss.close(()=>{});\r\n            this._wss=null;\r\n        }\r\n        this.log('直播流关闭');\r\n        this.tryAutoClose();\r\n    }\r\n\r\n    get running(){\r\n        return !!this._wss;\r\n    }\r\n\r\n    tryAutoClose(){\r\n        if(!this.options.autoClose)return;\r\n        if(this._file||this._wss) return;\r\n        this.close();\r\n    }\r\n\r\n    async openWSS(){\r\n        if(this._wss) return true;\r\n        if(!await this._play().catch(()=>{return null;})) return false;\r\n        let wss=this._wss=new WebSocket.Server({\r\n            server:this._server,\r\n            path:this._path,\r\n            verifyClient:(/*info*/)=>{return true;}\r\n        });\r\n\r\n        this._clientAliveTest= setInterval(()=>{\r\n            if(!wss.clients.size){\r\n                return this._closeWSS();\r\n            }\r\n            wss.clients.forEach((ws)=>{\r\n                if (ws.isAlive === false) return ws.terminate();\r\n                ws.isAlive = false;\r\n                ws.ping('', false, true);\r\n            });\r\n        }, 10000);\r\n\r\n        wss.on('error',(err)=>{\r\n            this.error('摄像头推流服务异常',{innerError:err});\r\n        });\r\n\r\n        wss.on('connection', (ws/*, req*/) => {\r\n            //const uri = url.parse(req.url, true);\r\n            ws.on('pong',()=>{\r\n                ws.isAlive=true;\r\n            });\r\n            let send=(data,/*options*/)=>{\r\n                if (ws.readyState === WebSocket.OPEN) {\r\n                    //console.log(`输出时长${(options.time-send.time0)/1000}`);\r\n                    ws.send(data);\r\n                }\r\n            };\r\n            ws.on('close', (code, reason) => {\r\n                this._cache.removeClient(send);\r\n                this.log('客户端连接关闭',{code:code,reason:reason});\r\n            });\r\n            this._cache.addClient(send);\r\n        });\r\n        this.emit('open',this.log('摄像头直播服务已启动,摄像头编号'));\r\n        return true;\r\n    }\r\n\r\n    close(){\r\n        this.stopArrchive();\r\n        this._closeWSS();\r\n        this._stopPlay();\r\n        this.emit('close',this.log(`摄像头直播服务关闭`));\r\n    }\r\n}\r\n\r\nexports=module.exports=Live;"]}