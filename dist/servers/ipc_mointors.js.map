{"version":3,"sources":["../../src/servers/ipc_mointors.js"],"names":["Data","require","_","IPCMointor","hid","_hid","distance","getMointors","ipcs","ret","each","ipc","isDemo","demo","index","findIndex","sortBy","presets","rangei","push","id","alarm","talk","audio","screenshot","preset","x","y","z","cams","extend","calcXYZ","val","interpolate","distance1","xx1","point2","xx2","Math","floor","x1","y1","z1","abs","other","exports","module"],"mappings":"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","file":"ipc_mointors.js","sourcesContent":["/**\r\n * Created by Luky on 2017/9/21.\r\n */\r\nconst Data=require('./data_server');\r\nconst _=require('lodash');\r\n\r\nclass IPCMointor{\r\n    constructor(hid){\r\n        this._hid=hid;\r\n    }\r\n    get hostID(){\r\n        return this._hid;\r\n    }\r\n    set hostID(val){\r\n        this._hid=val;\r\n    }\r\n    //{100:{range,points,demo,id},...}\r\n /*   _setMointor(mointors){\r\n        this._mointors={};\r\n        let ms=_.groupBy(mointors,'id');\r\n        _.each(ms,(ipc,id)=>{\r\n            let sorted=_.orderBy(ipc,'distance');\r\n            this._mointors[id]={\r\n                range:[_.first(sorted).distance,_.last(sorted).distance],\r\n                points:sorted,\r\n                demo:sorted[0].demo,\r\n                id:id-0\r\n            };\r\n        });\r\n    }*/\r\n\r\n    //一个摄像头位置一个对象，其中range在球机中代表一个点，在枪机中代表一个一段距离的开始点\r\n    async getMointors(distance){\r\n        let ipcs=await Data.getMointors(this._hid,distance);\r\n        let ret=[];\r\n        _.each(ipcs,(ipc)=>{\r\n            let isDemo=!!ipc.demo;\r\n            if(isDemo)\r\n            {\r\n                let index=_.findIndex(_.sortBy(ipc.presets,'distance'),(rangei)=>{\r\n                    return rangei.distance>=distance;\r\n                });\r\n                if(-1===index){\r\n                    ret.push({\r\n                        id:ipc.id,\r\n                        alarm:ipc.alarm,\r\n                        talk:ipc.audio,\r\n                        screenshot:ipc.screenshot,\r\n                        preset:null,x:-1,y:-1,z:-1,\r\n                        demo:true\r\n                    });\r\n                }\r\n                else{\r\n                    let cams=[null,ipc.presets[index]/*,null*/];\r\n                    if(index>0) cams[0]=ipc.presets[index-1];\r\n                    //if(index+1<mi.range.length)cams[2]=mi.range[index+1];\r\n                    ret.push(_.extend({\r\n                        id:ipc.id,\r\n                        alarm:ipc.alarm,\r\n                        talk:ipc.audio,\r\n                        screenshot:ipc.screenshot,\r\n                        demo:true},calcXYZ(cams,distance)));\r\n                }\r\n            }\r\n            else{\r\n                ret.push({\r\n                    id:ipc.id,\r\n                    alarm:ipc.alarm,\r\n                    talk:ipc.audio,\r\n                    screenshot:ipc.screenshot,\r\n                    preset:null,x:0,y:0,z:0,\r\n                    demo:false\r\n                });\r\n            }\r\n        });\r\n        return ret;\r\n    }\r\n}\r\n\r\n\r\n//插值计算偏移\r\nfunction interpolate(distance1,xx1,point2,xx2,distance) {\r\n    return Math.floor(xx1+(xx2-xx1)*(distance-distance1)/(point2-distance1));\r\n}\r\n\r\nfunction calcXYZ(cams,distance){\r\n    //距离小于1米也不需要处理\r\n    let x1=cams[1].x;\r\n    let y1=cams[1].y;\r\n    let z1=cams[1].z;\r\n    if((/*null===cams[2]&&*/null===cams[0])||Math.abs(cams[1].distance-distance)<=1){\r\n        return {\r\n            x:x1,\r\n            y:y1,\r\n            z:z1,\r\n            preset:null,//cams[1].preset.preset,暂时不设置预置点，简单点\r\n        };\r\n    }\r\n    /*    let distance1=-1,distance2=-1;\r\n        if(cams[0]){\r\n            distance1=position-cams[0].range[0];\r\n        }\r\n        if(cams[2]){\r\n            distance2=cams[2].range[0]-position;\r\n        }*/\r\n    let other=cams[0];\r\n    /*    if(distance1===-1||(distance2!==-1&&distance2<=distance1)){\r\n            other=cams[2];\r\n        }*/\r\n    return {\r\n        x:interpolate(other.distance,other.x,cams[1].distance,x1,distance),\r\n        y:interpolate(other.distance,other.y,cams[1].distance,y1,distance),\r\n        z:interpolate(other.distance,other.z,cams[1].distance,z1,distance),\r\n        preset:null\r\n    };\r\n}\r\n\r\n\r\nexports=module.exports=IPCMointor;"]}