{"version":3,"sources":["../../src/services/camerasService.js"],"names":["require","Parser","logger","CamerasModel","CamerasService","data","findMaxId","id","success","create","err","cameras","info","ip","error","message","conditions","remove","result","update","exec","find","count","sort","pagination","skip","pageStart","limit","pageSize","length","_doc","findOne","exports","module"],"mappings":"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","file":"camerasService.js","sourcesContent":["/**\r\n * 操作摄像头数据对象\r\n * Created by chen on 17-8-23.\r\n */\r\n//import logger from '../logger';\r\n//import CamerasModel from '../models/cameras.model';\r\n//import uuidv1 from 'uuid/v1';\r\n\r\nconst {Parser}=require('../log/log');\r\nconst logger={};\r\nParser(logger,'CamerasService.js');\r\nconst CamerasModel=require('../models/cameras.model');\r\n//const uuidv1=require('uuid/v1');\r\n\r\nclass CamerasService {\r\n\r\n    /**\r\n     * 添加一个摄像头\r\n     * @param data 需要添加的摄像头数据\r\n     * @returns {Promise.<boolean>} 添加成功返回true，否则返回false；\r\n     */\r\n    static async add_cameras(data){\r\n        const id = await CamerasService.findMaxId();\r\n        //data.id = uuidv1();\r\n        //data.num = num+1;\r\n         data.id = id + 1;\r\n        //let cameras = new CamerasModel(data);\r\n        let success = false;\r\n        await CamerasModel.create(data,function (err,cameras) {\r\n            if(!err) {\r\n                success = true;\r\n                logger.info('添加摄像头['+ cameras.ip +']成功');\r\n            }else{\r\n                logger.error(err.message);\r\n            }\r\n        });\r\n        // await cameras.save(function (err,cameras) {\r\n        //     if(!err) {\r\n        //         success = true;\r\n        //         logger.info('添加摄像头['+ cameras.ip +']成功');\r\n        //     }else{\r\n        //         logger.error(err.message);\r\n        //     }\r\n        // });\r\n\r\n        return success;\r\n    }\r\n\r\n    /**\r\n     * 根据条件删除摄像头\r\n     * @param conditions 删除条件\r\n     * @returns {Promise.<boolean>}删除成功返回true，否则返回false；\r\n     */\r\n    static async delete_cameras(conditions) {\r\n        let success = false;\r\n        /*const result = */await CamerasModel.remove(conditions,function (err,cameras) {\r\n            if(!err) {\r\n                success = true;\r\n                logger.info(cameras);\r\n                logger.info('删除摄像头['+ cameras.ip +']成功');\r\n            }else{\r\n                logger.error(err.message);\r\n            }\r\n        });\r\n        return success;\r\n    }\r\n\r\n    /**\r\n     * 修改摄像头信息\r\n     * @param conditions 修改条件\r\n     * @param data 新的摄像头数据\r\n     * @returns {Promise.<*>} 返回修改后的数据\r\n     */\r\n    static async edit_cameras(conditions,data){\r\n        let result = null;\r\n        return (result = await CamerasModel.update(conditions,data).exec());\r\n    }\r\n\r\n    /**\r\n     * 根据条件查询符合条件的摄像头数量\r\n     * @param conditions\r\n     * @returns {Promise.<*>}\r\n     */\r\n    static async getTotal(conditions){\r\n        return await CamerasModel.find(conditions).count();\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * 查询所有摄像头\r\n     * @returns {Promise.<*>}\r\n     */\r\n    static async findAll(sort){\r\n        if(sort){\r\n            return await CamerasModel.find().sort(sort);\r\n        }else{\r\n            return await CamerasModel.find();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 根据条件查询摄像头\r\n     * @param conditions 查询条件\r\n     * @param sort 排序\r\n     * @param pagination 分页\r\n     * @returns {Promise.<*>} 返回查询到的数据\r\n     */\r\n    static async find_cameras(conditions,sort,pagination){\r\n        let result = null;\r\n        if(sort){\r\n\r\n            if(pagination){\r\n                result = await CamerasModel.find(conditions).skip(pagination.pageStart).limit(pagination.pageSize).sort(sort);\r\n            }else{\r\n                result = await CamerasModel.find().sort(sort);\r\n            }\r\n        }else{\r\n            if(pagination){\r\n                result = await CamerasModel.find(conditions).skip(pagination.pageStart).limit(pagination.pageSize);\r\n            }else{\r\n                result = await CamerasModel.find(conditions);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n    /**\r\n     * 获得num最大值\r\n     * @returns {Promise.<number>}\r\n     */\r\n    static async findMaxId(){\r\n        const result = await CamerasModel.find().sort({id:-1}).limit(1);\r\n        if(result && result.length > 0){\r\n            return result[0]._doc.id;\r\n        }else{\r\n            return 0\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 根据ID查找摄像头信息\r\n     * @param id\r\n     * @returns {Promise.<*>}\r\n     */\r\n    static async find_one(id){\r\n        return await CamerasModel.findOne({id:id});\r\n    }\r\n\r\n    /**\r\n     * 根据条件判断是否存在符合条件的摄像头\r\n     * @param conditions 查询条件\r\n     * @returns {Promise.<boolean>} 有符合条件的对象返回true，否则返回false\r\n     */\r\n    static async isExist(conditions){\r\n        const result = await CamerasModel.find(conditions);\r\n        return result && result.length > 0;\r\n    }\r\n\r\n}\r\n\r\nexports=module.exports=CamerasService;\r\n//export default CamerasService;"]}