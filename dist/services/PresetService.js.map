{"version":3,"sources":["../../src/services/PresetService.js"],"names":["require","Parser","logger","PresetService","data","findMaxId","id","Number","success","PresetModel","create","err","preset","info","error","message","conditions","remove","ip","result","update","exec","find","count","sort","pagination","skip","pageStart","limit","pageSize","findOne","length","_doc","exports","module"],"mappings":"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","file":"PresetService.js","sourcesContent":["/**\r\n * 操作预置点数据对象\r\n * Created by chen on 17-8-23.\r\n */\r\n//import logger from '../logger';\r\n//import {Monitoring as MonitoringAreaModel, Preset as PresetModel} from '../models/monitoringArea.model';\r\n\r\nconst {Parser}=require('../log/log');\r\nconst logger={};\r\nParser(logger,'PresetService.js');\r\n//const Preset=require('../models/monitoringArea.model').PresetModel;\r\n\r\n\r\nclass PresetService {\r\n\r\n    /**\r\n     * 添加一个预置点\r\n     * @param data 需要添加的预置点数据\r\n     * @returns {Promise.<boolean>} 添加成功返回true，否则返回false；\r\n     */\r\n    static async add_preset(data){\r\n        const id = await PresetService.findMaxId();\r\n        data.id = Number(id) + 1;\r\n        // let preset = new PresetModel(data);\r\n        let success = false;\r\n        await PresetModel.create(data,function (err,preset) {\r\n            if(!err) {\r\n                success = true;\r\n                logger.info('添加周界成功');\r\n            }else{\r\n                logger.error(err.message);\r\n            }\r\n        });\r\n        return success;\r\n    }\r\n\r\n    /**\r\n     * 根据条件删除预置点\r\n     * @param conditions 删除条件\r\n     * @returns {Promise.<boolean>}删除成功返回true，否则返回false；\r\n     */\r\n    static async delete_preset(conditions) {\r\n        let success = false;\r\n        const result = await PresetModel.remove(conditions,function (err,preset) {\r\n            if(!err) {\r\n                success = true;\r\n                logger.info('删除预置点['+ preset.ip +']成功');\r\n            }else{\r\n                logger.error(err.message);\r\n            }\r\n        });\r\n        return success;\r\n    }\r\n\r\n    /**\r\n     * 修改预置点信息\r\n     * @param conditions 修改条件\r\n     * @param data 新的预置点数据\r\n     * @returns {Promise.<*>} 返回修改后的数据\r\n     */\r\n    static async edit_preset(conditions,data){\r\n        let result = null;\r\n        result = await PresetModel.update(conditions,data).exec();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 根据条件查询符合条件的预置点数量\r\n     * @param conditions\r\n     * @returns {Promise.<*>}\r\n     */\r\n    static async getTotal(conditions){\r\n        return await PresetModel.find(conditions).count();\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * 查询所有预置点\r\n     * @returns {Promise.<*>}\r\n     */\r\n    static async findAll(sort){\r\n        if(sort){\r\n            return await PresetModel.find().sort(sort);\r\n        }else{\r\n            return await PresetModel.find();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 根据条件查询预置点\r\n     * @param conditions 查询条件\r\n     * @param sort 排序\r\n     * @param pagination 分页\r\n     * @returns {Promise.<*>} 返回查询到的数据\r\n     */\r\n    static async find_preset(conditions,sort,pagination){\r\n        let result = null;\r\n        if(sort){\r\n\r\n            if(pagination){\r\n                result = await PresetModel.find(conditions).skip(pagination.pageStart).limit(pagination.pageSize).sort(sort);\r\n            }else{\r\n                result = await PresetModel.find().sort(sort);\r\n            }\r\n        }else{\r\n            if(pagination){\r\n                result = await PresetModel.find(conditions).skip(pagination.pageStart).limit(pagination.pageSize);\r\n            }else{\r\n                result = await PresetModel.find(conditions);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 根据ID查找预置点信息\r\n     * @param id\r\n     * @returns {Promise.<*>}\r\n     */\r\n    static async find_one(id){\r\n        return await PresetModel.findOne({id:id});\r\n    }\r\n\r\n    /**\r\n     * 获得ID最大值\r\n     * @returns {Promise.<number>}\r\n     */\r\n    static async findMaxId(){\r\n        const result = await PresetModel.find().sort({id:-1}).limit(1);\r\n        if(result && result.length > 0){\r\n            return result[0]._doc.id;\r\n        }else{\r\n            return 0\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 根据条件判断是否存在符合条件的预置点\r\n     * @param conditions 查询条件\r\n     * @returns {Promise.<boolean>} 有符合条件的对象返回true，否则返回false\r\n     */\r\n    static async isExist(conditions){\r\n        const result = await PresetModel.find(conditions);\r\n        if(result && result.length > 0){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexports=module.exports=PresetService;\r\n//export default PresetService;"]}