{"version":3,"sources":["../../src/services/perimeterService.js"],"names":["require","Parser","logger","PerimeterModel","uuidv1","PerimeterService","data","id","perimeterId","create","err","perimeter","_doc","info","error","message","conditions","success","remove","realPosition","result","update","exec","find","count","sort","pagination","skip","pageStart","limit","pageSize","findOne","length","exports","module"],"mappings":"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","file":"perimeterService.js","sourcesContent":["//import logger from '../logger';\r\n//import PerimeterModel from '../models/perimeter.model';\r\n//import uuidv1 from 'uuid/v1';\r\n\r\nconst {Parser}=require('../log/log');\r\nconst logger={};\r\nParser(logger,'PerimeterService.js');\r\nconst PerimeterModel=require('../models/perimeter.model');\r\nconst uuidv1=require('uuid/v1');\r\n\r\nclass PerimeterService {\r\n    /**\r\n     * 添加一个周界\r\n     * @param data 需要添加的周界数据\r\n     * @returns {Promise.<boolean>} 添加成功返回true，否则返回false；\r\n     */\r\n    static async add_perimeter(data){\r\n        // const id = await PerimeterService.findMaxId();\r\n        // data.id = Number(id) + 1;\r\n        // let perimeter = new PerimeterModel(data);\r\n        data.id = uuidv1();\r\n        let perimeterId=null;\r\n        await PerimeterModel.create(data,function (err,perimeter) {\r\n            if(!err) {\r\n                perimeterId = perimeter._doc.id;\r\n                logger.info('添加周界成功');\r\n            }else{\r\n                logger.error(err.message);\r\n            }\r\n        });\r\n\r\n        return perimeterId;\r\n    }\r\n\r\n    /**\r\n     * 根据条件删除周界\r\n     * @param conditions 删除条件\r\n     * @returns {Promise.<boolean>}删除成功返回true，否则返回false；\r\n     */\r\n    static async delete_perimeter(conditions) {\r\n        let success = false;\r\n        const result = await PerimeterModel.remove(conditions,function (err,perimeter) {\r\n            if(!err) {\r\n                success = true;\r\n                logger.info('删除周界['+ perimeter.realPosition +']成功');\r\n            }else{\r\n                logger.error(err.message);\r\n            }\r\n        });\r\n        return success;\r\n    }\r\n\r\n    /**\r\n     * 修改周界信息\r\n     * @param conditions 修改条件\r\n     * @param data 新的周界数据\r\n     * @returns {Promise.<*>} 返回修改后的数据\r\n     */\r\n    static async edit_perimeter(conditions,data){\r\n        let result = null;\r\n        result = await PerimeterModel.update(conditions,data).exec();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 根据条件查询符合条件的周界数量\r\n     * @param conditions\r\n     * @returns {Promise.<*>}\r\n     */\r\n    static async getTotal(conditions){\r\n        return await PerimeterModel.find(conditions).count();\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * 查询所有周界\r\n     * @returns {Promise.<*>}\r\n     */\r\n    static async findAll(sort){\r\n        if(sort){\r\n            return await PerimeterModel.find().sort(sort);\r\n        }else{\r\n            return await PerimeterModel.find();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 根据条件查询周界\r\n     * @param conditions 查询条件\r\n     * @param sort 排序\r\n     * @param pagination 分页\r\n     * @returns {Promise.<*>} 返回查询到的数据\r\n     */\r\n    static async find_perimeter(conditions,sort,pagination){\r\n        let result = null;\r\n        if(sort){\r\n\r\n            if(pagination){\r\n                result = await PerimeterModel.find(conditions).skip(pagination.pageStart).limit(pagination.pageSize).sort(sort);\r\n            }else{\r\n                result = await PerimeterModel.find().sort(sort);\r\n            }\r\n        }else{\r\n            if(pagination){\r\n                result = await PerimeterModel.find(conditions).skip(pagination.pageStart).limit(pagination.pageSize);\r\n            }else{\r\n                result = await PerimeterModel.find(conditions);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 根据ID查找周界信息\r\n     * @param id\r\n     * @returns {Promise.<*>}\r\n     */\r\n    static async find_one(id){\r\n        return await PerimeterModel.findOne({id:id});\r\n    }\r\n\r\n    /**\r\n     * 获得ID最大值\r\n     * @returns {Promise.<number>}\r\n     */\r\n    static async findMaxId(){\r\n        const result = await PerimeterModel.find().sort({id:-1}).limit(1);\r\n        if(result && result.length > 0){\r\n            return result[0]._doc.id;\r\n        }else{\r\n            return 0\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 根据条件判断是否存在符合条件的周界\r\n     * @param conditions 查询条件\r\n     * @returns {Promise.<boolean>} 有符合条件的对象返回true，否则返回false\r\n     */\r\n    static async isExist(conditions){\r\n        const result = await PerimeterModel.find(conditions);\r\n        if(result && result.length > 0){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexports=module.exports=PerimeterService;"]}