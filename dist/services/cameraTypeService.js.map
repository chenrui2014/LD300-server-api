{"version":3,"sources":["../../src/services/cameraTypeService.js"],"names":["require","Parser","logger","CameraTypeModel","uuidv1","CameraTypeService","data","id","success","create","err","cameraType","info","name","error","message","conditions","remove","ip","result","update","exec","find","count","sort","pagination","skip","pageStart","limit","pageSize","findOne","length","_doc","exports","module"],"mappings":"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","file":"cameraTypeService.js","sourcesContent":["/**\r\n * 操作摄像头类型数据对象\r\n * Created by chen on 17-8-23.\r\n */\r\n//import logger from '../logger';\r\n//import CameraTypeModel from '../models/cameraType.model';\r\n//import uuidv1 from 'uuid/v1';\r\nconst {Parser}=require('../log/log');\r\nconst logger={};\r\nParser(logger,'CameraTypeService.js');\r\nconst CameraTypeModel=require('../models/cameraType.model');\r\nconst uuidv1=require('uuid/v1');\r\n\r\nclass CameraTypeService {\r\n\r\n    /**\r\n     * 添加一个摄像头类型\r\n     * @param data 需要添加的摄像头类型数据\r\n     * @returns {Promise.<boolean>} 添加成功返回true，否则返回false；\r\n     */\r\n    static async add_cameraType(data){\r\n        // const id = await CameraTypeService.findMaxId();\r\n        // data.id = Number(id) + 1;\r\n        // let cameraType = new CameraTypeModel(data);\r\n        data.id = uuidv1();\r\n        let success = false;\r\n        await CameraTypeModel.create(data,function (err,cameraType) {\r\n            if(!err) {\r\n                success = true;\r\n                logger.info('添加摄像头类型['+ cameraType.name +']成功');\r\n            }else{\r\n                logger.error(err.message);\r\n            }\r\n        });\r\n\r\n        return success;\r\n    }\r\n\r\n    /**\r\n     * 根据条件删除摄像头类型\r\n     * @param conditions 删除条件\r\n     * @returns {Promise.<boolean>}删除成功返回true，否则返回false；\r\n     */\r\n    static async delete_cameraType(conditions) {\r\n        let success = false;\r\n        /*const result = */await CameraTypeModel.remove(conditions,function (err,cameraType) {\r\n            if(!err) {\r\n                success = true;\r\n                logger.info('删除摄像头类型['+ cameraType.ip +']成功');\r\n            }else{\r\n                logger.error(err.message);\r\n            }\r\n        });\r\n        return success;\r\n    }\r\n\r\n    /**\r\n     * 修改摄像头类型信息\r\n     * @param conditions 修改条件\r\n     * @param data 新的摄像头类型数据\r\n     * @returns {Promise.<*>} 返回修改后的数据\r\n     */\r\n    static async edit_cameraType(conditions,data){\r\n        let result = null;\r\n        result = await CameraTypeModel.update(conditions,data).exec();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 根据条件查询符合条件的摄像头类型数量\r\n     * @param conditions\r\n     * @returns {Promise.<*>}\r\n     */\r\n    static async getTotal(conditions){\r\n        return await CameraTypeModel.find(conditions).count();\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * 查询所有摄像头类型\r\n     * @returns {Promise.<*>}\r\n     */\r\n    static async findAll(sort){\r\n        if(sort){\r\n            return await CameraTypeModel.find().sort(sort);\r\n        }else{\r\n            return await CameraTypeModel.find();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 根据条件查询摄像头类型\r\n     * @param conditions 查询条件\r\n     * @param sort 排序\r\n     * @param pagination 分页\r\n     * @returns {Promise.<*>} 返回查询到的数据\r\n     */\r\n    static async find_cameraType(conditions,sort,pagination){\r\n        let result = null;\r\n        if(sort){\r\n\r\n            if(pagination){\r\n                result = await CameraTypeModel.find(conditions).skip(pagination.pageStart).limit(pagination.pageSize).sort(sort);\r\n            }else{\r\n                result = await CameraTypeModel.find().sort(sort);\r\n            }\r\n        }else{\r\n            if(pagination){\r\n                result = await CameraTypeModel.find(conditions).skip(pagination.pageStart).limit(pagination.pageSize);\r\n            }else{\r\n                result = await CameraTypeModel.find(conditions);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 根据ID查找摄像头类型信息\r\n     * @param id\r\n     * @returns {Promise.<*>}\r\n     */\r\n    static async find_one(id){\r\n        return await CameraTypeModel.findOne({id:id});\r\n    }\r\n\r\n    /**\r\n     * 获得ID最大值\r\n     * @returns {Promise.<number>}\r\n     */\r\n    static async findMaxId(){\r\n        const result = await CameraTypeModel.find().sort({id:-1}).limit(1);\r\n        if(result && result.length > 0){\r\n            return result[0]._doc.id;\r\n        }\r\n        return 0\r\n    }\r\n\r\n\r\n    /**\r\n     * 根据条件判断是否存在符合条件的摄像头类型\r\n     * @param conditions 查询条件\r\n     * @returns {Promise.<boolean>} 有符合条件的对象返回true，否则返回false\r\n     */\r\n    static async isExist(conditions){\r\n        const result = await CameraTypeModel.find(conditions);\r\n        return result && result.length > 0;\r\n    }\r\n\r\n}\r\n\r\nexports=module.exports=CameraTypeService;\r\n//export default CameraTypeService;"]}