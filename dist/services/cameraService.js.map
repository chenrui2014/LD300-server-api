{"version":3,"sources":["../../src/services/cameraService.js"],"names":["require","Parser","logger","CameraModel","CameraService","data","findMaxId","id","success","create","err","camera","info","ip","error","message","conditions","remove","result","update","exec","find","count","sort","pagination","skip","pageStart","limit","pageSize","length","_doc","findOne","exports","module"],"mappings":"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","file":"cameraService.js","sourcesContent":["/**\r\n * 操作摄像头数据对象\r\n * Created by chen on 17-8-23.\r\n */\r\n//import logger from '../logger';\r\n//import CameraModel from '../models/camera.model';\r\n//import CameraTypeModel from \"../models/cameraType.model\";\r\nconst {Parser}=require('../log/log');\r\nconst logger={};\r\nParser(logger,'CameraService.js');\r\nconst CameraModel=require('../models/camera.model');\r\n//const CameraTypeModel=require('../models/cameraType.model');\r\n\r\nclass CameraService {\r\n\r\n    /**\r\n     * 添加一个摄像头\r\n     * @param data 需要添加的摄像头数据\r\n     * @returns {Promise.<boolean>} 添加成功返回true，否则返回false；\r\n     */\r\n    static async add_camera(data){\r\n        const id = await CameraService.findMaxId();\r\n        // data.id = uuidv1();\r\n        data.id = id + 1;\r\n        //let camera = new CameraModel(data);\r\n        let success = false;\r\n        await CameraModel.create(data,function (err,camera) {\r\n            if(!err) {\r\n                success = true;\r\n                logger.info('添加摄像头['+ camera.ip +']成功');\r\n            }else{\r\n                logger.error(err.message);\r\n            }\r\n        });\r\n\r\n        // await camera.save(function (err,camera) {\r\n        //     if(!err) {\r\n        //         success = true;\r\n        //         logger.info('添加摄像头['+ camera.ip +']成功');\r\n        //     }else{\r\n        //         logger.error(err.message);\r\n        //     }\r\n        // });\r\n\r\n        return success;\r\n    }\r\n\r\n    /**\r\n     * 根据条件删除摄像头\r\n     * @param conditions 删除条件\r\n     * @returns {Promise.<boolean>}删除成功返回true，否则返回false；\r\n     */\r\n    static async delete_camera(conditions) {\r\n        let success = false;\r\n        const result = await CameraModel.remove(conditions,function (err,camera) {\r\n            if(!err) {\r\n                success = true;\r\n                logger.info(camera);\r\n                logger.info('删除摄像头['+ camera.ip +']成功');\r\n            }else{\r\n                logger.error(err.message);\r\n            }\r\n        });\r\n        return success;\r\n    }\r\n\r\n    /**\r\n     * 修改摄像头信息\r\n     * @param conditions 修改条件\r\n     * @param data 新的摄像头数据\r\n     * @returns {Promise.<*>} 返回修改后的数据\r\n     */\r\n    static async edit_camera(conditions,data){\r\n        let result = null;\r\n        result = await CameraModel.update(conditions,data).exec();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 根据条件查询符合条件的摄像头数量\r\n     * @param conditions\r\n     * @returns {Promise.<*>}\r\n     */\r\n    static async getTotal(conditions){\r\n        return await CameraModel.find(conditions).count();\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * 查询所有摄像头\r\n     * @returns {Promise.<*>}\r\n     */\r\n    static async findAll(sort){\r\n        if(sort){\r\n            return await CameraModel.find().sort(sort);\r\n        }else{\r\n            return await CameraModel.find();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 根据条件查询摄像头\r\n     * @param conditions 查询条件\r\n     * @param sort 排序\r\n     * @param pagination 分页\r\n     * @returns {Promise.<*>} 返回查询到的数据\r\n     */\r\n    static async find_camera(conditions,sort,pagination){\r\n        let result = null;\r\n        if(sort){\r\n\r\n            if(pagination){\r\n                result = await CameraModel.find(conditions).skip(pagination.pageStart).limit(pagination.pageSize).sort(sort);\r\n            }else{\r\n                result = await CameraModel.find().sort(sort);\r\n            }\r\n        }else{\r\n            if(pagination){\r\n                result = await CameraModel.find(conditions).skip(pagination.pageStart).limit(pagination.pageSize);\r\n            }else{\r\n                result = await CameraModel.find(conditions);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n    /**\r\n     * 获得ID最大值\r\n     * @returns {Promise.<number>}\r\n     */\r\n    static async findMaxId(){\r\n        const result = await CameraModel.find().sort({id:-1}).limit(1);\r\n        if(result && result.length > 0){\r\n            return result[0]._doc.id;\r\n        }else{\r\n            return 0\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 根据ID查找摄像头信息\r\n     * @param id\r\n     * @returns {Promise.<*>}\r\n     */\r\n    static async find_one(id){\r\n        return await CameraModel.findOne({id:id});\r\n    }\r\n\r\n    /**\r\n     * 根据条件判断是否存在符合条件的摄像头\r\n     * @param conditions 查询条件\r\n     * @returns {Promise.<boolean>} 有符合条件的对象返回true，否则返回false\r\n     */\r\n    static async isExist(conditions){\r\n        const result = await CameraModel.find(conditions);\r\n        if(result && result.length > 0){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexports=module.exports=CameraService;\r\n//export default CameraService;"]}