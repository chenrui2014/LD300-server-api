{"version":3,"sources":["../../src/services/unitService.js"],"names":["require","Parser","logger","UnitModel","UnitService","data","findMaxId","id","Number","success","create","err","unit","info","error","message","conditions","remove","ip","result","update","exec","find","count","sort","pagination","skip","pageStart","limit","pageSize","findOne","length","_doc","exports","module"],"mappings":"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","file":"unitService.js","sourcesContent":["/**\r\n * 操作单位数据对象\r\n * Created by chen on 17-8-23.\r\n */\r\n//import logger from '../logger';\r\n//import UnitModel from '../models/unit.model';\r\nconst {Parser}=require('../log/log');\r\nconst logger={};\r\nParser(logger,'UnitService.js')\r\nconst UnitModel=require('../models/unit.model');\r\n\r\nclass UnitService {\r\n\r\n    /**\r\n     * 添加一个单位\r\n     * @param data 需要添加的单位数据\r\n     * @returns {Promise.<boolean>} 添加成功返回true，否则返回false；\r\n     */\r\n    static async add_unit(data){\r\n        const id = await UnitService.findMaxId();\r\n        data.id = Number(id) + 1;\r\n        // let unit = new UnitModel(data);\r\n        let success = false;\r\n        await UnitModel.create(data,function (err,unit) {\r\n            if(!err) {\r\n                success = true;\r\n                logger.info('添加单位成功');\r\n            }else{\r\n                logger.error(err.message);\r\n            }\r\n        });\r\n\r\n        return success;\r\n    }\r\n\r\n    /**\r\n     * 根据条件删除单位\r\n     * @param conditions 删除条件\r\n     * @returns {Promise.<boolean>}删除成功返回true，否则返回false；\r\n     */\r\n    static async delete_unit(conditions) {\r\n        let success = false;\r\n        const result = await UnitModel.remove(conditions,function (err,unit) {\r\n            if(!err) {\r\n                success = true;\r\n                logger.info('删除单位['+ unit.ip +']成功');\r\n            }else{\r\n                logger.error(err.message);\r\n            }\r\n        });\r\n        return success;\r\n    }\r\n\r\n    /**\r\n     * 修改单位信息\r\n     * @param conditions 修改条件\r\n     * @param data 新的单位数据\r\n     * @returns {Promise.<*>} 返回修改后的数据\r\n     */\r\n    static async edit_unit(conditions,data){\r\n        let result = null;\r\n        result = await UnitModel.update(conditions,data).exec();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 根据条件查询符合条件的单位数量\r\n     * @param conditions\r\n     * @returns {Promise.<*>}\r\n     */\r\n    static async getTotal(conditions){\r\n        return await UnitModel.find(conditions).count();\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * 查询所有单位\r\n     * @returns {Promise.<*>}\r\n     */\r\n    static async findAll(sort){\r\n        if(sort){\r\n            return await UnitModel.find().sort(sort);\r\n        }else{\r\n            return await UnitModel.find();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 根据条件查询单位\r\n     * @param conditions 查询条件\r\n     * @param sort 排序\r\n     * @param pagination 分页\r\n     * @returns {Promise.<*>} 返回查询到的数据\r\n     */\r\n    static async find_unit(conditions,sort,pagination){\r\n        let result = null;\r\n        if(sort){\r\n\r\n            if(pagination){\r\n                result = await UnitModel.find(conditions).skip(pagination.pageStart).limit(pagination.pageSize).sort(sort);\r\n            }else{\r\n                result = await UnitModel.find().sort(sort);\r\n            }\r\n        }else{\r\n            if(pagination){\r\n                result = await UnitModel.find(conditions).skip(pagination.pageStart).limit(pagination.pageSize);\r\n            }else{\r\n                result = await UnitModel.find(conditions);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 根据ID查找单位信息\r\n     * @param id\r\n     * @returns {Promise.<*>}\r\n     */\r\n    static async find_one(id){\r\n        return await UnitModel.findOne({id:id});\r\n    }\r\n\r\n    /**\r\n     * 获得ID最大值\r\n     * @returns {Promise.<number>}\r\n     */\r\n    static async findMaxId(){\r\n        const result = await UnitModel.find().sort({id:-1}).limit(1);\r\n        if(result && result.length > 0){\r\n            return result[0]._doc.id;\r\n        }else{\r\n            return 0\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 根据条件判断是否存在符合条件的单位\r\n     * @param conditions 查询条件\r\n     * @returns {Promise.<boolean>} 有符合条件的对象返回true，否则返回false\r\n     */\r\n    static async isExist(conditions){\r\n        const result = await UnitModel.find(conditions);\r\n        if(result && result.length > 0){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexports=module.exports=UnitService;\r\n//export default UnitService;"]}