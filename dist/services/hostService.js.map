{"version":3,"sources":["../../src/services/hostService.js"],"names":["require","Parser","logger","HostModel","uuidv1","HostService","data","id","success","create","err","host","info","port","error","message","conditions","remove","result","update","exec","find","count","sort","pagination","skip","pageStart","limit","pageSize","findOne","length","_doc","exports","module"],"mappings":"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","file":"hostService.js","sourcesContent":["/**\r\n * Created by chen on 17-8-23.\r\n */\r\n//import logger from '../logger';\r\n//import HostModel from '../models/host.model';\r\n//import uuidv1 from 'uuid/v1';\r\n\r\nconst {Parser}=require('../log/log');\r\nconst logger={};\r\nParser(logger,'HostService.js');\r\nconst HostModel =require('../models/host.model');\r\nconst uuidv1=require('uuid/v1');\r\n\r\nclass HostService {\r\n    /**\r\n     * 添加一个主机\r\n     * @param data 需要添加的主机数据\r\n     * @returns {Promise.<boolean>} 添加成功返回true，否则返回false；\r\n     */\r\n    static async add_host(data){\r\n        // const id = await HostService.findMaxId();\r\n        // data.id = Number(id) + 1;\r\n        // let host = new HostModel(data);\r\n        data.id = uuidv1();\r\n        let success = false;\r\n        await HostModel.create(data,function (err,host) {\r\n            if(!err) {\r\n                success = true;\r\n                logger.info('添加摄像头['+ host.port +']成功');\r\n            }else{\r\n                logger.error(err.message);\r\n            }\r\n        });\r\n\r\n        return success;\r\n    }\r\n\r\n    /**\r\n     * 根据条件删除主机\r\n     * @param conditions 删除条件\r\n     * @returns {Promise.<boolean>}删除成功返回true，否则返回false；\r\n     */\r\n    static async delete_host(conditions) {\r\n        let success = false;\r\n        const result = await HostModel.remove(conditions,function (err,host) {\r\n            if(!err) {\r\n                success = true;\r\n                logger.info('删除主机['+ host.port +']成功');\r\n            }else{\r\n                logger.error(err.message);\r\n            }\r\n        });\r\n        return success;\r\n    }\r\n\r\n    /**\r\n     * 修改主机信息\r\n     * @param conditions 修改条件\r\n     * @param data 新的主机数据\r\n     * @returns {Promise.<*>} 返回修改后的数据\r\n     */\r\n    static async edit_host(conditions,data){\r\n        let result = null;\r\n        result = await HostModel.update(conditions,data).exec();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 根据条件查询符合条件的主机数量\r\n     * @param conditions\r\n     * @returns {Promise.<*>}\r\n     */\r\n    static async getTotal(conditions){\r\n        return await HostModel.find(conditions).count();\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * 查询所有主机\r\n     * @returns {Promise.<*>}\r\n     */\r\n    static async findAll(sort){\r\n        if(sort){\r\n            return await HostModel.find().sort(sort);\r\n        }else{\r\n            return await HostModel.find();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 根据条件查询主机\r\n     * @param conditions 查询条件\r\n     * @param sort 排序\r\n     * @param pagination 分页\r\n     * @returns {Promise.<*>} 返回查询到的数据\r\n     */\r\n    static async find_host(conditions,sort,pagination){\r\n        let result = null;\r\n        if(sort){\r\n\r\n            if(pagination){\r\n                result = await HostModel.find(conditions).skip(pagination.pageStart).limit(pagination.pageSize).sort(sort);\r\n            }else{\r\n                result = await HostModel.find().sort(sort);\r\n            }\r\n        }else{\r\n            if(pagination){\r\n                result = await HostModel.find(conditions).skip(pagination.pageStart).limit(pagination.pageSize);\r\n            }else{\r\n                result = await HostModel.find(conditions);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 根据ID查找主机信息\r\n     * @param id\r\n     * @returns {Promise.<*>}\r\n     */\r\n    static async find_one(id){\r\n        return await HostModel.findOne({id:id});\r\n    }\r\n\r\n    /**\r\n     * 获得ID最大值\r\n     * @returns {Promise.<number>}\r\n     */\r\n    static async findMaxId(){\r\n        const result = await HostModel.find().sort({id:-1}).limit(1);\r\n        if(result && result.length > 0){\r\n            return result[0]._doc.id;\r\n        }else{\r\n            return 0\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 根据条件判断是否存在符合条件的主机\r\n     * @param conditions 查询条件\r\n     * @returns {Promise.<boolean>} 有符合条件的对象返回true，否则返回false\r\n     */\r\n    static async isExist(conditions){\r\n        const result = await HostModel.find(conditions);\r\n        if(result && result.length > 0){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexports=module.exports=HostService;\r\n//export default HostService;"]}