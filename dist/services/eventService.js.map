{"version":3,"sources":["../../src/services/eventService.js"],"names":["require","Parser","logger","EventModel","uuidv1","EventService","data","id","success","create","err","event","info","error","message","conditions","remove","ip","result","update","exec","find","count","sort","pagination","skip","pageStart","limit","pageSize","findOne","length","_doc","exports","module"],"mappings":"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","file":"eventService.js","sourcesContent":["/**\r\n * 操作事件数据对象\r\n * Created by chen on 17-8-23.\r\n */\r\n//import logger from '../logger';\r\n//import EventModel from '../models/event.model';\r\n//import uuidv1 from 'uuid/v1';\r\n\r\nconst {Parser}=require('../log/log');\r\nconst logger={};\r\nParser(logger,'EventService.js');\r\nconst EventModel=require('../models/event.model');\r\nconst uuidv1=require('uuid/v1');\r\n\r\nclass EventService {\r\n\r\n    /**\r\n     * 添加一个事件\r\n     * @param data 需要添加的事件数据\r\n     * @returns {Promise.<boolean>} 添加成功返回true，否则返回false；\r\n     */\r\n    static async add_event(data){\r\n        // const id = await EventService.findMaxId();\r\n        // data.id = Number(id) + 1;\r\n        // let event = new EventModel(data);\r\n        if(!data.id){\r\n            data.id = uuidv1();\r\n        }\r\n\r\n\r\n        let success = false;\r\n        await EventModel.create(data,function (err,event) {\r\n            if(!err) {\r\n                success = true;\r\n                logger.info('添加事件成功');\r\n            }else{\r\n                logger.error(err.message);\r\n            }\r\n        });\r\n\r\n        return success;\r\n    }\r\n\r\n    /**\r\n     * 根据条件删除事件\r\n     * @param conditions 删除条件\r\n     * @returns {Promise.<boolean>}删除成功返回true，否则返回false；\r\n     */\r\n    static async delete_event(conditions) {\r\n        let success = false;\r\n        const result = await EventModel.remove(conditions,function (err,event) {\r\n            if(!err) {\r\n                success = true;\r\n                logger.info('删除事件['+ event.ip +']成功');\r\n            }else{\r\n                logger.error(err.message);\r\n            }\r\n        });\r\n        return success;\r\n    }\r\n\r\n    /**\r\n     * 修改事件信息\r\n     * @param conditions 修改条件\r\n     * @param data 新的事件数据\r\n     * @returns {Promise.<*>} 返回修改后的数据\r\n     */\r\n    static async edit_event(conditions,data){\r\n        let result = null;\r\n        result = await EventModel.update(conditions,data).exec();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 根据条件查询符合条件的事件数量\r\n     * @param conditions\r\n     * @returns {Promise.<*>}\r\n     */\r\n    static async getTotal(conditions){\r\n        return await EventModel.find(conditions).count();\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * 查询所有事件\r\n     * @returns {Promise.<*>}\r\n     */\r\n    static async findAll(sort){\r\n        if(sort){\r\n            return await EventModel.find().sort(sort);\r\n        }else{\r\n            return await EventModel.find();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 根据条件查询事件\r\n     * @param conditions 查询条件\r\n     * @param sort 排序\r\n     * @param pagination 分页\r\n     * @returns {Promise.<*>} 返回查询到的数据\r\n     */\r\n    static async find_event(conditions,sort,pagination){\r\n        let result = null;\r\n        if(sort){\r\n\r\n            if(pagination){\r\n                result = await EventModel.find(conditions).skip(pagination.pageStart).limit(pagination.pageSize).sort(sort);\r\n            }else{\r\n                result = await EventModel.find().sort(sort);\r\n            }\r\n        }else{\r\n            if(pagination){\r\n                result = await EventModel.find(conditions).skip(pagination.pageStart).limit(pagination.pageSize);\r\n            }else{\r\n                result = await EventModel.find(conditions);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 根据ID查找事件信息\r\n     * @param id\r\n     * @returns {Promise.<*>}\r\n     */\r\n    static async find_one(id){\r\n        return await EventModel.findOne({id:id});\r\n    }\r\n\r\n    /**\r\n     * 获得ID最大值\r\n     * @returns {Promise.<number>}\r\n     */\r\n    static async findMaxId(){\r\n        const result = await EventModel.find().sort({id:-1}).limit(1);\r\n        if(result && result.length > 0){\r\n            return result[0]._doc.id;\r\n        }else{\r\n            return 0\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 根据条件判断是否存在符合条件的事件\r\n     * @param conditions 查询条件\r\n     * @returns {Promise.<boolean>} 有符合条件的对象返回true，否则返回false\r\n     */\r\n    static async isExist(conditions){\r\n        const result = await EventModel.find(conditions);\r\n        if(result && result.length > 0){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexports=module.exports=EventService;\r\n//export default EventService;"]}