{"version":3,"sources":["../../src/services/perimeterPointService.js"],"names":["require","Parser","logger","PerimeterPointModel","uuidv1","PerimeterPointService","data","id","success","create","err","perimeterPoint","info","error","message","Array","isArray","i","len","length","add_perimeterPoint","conditions","remove","realPosition","result","update","exec","find","count","sort","pagination","skip","pageStart","limit","pageSize","findOne","_doc","exports","module"],"mappings":"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","file":"perimeterPointService.js","sourcesContent":["/**\r\n * Created by chen on 17-8-23.\r\n */\r\n//import logger from '../logger';\r\n//import PerimeterPointModel from '../models/perimeterPoint.model';\r\n//import uuidv1 from 'uuid/v1';\r\n\r\nconst {Parser}=require('../log/log');\r\nconst logger={};\r\nParser(logger,'PerimeterPointService.js');\r\nconst PerimeterPointModel=require('../models/perimeterPoint.model');\r\nconst uuidv1=require('uuid/v1');\r\n\r\nclass PerimeterPointService {\r\n    /**\r\n     * 添加一个周界点\r\n     * @param data 需要添加的周界点数据\r\n     * @returns {Promise.<boolean>} 添加成功返回true，否则返回false；\r\n     */\r\n    static async add_perimeterPoint(data){\r\n        // const id = await PerimeterPointService.findMaxId();\r\n        // data.id = Number(id) + 1;\r\n        // let perimeterPoint = new PerimeterPointModel(data);\r\n        data.id = uuidv1();\r\n        let success = false;\r\n        await PerimeterPointModel.create(data,function (err,perimeterPoint) {\r\n            if(!err) {\r\n                success = true;\r\n                logger.info('添加周界点成功');\r\n            }else{\r\n                logger.error(err.message);\r\n            }\r\n        });\r\n\r\n        return success;\r\n    }\r\n\r\n    static async add_list(data){\r\n        let success = true;\r\n        if(Array.isArray(data)){\r\n            for(let i = 0,len=data.length; i < len; i++) {\r\n                success =await PerimeterPointService.add_perimeterPoint(data[i]);\r\n            }\r\n        }\r\n        return success;\r\n    }\r\n\r\n    /**\r\n     * 根据条件删除周界点\r\n     * @param conditions 删除条件\r\n     * @returns {Promise.<boolean>}删除成功返回true，否则返回false；\r\n     */\r\n    static async delete_perimeterPoint(conditions) {\r\n        let success = false;\r\n        const result = await PerimeterPointModel.remove(conditions,function (err,perimeterPoint) {\r\n            if(!err) {\r\n                success = true;\r\n                logger.info('删除周界点['+ perimeterPoint.realPosition +']成功');\r\n            }else{\r\n                logger.error(err.message);\r\n            }\r\n        });\r\n        return success;\r\n    }\r\n\r\n    /**\r\n     * 修改周界点信息\r\n     * @param conditions 修改条件\r\n     * @param data 新的周界点数据\r\n     * @returns {Promise.<*>} 返回修改后的数据\r\n     */\r\n    static async edit_perimeterPoint(conditions,data){\r\n        let result = null;\r\n        result = await PerimeterPointModel.update(conditions,data).exec();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 根据条件查询符合条件的周界点数量\r\n     * @param conditions\r\n     * @returns {Promise.<*>}\r\n     */\r\n    static async getTotal(conditions){\r\n        return await PerimeterPointModel.find(conditions).count();\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * 查询所有周界点\r\n     * @returns {Promise.<*>}\r\n     */\r\n    static async findAll(sort){\r\n        if(sort){\r\n            return await PerimeterPointModel.find().sort(sort);\r\n        }else{\r\n            return await PerimeterPointModel.find();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 根据条件查询周界点\r\n     * @param conditions 查询条件\r\n     * @param sort 排序\r\n     * @param pagination 分页\r\n     * @returns {Promise.<*>} 返回查询到的数据\r\n     */\r\n    static async find_perimeterPoint(conditions,sort,pagination){\r\n        let result = null;\r\n        if(sort){\r\n\r\n            if(pagination){\r\n                result = await PerimeterPointModel.find(conditions).skip(pagination.pageStart).limit(pagination.pageSize).sort(sort);\r\n            }else{\r\n                result = await PerimeterPointModel.find().sort(sort);\r\n            }\r\n        }else{\r\n            if(pagination){\r\n                result = await PerimeterPointModel.find(conditions).skip(pagination.pageStart).limit(pagination.pageSize);\r\n            }else{\r\n                result = await PerimeterPointModel.find(conditions);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 根据ID查找周界点信息\r\n     * @param id\r\n     * @returns {Promise.<*>}\r\n     */\r\n    static async find_one(id){\r\n        return await PerimeterPointModel.findOne({id:id});\r\n    }\r\n\r\n    /**\r\n     * 获得ID最大值\r\n     * @returns {Promise.<number>}\r\n     */\r\n    static async findMaxId(){\r\n        const result = await PerimeterPointModel.find().sort({id:-1}).limit(1);\r\n        if(result && result.length > 0){\r\n            return result[0]._doc.id;\r\n        }else{\r\n            return 0\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 根据条件判断是否存在符合条件的周界点\r\n     * @param conditions 查询条件\r\n     * @returns {Promise.<boolean>} 有符合条件的对象返回true，否则返回false\r\n     */\r\n    static async isExist(conditions){\r\n        const result = await PerimeterPointModel.find(conditions);\r\n        if(result && result.length > 0){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexports=module.exports=PerimeterPointService;\r\n//export default PerimeterPointService;"]}