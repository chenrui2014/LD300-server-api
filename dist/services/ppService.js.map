{"version":3,"sources":["../../src/services/ppService.js"],"names":["require","Parser","logger","PpModel","uuidv1","PpService","data","id","ppId","create","err","pp","_doc","info","error","message","conditions","success","remove","realPosition","result","update","exec","find","count","sort","pagination","skip","pageStart","limit","pageSize","findOne","length","exports","module"],"mappings":"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","file":"ppService.js","sourcesContent":["//import logger from '../logger';\r\n//import PpModel from '../models/pp.model';\r\n//import uuidv1 from 'uuid/v1';\r\n//import {Monitoring as MonitoringAreaModel} from \"../models/monitoringArea.model\";\r\n\r\nconst {Parser}=require('../log/log');\r\nconst logger={};\r\nParser(logger,'PpService.js');\r\nconst PpModel=require('../models/pp.model');\r\nconst uuidv1=require('uuid/v1');\r\n//const MonitoringAreaModel=require('../models/monitoringArea.model').Monitoring;\r\n\r\nclass PpService {\r\n    /**\r\n     * 添加一个周界\r\n     * @param data 需要添加的周界数据\r\n     * @returns {Promise.<boolean>} 添加成功返回true，否则返回false；\r\n     */\r\n    static async add_pp(data){\r\n        // const id = await PpService.findMaxId();\r\n        // data.id = Number(id) + 1;\r\n        // let pp = new PpModel(data);\r\n        data.id = uuidv1();\r\n        let ppId=null;\r\n        await PpModel.create(data,function (err,pp) {\r\n            if(!err) {\r\n                ppId = pp._doc.id;\r\n                logger.info('添加周界成功');\r\n            }else{\r\n                logger.error(err.message);\r\n            }\r\n        });\r\n\r\n        return ppId;\r\n    }\r\n\r\n    /**\r\n     * 根据条件删除周界\r\n     * @param conditions 删除条件\r\n     * @returns {Promise.<boolean>}删除成功返回true，否则返回false；\r\n     */\r\n    static async delete_pp(conditions) {\r\n        let success = false;\r\n        const result = await PpModel.remove(conditions,function (err,pp) {\r\n            if(!err) {\r\n                success = true;\r\n                logger.info('删除周界['+ pp.realPosition +']成功');\r\n            }else{\r\n                logger.error(err.message);\r\n            }\r\n        });\r\n        return success;\r\n    }\r\n\r\n    /**\r\n     * 修改周界信息\r\n     * @param conditions 修改条件\r\n     * @param data 新的周界数据\r\n     * @returns {Promise.<*>} 返回修改后的数据\r\n     */\r\n    static async edit_pp(conditions,data){\r\n        let result = null;\r\n        result = await PpModel.update(conditions,data).exec();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 根据条件查询符合条件的周界数量\r\n     * @param conditions\r\n     * @returns {Promise.<*>}\r\n     */\r\n    static async getTotal(conditions){\r\n        return await PpModel.find(conditions).count();\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * 查询所有周界\r\n     * @returns {Promise.<*>}\r\n     */\r\n    static async findAll(sort){\r\n        if(sort){\r\n            return await PpModel.find().sort(sort);\r\n        }else{\r\n            return await PpModel.find();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 根据条件查询周界\r\n     * @param conditions 查询条件\r\n     * @param sort 排序\r\n     * @param pagination 分页\r\n     * @returns {Promise.<*>} 返回查询到的数据\r\n     */\r\n    static async find_pp(conditions,sort,pagination){\r\n        let result = null;\r\n        if(sort){\r\n\r\n            if(pagination){\r\n                result = await PpModel.find(conditions).skip(pagination.pageStart).limit(pagination.pageSize).sort(sort);\r\n            }else{\r\n                result = await PpModel.find().sort(sort);\r\n            }\r\n        }else{\r\n            if(pagination){\r\n                result = await PpModel.find(conditions).skip(pagination.pageStart).limit(pagination.pageSize);\r\n            }else{\r\n                result = await PpModel.find(conditions);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 根据ID查找周界信息\r\n     * @param id\r\n     * @returns {Promise.<*>}\r\n     */\r\n    static async find_one(id){\r\n        return await PpModel.findOne({id:id});\r\n    }\r\n\r\n    /**\r\n     * 获得ID最大值\r\n     * @returns {Promise.<number>}\r\n     */\r\n    static async findMaxId(){\r\n        const result = await PpModel.find().sort({id:-1}).limit(1);\r\n        if(result && result.length > 0){\r\n            return result[0]._doc.id;\r\n        }else{\r\n            return 0\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 根据条件判断是否存在符合条件的周界\r\n     * @param conditions 查询条件\r\n     * @returns {Promise.<boolean>} 有符合条件的对象返回true，否则返回false\r\n     */\r\n    static async isExist(conditions){\r\n        const result = await PpModel.find(conditions);\r\n        if(result && result.length > 0){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexports=module.exports=PpService;"]}